package cn.chono.yopper.activity.bump;

import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.media.MediaPlayer;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.SystemClock;
import android.os.Vibrator;
import android.provider.Settings;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.AnimationUtils;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.umeng.analytics.MobclickAgent;
import com.umeng.message.PushAgent;

import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import cn.chono.yopper.MainFrameActivity;
import cn.chono.yopper.R;
import cn.chono.yopper.Service.Http.BumpPoll.BumpPollBean;
import cn.chono.yopper.Service.Http.BumpPoll.BumpPollRespBean;
import cn.chono.yopper.Service.Http.BumpPoll.BumpPollService;
import cn.chono.yopper.Service.Http.OnCallBackFailListener;
import cn.chono.yopper.Service.Http.OnCallBackSuccessListener;
import cn.chono.yopper.Service.Http.RespBean;
import cn.chono.yopper.YpSettings;
import cn.chono.yopper.data.BumpPoll;
import cn.chono.yopper.location.Loc;
import cn.chono.yopper.location.LocInfo;
import cn.chono.yopper.utils.ActivityUtil;
import cn.chono.yopper.utils.BackCallListener;
import cn.chono.yopper.utils.CommonObservable;
import cn.chono.yopper.utils.CommonObserver;
import cn.chono.yopper.utils.DialogUtil;
import cn.chono.yopper.utils.SensorUtils;
import cn.chono.yopper.utils.TimeUtil;
import cn.chono.yopper.utils.UUIDGenerator;

/**
 * @ClassName: TouchActivity
 * @Description:碰一碰(这里用一句话描述这个类的作用)
 * @author: xianbin.zou
 * @date: 2015年4月7日 上午11:41:21
 */
public class BumpStartActivity extends MainFrameActivity implements
        OnClickListener {

    /**
     * 传感器的管理对象
     */
    private SensorManager sensorManager;
    /**
     * 传感器对象
     */
    private Sensor gyroSensor;

    /**
     * 震动提示
     */
    private Vibrator vibrator;

    /**
     * 声音
     */
    private MediaPlayer mp;

    /**
     * 动画，右 ，黑手
     */
    private ImageView right_gesture_icon;
    /**
     * 动画，左,白手
     */
    private ImageView left_gesture_icon;
    /**
     * 动画头
     */
    private ImageView middle_icon;
    /**
     * 按下加友按钮
     */
    private RelativeLayout collision_but_layout;
    /**
     * 黑
     */
    private Animation black_handed_right, black_handed_left;

    /**
     * 白
     */
    private Animation empty_handed_right, empty_handed_left;
    /**
     * X近回按钮
     */
    private ImageView title_right_icon;

    /**
     * 加碰友按钮
     */
    private TextView collisio_course_but;

    // 第一次动画的标记
    private boolean liftAnimStart = false;
    private boolean rightAnimStart = false;
    // 第二次动画的标记
    private boolean liftAnimGoBack = false;
    private boolean rightAnimGoBack = false;

    // 第一次动画
    private Runnable animStartRunnable = new Runnable() {

        @Override
        public void run() {
            if (!isFinishing()) {
                if (liftAnimStart && rightAnimStart) {
                    liftAnimStart = false;
                    rightAnimStart = false;
                    new Handler().postDelayed(new Runnable() {

                        @Override
                        public void run() {
                            right_gesture_icon.clearAnimation();
                            right_gesture_icon.setAnimation(black_handed_left);
                            black_handed_left.start();

                            left_gesture_icon.clearAnimation();
                            left_gesture_icon.setAnimation(empty_handed_right);
                            empty_handed_right.start();

                        }
                    }, 300);

                }
            }

        }
    };
    private CommonObserver.AnimStartObserver animStartObserver = new CommonObserver.AnimStartObserver(
            animStartRunnable);

    // 第二次动画
    private Runnable animGoBackRunnable = new Runnable() {

        @Override
        public void run() {

            if (!isFinishing()) {
                if (liftAnimGoBack && rightAnimGoBack) {
                    liftAnimGoBack = false;
                    rightAnimGoBack = false;
                    new Handler().postDelayed(new Runnable() {

                        @Override
                        public void run() {
                            middle_icon.setVisibility(View.GONE);
                            right_gesture_icon.clearAnimation();
                            right_gesture_icon.setAnimation(black_handed_right);
                            black_handed_right.start();

                            left_gesture_icon.clearAnimation();
                            left_gesture_icon.setAnimation(empty_handed_left);
                            empty_handed_left.start();

                        }
                    }, 300);

                }
            }

        }
    };
    private CommonObserver.AnimGoBackObserver animGoBackObserver = new CommonObserver.AnimGoBackObserver(
            animGoBackRunnable);

    private RelativeLayout bump_layout;

    private String sceneId;

    private TextView error_location_tv;
    private LinearLayout error_location_layout;

    private Dialog _hintDialog;

    private double _latitude;
    private double _longtitude;
    private String _Address;

    private LocInfo myLoc;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentLayout(R.layout.bump_start_activity);
        PushAgent.getInstance(this).onAppStart();

        CommonObservable.getInstance().addObserver(animStartObserver);
        CommonObservable.getInstance().addObserver(animGoBackObserver);

        initView();
        // 震动
        vibrator = (Vibrator) this.getSystemService(Context.VIBRATOR_SERVICE);
        // 声音
        mp = MediaPlayer.create(getApplicationContext(), R.raw.office);

        sceneId = UUIDGenerator.getUUID();

        // 陀罗仪
        initInductor();

        // 动画
        setRightGesture();
        setLeftGesture();

        // 延时处理碰撞按钮
        setCollisionBtnState();

    }

    @Override
    protected void onResume() {
        super.onResume();
        MobclickAgent.onPageStart("碰一碰"); // 统计页面(仅有Activity的应用中SDK自动调用，不需要单独写)
        MobclickAgent.onResume(this); // 统计时长
        /**
         * 注册监听器
         */
        if (gyroSensor != null) {
            sensorManager.registerListener(sensoreventlistener, gyroSensor,
                    SensorManager.SENSOR_DELAY_NORMAL);
        }
        Loc.sendLocControlMessage(true);
        getLocinfo();
    }

    private  void getLocinfo() {

        new Thread(new Runnable() {

            @Override
            public void run() {
                int count = 0;
                while (true) {
                    boolean isExist = Loc.IsLocExist();
                    if (isExist) {
                        break;
                    }
                    count++;
                    if (count > 9) {
                        break;
                    }
                    SystemClock.sleep(1000);
                }

                myLoc = Loc.getLoc();
                if (myLoc != null && myLoc.getLoc() != null) {
                    LocHandler.sendEmptyMessage(1);

                } else {
                    LocHandler.sendEmptyMessage(0);
                }
            }
        }).start();

    }

    @Override
    protected void onPause() {
        super.onPause();
        MobclickAgent.onPageEnd("碰一碰"); // 统计页面(仅有Activity的应用中SDK自动调用，不需要单独写)
        MobclickAgent.onPause(this); // 统计时长
        removeSensorManager();
        cancelCollisionDetection();
        Loc.sendLocControlMessage(false);
    }

    private Handler LocHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {

            try {

                if (msg.what == 0) {// 定位失败

                    error_location_layout.setVisibility(View.VISIBLE);
                    bump_layout.setVisibility(View.GONE);

                } else if (msg.what == 1) {// 找到位置
                    error_location_layout.setVisibility(View.GONE);
                    bump_layout.setVisibility(View.VISIBLE);
                    _latitude = myLoc.getLoc().getLatitude();
                    _longtitude = myLoc.getLoc().getLongitude();
                    _Address = myLoc.getInfo();
                    getSchedule(1000, 300);

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    };

    private void initView() {
        getTitleLayout().setVisibility(View.GONE);

        right_gesture_icon = (ImageView) findViewById(R.id.right_gesture_icon);
        left_gesture_icon = (ImageView) findViewById(R.id.left_gesture_icon);
        middle_icon = (ImageView) findViewById(R.id.middle_icon);
        collision_but_layout = (RelativeLayout) findViewById(R.id.collision_but_layout);
        title_right_icon = (ImageView) findViewById(R.id.title_right_icon);
        collisio_course_but = (TextView) findViewById(R.id.collisio_course_but);

        bump_layout = (RelativeLayout) findViewById(R.id.bump_layout);

        error_location_tv = (TextView) findViewById(R.id.error_location_tv);
        error_location_layout = (LinearLayout) findViewById(R.id.error_location_layout);

        title_right_icon.setOnClickListener(this);
        collisio_course_but.setOnClickListener(this);
        error_location_tv.setOnClickListener(this);

        collision_but_layout.setVisibility(View.GONE);
    }

    private void supportBumpDialog() {
        if (_hintDialog == null) {

            _hintDialog = DialogUtil.createHintOperateDialog(BumpStartActivity.this, "", "您的设备不支持“碰一碰”功能！请“试一试同时点我”吧", "", "确定", backCallListener);
            _hintDialog.setCanceledOnTouchOutside(false);// 设置点击屏幕Dialog不消失

//			LayoutInflater inflater = (LayoutInflater) this
//					.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
//			LinearLayout view = (LinearLayout) inflater.inflate(
//					R.layout.net_dialog_layout, null);
//			_hintDialog = DialogUtil.hineDialog(this, view, Gravity.CENTER, -1);
//			net_dialog_hint = (TextView) view
//					.findViewById(R.id.net_dialog_hint);
//			TextView net_dialog_confirm = (TextView) view
//					.findViewById(R.id.net_dialog_confirm);
//
//			net_dialog_confirm.setOnClickListener(this);
        }
    }

    /**
     * 设置右边动画
     *
     * @throws
     * @Title: setright_icon_black
     * @param:
     * @return: void
     */
    private void setRightGesture() {

        black_handed_right = AnimationUtils.loadAnimation(this,
                R.anim.black_handed_right);

        black_handed_left = AnimationUtils.loadAnimation(this,
                R.anim.black_handed_left);

        right_gesture_icon.clearAnimation();

        right_gesture_icon.setAnimation(black_handed_right);

        black_handed_right.setAnimationListener(new AnimationListener() {

            @Override
            public void onAnimationStart(Animation animation) {

            }

            @Override
            public void onAnimationRepeat(Animation animation) {

            }

            @Override
            public void onAnimationEnd(Animation animation) {

                black_handed_right.setFillAfter(true);

                liftAnimStart = true;

                CommonObservable.getInstance().notifyObservers(
                        CommonObserver.AnimStartObserver.class);

            }
        });
        black_handed_left.setAnimationListener(new AnimationListener() {

            @Override
            public void onAnimationStart(Animation animation) {

            }

            @Override
            public void onAnimationRepeat(Animation animation) {

            }

            @Override
            public void onAnimationEnd(Animation animation) {
                black_handed_left.setFillAfter(true);
                middle_icon.setVisibility(View.VISIBLE);

                liftAnimGoBack = true;

                CommonObservable.getInstance().notifyObservers(
                        CommonObserver.AnimGoBackObserver.class);

            }
        });

    }

    /**
     * 设置左边动画
     *
     * @param
     * @return void 返回类型
     * @throws
     * @Title: setLeftGesture
     * @Description: TODO(这里用一句话描述这个方法的作用)
     */
    private void setLeftGesture() {

        empty_handed_left = AnimationUtils.loadAnimation(this,
                R.anim.empty_handed_left);
        empty_handed_right = AnimationUtils.loadAnimation(this,
                R.anim.empty_handed_right);

        left_gesture_icon.clearAnimation();
        left_gesture_icon.setAnimation(empty_handed_left);

        empty_handed_left.setAnimationListener(new AnimationListener() {

            @Override
            public void onAnimationStart(Animation animation) {

            }

            @Override
            public void onAnimationRepeat(Animation animation) {

            }

            @Override
            public void onAnimationEnd(Animation animation) {
                empty_handed_left.setFillAfter(true);
                rightAnimStart = true;

                CommonObservable.getInstance().notifyObservers(
                        CommonObserver.AnimStartObserver.class);

            }
        });
        empty_handed_right.setAnimationListener(new AnimationListener() {

            @Override
            public void onAnimationStart(Animation animation) {

            }

            @Override
            public void onAnimationRepeat(Animation animation) {

            }

            @Override
            public void onAnimationEnd(Animation animation) {
                empty_handed_right.setFillAfter(true);

                rightAnimGoBack = true;

                CommonObservable.getInstance().notifyObservers(
                        CommonObserver.AnimGoBackObserver.class);

            }
        });

    }

    /**
     * 感应器对象初始化
     *
     * @param
     * @return void 返回类型
     * @throws
     * @Title: initInductor
     * @Description: TODO(这里用一句话描述这个方法的作用)
     */
    private void initInductor() {
        sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);
        gyroSensor = sensorManager.getDefaultSensor(Sensor.TYPE_GYROSCOPE);
        if (gyroSensor == null) {
            supportBumpDialog();

            if (!isFinishing()) {
                _hintDialog.show();
            }
            return;
        }

        /**
         * 注册监听器
         */
        sensorManager.registerListener(sensoreventlistener, gyroSensor,
                SensorManager.SENSOR_DELAY_NORMAL);

    }

    /**
     * 设置碰撞按钮延迟显示处理
     *
     * @param
     * @return void 返回类型
     * @throws
     * @Title: setCollisionBtnState
     * @Description: TODO(这里用一句话描述这个方法的作用)
     */
    private void setCollisionBtnState() {
        // 开启一个延迟任务，5秒后显示碰的按钮
        new Handler().postDelayed(new Runnable() {

            @Override
            public void run() {
                collision_but_layout.setVisibility(View.VISIBLE);

            }
        }, 5000);
    }

    private static final byte CHANGE = 0x1;

    /**
     * 传感器的监听
     */
    private SensorEventListener sensoreventlistener = new SensorEventListener() {

        @Override
        public void onAccuracyChanged(Sensor sensor, int accuracy) {

        }

        @Override
        public void onSensorChanged(SensorEvent event) {
            float[] valuse = event.values;
            Message message = new Message();
            message.obj = valuse;
            message.what = CHANGE;
            sensorHandler.sendMessage(message);

        }
    };

    private SensorUtils sensor_x = new SensorUtils(this);
    private SensorUtils sensor_y = new SensorUtils(this);
    private SensorUtils sensor_z = new SensorUtils(this);

    private List<Long> Time_Bump = new ArrayList<Long>();
    private int isPostUUID = 0;
    private boolean isPostExecute = true;
    /**
     * 时间戳
     */
    public static long timeT = 0;
    public static long timeDifference = 0;

    private Handler sensorHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {

            switch (msg.what) {

                case CHANGE:
                    float[] valuse = (float[]) msg.obj;

                    boolean stats_x = sensor_x.getGyroscopData(Double
                            .valueOf(valuse[0]));
                    boolean stats_y = sensor_y.getGyroscopData(Double
                            .valueOf(valuse[1]));
                    boolean stats_z = sensor_z.getGyroscopData(Double
                            .valueOf(valuse[2]));

                    if (stats_x || stats_y || stats_z) {// 当某一个轴返回

                        setListLongTime(timeT);

                        sensor_x.setArrayList();
                        sensor_y.setArrayList();
                        sensor_z.setArrayList();

                    }
                    break;
            }
            super.handleMessage(msg);
        }

    };

    @Override
    public void finish() {
        YpSettings.isBumpOnClick = true;
        super.finish();

//		overridePendingTransition(0, R.anim.out_to_bottom);
    }

    @Override
    protected void onDestroy() {

        if (sensorHandler != null) {
            sensorHandler.removeCallbacksAndMessages(null);
        }
        if (bumphandler != null) {
            bumphandler.removeCallbacksAndMessages(null);
        }
        super.onDestroy();
        removeAnimation();
        removeSensorManager();
        cancelCollisionDetection();

    }

    private void removeAnimation() {
        black_handed_right.cancel();
        black_handed_left.cancel();
        right_gesture_icon.clearAnimation();
        empty_handed_left.cancel();
        empty_handed_right.cancel();
        left_gesture_icon.clearAnimation();
    }

    private void removeSensorManager() {
        if (sensorManager == null) {
            return;
        }
        if (gyroSensor == null) {
            return;
        }
        /**
         * 解除注册
         */
        sensorManager.unregisterListener(sensoreventlistener, gyroSensor);
        if (mp != null) {
            mp.stop();
        }
    }

    /**
     * 添加请求数据
     *
     * @param @param timeT 设定文件 时间戳
     * @return void 返回类型
     * @throws
     * @Title: setListLongTime
     */
    private void setListLongTime(long timeT) {
        long nacurrenT = TimeUtil.getCurrentNanosecondTime() + timeT;
        Time_Bump.add(nacurrenT);
    }

    public long hundredNanosecondTime_1 = 0;
    public long hundredNanosecondTime_2 = 0;
    public long visitServerOneWayTime = 0;
    public long localtime = 0;


    /**
     * Bump碰成功的
     */

    private Handler bumphandler = new Handler() {
        public void handleMessage(Message msg) {
            super.handleMessage(msg);
            if (msg.what == 1) {

                if (!isPostExecute) {
                    return;
                }


                BumpPollBean bumpPollBean = new BumpPollBean();
                bumpPollBean.setSceneId(sceneId);
                bumpPollBean.setBumpEvent(null);
                if (Time_Bump.size() > isPostUUID) {
                    BumpPollBean.BumpEvent b_Event = new BumpPollBean.BumpEvent();
                    b_Event.setTimestamp(Time_Bump.get(isPostUUID));
                    b_Event.set_latitude(_latitude);
                    b_Event.set_longtitude(_longtitude);
                    b_Event.set_Address(_Address);
                    bumpPollBean.setBumpEvent(b_Event);
                    isPostUUID++;
                }


                BumpPollService pollService = new BumpPollService(BumpStartActivity.this);

                pollService.parameter(bumpPollBean);

                pollService.callBack(new OnCallBackSuccessListener() {
                    @Override
                    public void onSuccess(RespBean respBean) {
                        super.onSuccess(respBean);


                        BumpPollRespBean pollRespBean = (BumpPollRespBean) respBean;
                        BumpPoll bumpPoll = pollRespBean.getResp();

                        isPostExecute = true;
                        hundredNanosecondTime_2 = TimeUtil
                                .getCurrentNanosecondTime();
                        visitServerOneWayTime = (hundredNanosecondTime_1 - hundredNanosecondTime_2) / 2;


                        if (bumpPoll != null) {
                            // 得到服务器的时间后，算出时间戳
                            timeDifference = bumpPoll
                                    .getTimestamp()
                                    - visitServerOneWayTime;
                            if (localtime == 0) {
                                localtime = visitServerOneWayTime;
                                timeT = timeDifference
                                        - hundredNanosecondTime_1;
                            } else {
                                if (visitServerOneWayTime < localtime) {
                                    localtime = visitServerOneWayTime;
                                    timeT = timeDifference
                                            - hundredNanosecondTime_1;
                                }
                            }
                            if (bumpPoll.getBumpResult() == null) {
                                isPostExecute = true;
                                return;
                            }
                            cancelCollisionDetection();
                            vibrator.vibrate(500);

                            Bundle bundle = new Bundle();
                            bundle.putSerializable("BumpPoll",
                                    bumpPoll);
                            ActivityUtil.jump(
                                    BumpStartActivity.this,
                                    BumpWinActivity.class,
                                    bundle, 0,
                                    100);
                            finish();
                        }


                    }
                }, new OnCallBackFailListener() {
                    @Override
                    public void onFail(RespBean respBean) {
                        super.onFail(respBean);

                        isPostExecute = true;
                    }
                });


                hundredNanosecondTime_1 = 0;
                hundredNanosecondTime_2 = 0;
                visitServerOneWayTime = 0;
                localtime = 0;


                isPostExecute = false;
                hundredNanosecondTime_1 = TimeUtil
                        .getCurrentNanosecondTime();
                pollService.enqueue();


            }
        }
    };

    private Timer timer;
    private TimerTask timerTask;

    public void getSchedule(long startTime, long endTime) {
        cancelCollisionDetection();
        if (timer == null) {
            timer = new Timer(true);
        }
        if (timerTask == null) {
            timerTask = new TimerTask() {
                public void run() {
                    Message msg = new Message();
                    msg.what = 1;
                    bumphandler.sendMessage(msg);
                }
            };
        }

        // 启动定时器
        timer.schedule(timerTask, startTime, endTime);

    }

    /**
     * 清除检测是否碰撞成功
     *
     * @param
     * @return void 返回类型
     * @throws
     * @Title: cancelCrashDetection
     * @Description: TODO(这里用一句话描述这个方法的作用)
     */

    public void cancelCollisionDetection() {
        if (timer != null) {
            timer.cancel();
            timer = null;
        }
        if (timerTask != null) {
            timerTask.cancel();
            timerTask = null;

        }

    }

    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.collisio_course_but:

                setListLongTime(timeT);

                break;
            case R.id.error_location_tv:
                try {
                    Intent intent = new Intent(
                            Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                    startActivity(intent);
                } catch (Exception e) {
                    Intent intent = new Intent(Settings.ACTION_SETTINGS);
                    BumpStartActivity.this.startActivity(intent);
                }
                break;
            case R.id.title_right_icon:
                finish();
                break;
            default:
                break;
        }

    }

    private BackCallListener backCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {
            if (!isFinishing()) {
                _hintDialog.dismiss();
            }
            collision_but_layout.setVisibility(View.VISIBLE);
        }

        @Override
        public void onCancel(View view, Object... obj) {
            if (!isFinishing()) {
                _hintDialog.dismiss();
            }

        }
    };
}