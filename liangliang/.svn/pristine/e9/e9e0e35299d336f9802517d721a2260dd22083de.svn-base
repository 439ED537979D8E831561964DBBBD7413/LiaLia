package cn.chono.yopper.smack;

import org.jivesoftware.smack.ConnectionConfiguration;
import org.jivesoftware.smack.XMPPConnection;
import org.jivesoftware.smack.XMPPException;
import org.jivesoftware.smack.provider.PrivacyProvider;
import org.jivesoftware.smack.provider.ProviderManager;
import org.jivesoftware.smackx.GroupChatInvitation;
import org.jivesoftware.smackx.PrivateDataManager;
import org.jivesoftware.smackx.bytestreams.socks5.provider.BytestreamsProvider;
import org.jivesoftware.smackx.packet.ChatStateExtension;
import org.jivesoftware.smackx.packet.LastActivity;
import org.jivesoftware.smackx.packet.OfflineMessageInfo;
import org.jivesoftware.smackx.packet.OfflineMessageRequest;
import org.jivesoftware.smackx.packet.SharedGroupsInfo;
import org.jivesoftware.smackx.provider.AdHocCommandDataProvider;
import org.jivesoftware.smackx.provider.DataFormProvider;
import org.jivesoftware.smackx.provider.DelayInformationProvider;
import org.jivesoftware.smackx.provider.DiscoverInfoProvider;
import org.jivesoftware.smackx.provider.DiscoverItemsProvider;
import org.jivesoftware.smackx.provider.MUCAdminProvider;
import org.jivesoftware.smackx.provider.MUCOwnerProvider;
import org.jivesoftware.smackx.provider.MUCUserProvider;
import org.jivesoftware.smackx.provider.MessageEventProvider;
import org.jivesoftware.smackx.provider.MultipleAddressesProvider;
import org.jivesoftware.smackx.provider.RosterExchangeProvider;
import org.jivesoftware.smackx.provider.StreamInitiationProvider;
import org.jivesoftware.smackx.provider.VCardProvider;
import org.jivesoftware.smackx.provider.XHTMLExtensionProvider;
import org.jivesoftware.smackx.search.UserSearch;

import java.io.File;

import cn.chono.yopper.YpSettings;


public class XmppConnection {

	public static int SERVER_PORT = 5222;
	public static String SERVER_NAME = "@chono";
	//测试
//	public static String Test_SERVER_HOST = "api.chono.cn";
	//正式
	public static String SERVER_HOST = "im.apicdns.com";

	public static String Test_SERVER_HOST = "192.168.1.151";

	private static XMPPConnection xmppConnection = null;

	public static void openConnection() {
		try {
			if (null == xmppConnection || !xmppConnection.isAuthenticated()) {
				XMPPConnection.DEBUG_ENABLED = true;

				ConnectionConfiguration config;
				
				if(YpSettings.isTest){
					config = new ConnectionConfiguration(Test_SERVER_HOST, SERVER_PORT, SERVER_NAME);
				}else{
					config = new ConnectionConfiguration(SERVER_HOST, SERVER_PORT, SERVER_NAME);
				}

				config.setReconnectionAllowed(true);
				config.setSendPresence(false);
				config.setReconnectionAllowed(true);
				config.setSecurityMode(ConnectionConfiguration.SecurityMode.enabled);
				// config.setSASLAuthenticationEnabled(false);
				File file = new File("/mnt/sdcard/security/");
				file.mkdirs();
				config.setTruststorePath("/mnt/sdcard/security/cacerts.bks");
				config.setTruststorePassword("123456");
				config.setTruststoreType("bks");
				config.setSASLAuthenticationEnabled(false);
				config.setDebuggerEnabled(true);
				xmppConnection = new XMPPConnection(config);
				xmppConnection.connect();//
				configureConnection(ProviderManager.getInstance());
			}
		} catch (XMPPException xe) {
			xe.printStackTrace();
		}
	}

	/**
	 * 获取连接对象
	 */
	public static XMPPConnection getConnection() {
		if (xmppConnection == null) {
			openConnection();
		}
		return xmppConnection;
	}



	/**
	 * 关闭连接
	 */
	public static void closeConnection() {
		if(xmppConnection!=null){  
			if(xmppConnection.isConnected()){
				xmppConnection.disconnect();
			}
			xmppConnection = null;
		}
	}

	/**
	 * xmpp配置
	 */
	private static void configureConnection(ProviderManager pm) {
		// Private Data Storage
		// add IQ handling
		/*
		 * pm.addIQProvider("query", "http://jabber.org/protocol/disco#info",
		 * new DiscoverInfoProvider()); // add delayed delivery notifications
		 * pm.addExtensionProvider("delay", "urn:xmpp:delay", new
		 * DelayInfoProvider()); pm.addExtensionProvider("x", "jabber:x:delay",
		 * new DelayInfoProvider()); // add carbons and forwarding
		 * pm.addExtensionProvider("forwarded", Forwarded.NAMESPACE, new
		 * Forwarded.Provider()); pm.addExtensionProvider("sent",
		 * Carbon.NAMESPACE, new Carbon.Provider());
		 * pm.addExtensionProvider("received", Carbon.NAMESPACE, new
		 * Carbon.Provider()); // add delivery receipts
		 * pm.addExtensionProvider(DeliveryReceipt.ELEMENT,
		 * DeliveryReceipt.NAMESPACE, new DeliveryReceipt.Provider());
		 * pm.addExtensionProvider(DeliveryReceiptRequest.ELEMENT,
		 * DeliveryReceipt.NAMESPACE, new DeliveryReceiptRequest.Provider()); //
		 * add XMPP Ping (XEP-0199) pm.addIQProvider("ping", "urn:xmpp:ping",
		 * new PingProvider());
		 */
		pm.addIQProvider("query", "jabber:iq:private",
				new PrivateDataManager.PrivateDataIQProvider());
		// Time
		try {
			pm.addIQProvider("query", "jabber:iq:time",
					Class.forName("org.jivesoftware.smackx.packet.Time"));
		} catch (Exception e) {
			e.printStackTrace();
		}
		// Roster Exchange
		pm.addExtensionProvider("x", "jabber:x:roster",new RosterExchangeProvider());
		// Message Events
		pm.addExtensionProvider("x", "jabber:x:event",new MessageEventProvider());
		// Chat State
		pm.addExtensionProvider("active","http://jabber.org/protocol/chatstates",new ChatStateExtension.Provider());
		pm.addExtensionProvider("composing","http://jabber.org/protocol/chatstates",new ChatStateExtension.Provider());
		pm.addExtensionProvider("paused","http://jabber.org/protocol/chatstates",new ChatStateExtension.Provider());
		pm.addExtensionProvider("inactive","http://jabber.org/protocol/chatstates",new ChatStateExtension.Provider());
		pm.addExtensionProvider("gone","http://jabber.org/protocol/chatstates",new ChatStateExtension.Provider());
		// XHTML
		pm.addExtensionProvider("html", "http://jabber.org/protocol/xhtml-im",new XHTMLExtensionProvider());
		// Group Chat Invitations
		pm.addExtensionProvider("x", "jabber:x:conference",new GroupChatInvitation.Provider());
		// Service Discovery # Items 
		pm.addIQProvider("query", "http://jabber.org/protocol/disco#items",new DiscoverItemsProvider());
		// Service Discovery # Info 
		pm.addIQProvider("query", "http://jabber.org/protocol/disco#info",new DiscoverInfoProvider());
		// Data Forms
		pm.addExtensionProvider("x", "jabber:x:data", new DataFormProvider());
		// MUC User
		pm.addExtensionProvider("x", "http://jabber.org/protocol/muc#user",new MUCUserProvider());
		// MUC Admin
		pm.addIQProvider("query", "http://jabber.org/protocol/muc#admin",new MUCAdminProvider());
		// MUC Owner
		pm.addIQProvider("query", "http://jabber.org/protocol/muc#owner",new MUCOwnerProvider());
		// Delayed Delivery
		pm.addExtensionProvider("x", "jabber:x:delay",new DelayInformationProvider());
		// Version
		try {
			pm.addIQProvider("query", "jabber:iq:version",Class.forName("org.jivesoftware.smackx.packet.Version"));
		} catch (ClassNotFoundException e) {
			// Not sure what's happening here.
		}
		// VCard
		pm.addIQProvider("vCard", "vcard-temp", new VCardProvider());
		// Offline Message Requests
		pm.addIQProvider("offline", "http://jabber.org/protocol/offline",new OfflineMessageRequest.Provider());
		// Offline Message Indicator
		pm.addExtensionProvider("offline","http://jabber.org/protocol/offline",new OfflineMessageInfo.Provider());
		// Last Activity
		pm.addIQProvider("query", "jabber:iq:last", new LastActivity.Provider());
		// User Search
		pm.addIQProvider("query", "jabber:iq:search", new UserSearch.Provider());
		// SharedGroupsInfo
		pm.addIQProvider("sharedgroup","http://www.jivesoftware.org/protocol/sharedgroup",new SharedGroupsInfo.Provider());
		// JEP-33: Extended Stanza Addressing
		pm.addExtensionProvider("addresses","http://jabber.org/protocol/address",new MultipleAddressesProvider());
		pm.addIQProvider("si", "http://jabber.org/protocol/si",new StreamInitiationProvider());
		pm.addIQProvider("query", "http://jabber.org/protocol/bytestreams",new BytestreamsProvider());
		pm.addIQProvider("query", "jabber:iq:privacy", new PrivacyProvider());
		pm.addIQProvider("command", "http://jabber.org/protocol/commands",new AdHocCommandDataProvider());
		pm.addExtensionProvider("malformed-action","http://jabber.org/protocol/commands",new AdHocCommandDataProvider.MalformedActionError());
		pm.addExtensionProvider("bad-locale","http://jabber.org/protocol/commands",new AdHocCommandDataProvider.BadLocaleError());
		pm.addExtensionProvider("bad-payload","http://jabber.org/protocol/commands",new AdHocCommandDataProvider.BadPayloadError());
		pm.addExtensionProvider("bad-sessionid","http://jabber.org/protocol/commands",new AdHocCommandDataProvider.BadSessionIDError());
		pm.addExtensionProvider("session-expired","http://jabber.org/protocol/commands",new AdHocCommandDataProvider.SessionExpiredError());
	}
}
