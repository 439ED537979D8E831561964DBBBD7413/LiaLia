package cn.chono.yopper.activity.appointment;

import android.annotation.SuppressLint;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.graphics.drawable.Drawable;
import android.net.Uri;
import android.os.Bundle;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.LinearLayout.LayoutParams;
import android.widget.ProgressBar;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.baidu.mapapi.model.LatLng;
import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.lidroid.xutils.util.LogUtils;
import com.umeng.analytics.MobclickAgent;
import com.umeng.message.PushAgent;

import cn.chono.yopper.MainFrameActivity;
import cn.chono.yopper.R;
import cn.chono.yopper.Service.Http.ApointValidJoin.AppointMentsValidJoinBean;
import cn.chono.yopper.Service.Http.ApointValidJoin.AppointMentsValidJoinService;
import cn.chono.yopper.Service.Http.AppointClose.AppointMentsCloseBean;
import cn.chono.yopper.Service.Http.AppointClose.AppointMentsCloseService;
import cn.chono.yopper.Service.Http.AppointJoin.AppointMentsJoinBean;
import cn.chono.yopper.Service.Http.AppointJoin.AppointMentsJoinService;
import cn.chono.yopper.Service.Http.BubblingReport.BubblingReportBean;
import cn.chono.yopper.Service.Http.BubblingReport.BubblingReportService;
import cn.chono.yopper.Service.Http.ChatAttampt.ChatAttamptBean;
import cn.chono.yopper.Service.Http.ChatAttampt.ChatAttamptRespBean;
import cn.chono.yopper.Service.Http.ChatAttampt.ChatAttamptService;
import cn.chono.yopper.Service.Http.DatingDetail.DatingDetailBean;
import cn.chono.yopper.Service.Http.DatingDetail.DatingDetailRespBean;
import cn.chono.yopper.Service.Http.DatingDetail.DatingDetailService;
import cn.chono.yopper.Service.Http.OnCallBackFailListener;
import cn.chono.yopper.Service.Http.OnCallBackSuccessListener;
import cn.chono.yopper.Service.Http.RespBean;
import cn.chono.yopper.Service.Http.UserInfo.UserInfoBean;
import cn.chono.yopper.Service.Http.UserInfo.UserInfoRespBean;
import cn.chono.yopper.Service.Http.UserInfo.UserInfoService;
import cn.chono.yopper.YPApplication;
import cn.chono.yopper.YpSettings;
import cn.chono.yopper.activity.base.SimpleWebViewActivity;
import cn.chono.yopper.activity.chat.ChatActivity;
import cn.chono.yopper.activity.usercenter.UserInfoActivity;
import cn.chono.yopper.activity.usercenter.UserInfoEditActivity;
import cn.chono.yopper.activity.video.VideoDetailGetActivity;
import cn.chono.yopper.data.AppointDetailDto;
import cn.chono.yopper.data.AttamptRespDto;
import cn.chono.yopper.data.Constant;
import cn.chono.yopper.data.MoviceDto;
import cn.chono.yopper.data.ShopDto;
import cn.chono.yopper.data.TargetUserDto;
import cn.chono.yopper.data.UserDto;
import cn.chono.yopper.glide.CropCircleTransformation;
import cn.chono.yopper.location.Loc;
import cn.chono.yopper.location.LocInfo;
import cn.chono.yopper.utils.ActivityUtil;
import cn.chono.yopper.utils.BackCall;
import cn.chono.yopper.utils.BackCallListener;
import cn.chono.yopper.utils.CheckUtil;
import cn.chono.yopper.utils.DbHelperUtils;
import cn.chono.yopper.utils.DialogUtil;
import cn.chono.yopper.utils.ISO8601;
import cn.chono.yopper.utils.ImgUtils;
import cn.chono.yopper.utils.JsonUtils;
import cn.chono.yopper.utils.TimeUtil;
import cn.chono.yopper.utils.ViewsUtils;
import cn.chono.yopper.view.MyDialog;
import cn.chono.yopper.view.ProgressBarView;
import cn.chono.yopper.view.SquareHeightRelativeLayout;

/**
 * 约会详情
 *
 * @author sam.sun
 */
public class AppointmentDetailActivity extends MainFrameActivity  implements OnClickListener {


    // 本地缓存数据
    private LayoutInflater mInflater;

    private View contextView;

    private ImageView appoint_detail_userImg_iv;
    private ImageView   appoint_detail_level_men_iv;
    private TextView  appoint_detail_name_tv;
    private TextView    appoint_detail_sex_hor_tv;

    private ImageView appoint_detail_datingtype_iv;
    private TextView appoint_detail_datingtype_tv;
    private ImageView appoint_detail_costType_iv;
    private TextView appoint_detail_costType_tv;
    private LinearLayout appoint_detail_address_layout;
    private ImageView appoint_detail_address_iv;
    private TextView  appoint_detail_address_tv;
    private TextView  appoint_detail_time_tv;

    private SquareHeightRelativeLayout appoint_detail_dog_img_layout;
    private ImageView appoint_detail_dog_img_iv;

    private RelativeLayout appoint_detail_root_layout;

    private RelativeLayout appoint_detail_other_info_layout;
    private LinearLayout appoint_detail_other_detail_layout;

    private TextView appoint_detail_look_num_tv;
    private TextView  appoint_detail_join_num_tv;

    private LinearLayout appoint_detail_status_pb_layout;
    private TextView appoint_detail_phone_status_tv;
    private TextView appoint_detail_video_status_tv;
    private ProgressBar appoint_detail_info_pb;
    private ProgressBar appoint_detail_safe_pb;
    private ProgressBar appoint_detail_qinmi_pb;
    private ProgressBarView appoint_detail_all_pbv;


    private TextView appoint_detail_taruser_hint_tv;
    private RelativeLayout appoint_detail_taruser_layout;
    private ImageView appoint_detail_taruser_Img_iv;
    private TextView appoint_detail_target_name_tv;
    private TextView appoint_detail_target_sex_hor_tv;
    private TextView appoint_detail_target_time_tv;
    private TextView appoint_detail_target_contact_tv;

    private LinearLayout appoint_detail_bottom_layout;
    private TextView appoint_detail_bottom_left_tv;
    private View appoint_detail_bottom_line;
    private TextView appoint_detail_bottom_right_tv;

    private int loginUserid;

    private int userid;

    private String dating_id;

    private CropCircleTransformation circletransformation;
    private BitmapPool mPool;

//    private CropCircleTransformation transformation;

    private  TargetUserDto targetDto;

    private int targetuserid;

    private Dialog loadingDiaog;

    private Dialog helpdialog;

    private boolean isPostchating = false;

    private AppointDetailDto appoindetaildto;

    private int loginuser_sex;

    private int chatuserid;

    private double lat = 0;
    private double lng = 0;

    private boolean isGoSignUp=false;

    @SuppressLint("NewApi")
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        PushAgent.getInstance(this).onAppStart();
        loginUserid = YPApplication.loginUser.getUserId();
        loginuser_sex = DbHelperUtils.getDbUserSex(loginUserid);

        Bundle bundle=this.getIntent().getExtras();
        if(bundle!=null){
            dating_id=bundle.getString(YpSettings.APPOINTMENT_ID);
            if(bundle.containsKey(YpSettings.USERID)){
                userid= bundle.getInt(YpSettings.USERID);
            }
        }

        mPool = Glide.get(this).getBitmapPool();
        circletransformation = new CropCircleTransformation(mPool);

        initComponent();

        appoint_detail_root_layout.setVisibility(View.GONE);
        getDatingDetail();
    }


    /**
     * 初始化
     */
    private void initComponent() {

        // 设置标题栏
        this.getTvTitle().setText("约会详情");
        this.getBtnGoBack().setVisibility(View.VISIBLE);
        getBtnOption().setImageResource(R.drawable.option_more_icon);
        getBtnOption().setVisibility(View.VISIBLE);
        gettvOption().setVisibility(View.GONE);
        this.getOptionLayout().setVisibility(View.VISIBLE);

        this.getGoBackLayout().setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                ViewsUtils.preventViewMultipleClick(arg0, 500);

                finish();
            }
        });

        this.getOptionLayout().setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View arg0) {
                ViewsUtils.preventViewMultipleClick(arg0, 500);
                if(loginUserid!=userid){
                    showOptionsDialog();
                }else{
                    showMyOptionsDialog();
                }
            }
        });

        // 内容部分
        mInflater = (LayoutInflater) this.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
        contextView = mInflater.inflate(R.layout.appointment_detail_activity, null);

        appoint_detail_root_layout= (RelativeLayout) contextView.findViewById(R.id.appoint_detail_root_layout);

        appoint_detail_userImg_iv= (ImageView) contextView.findViewById(R.id.appoint_detail_userImg_iv);
        appoint_detail_level_men_iv= (ImageView) contextView.findViewById(R.id.appoint_detail_level_men_iv);
        appoint_detail_name_tv= (TextView) contextView.findViewById(R.id.appoint_detail_name_tv);
        appoint_detail_sex_hor_tv= (TextView) contextView.findViewById(R.id.appoint_detail_sex_hor_tv);

        appoint_detail_userImg_iv.setOnClickListener(this);

        appoint_detail_datingtype_iv= (ImageView) contextView.findViewById(R.id.appoint_detail_datingtype_iv);
        appoint_detail_datingtype_tv= (TextView) contextView.findViewById(R.id.appoint_detail_datingtype_tv);
        appoint_detail_costType_tv= (TextView) contextView.findViewById(R.id.appoint_detail_costType_tv);
        appoint_detail_costType_iv= (ImageView) contextView.findViewById(R.id.appoint_detail_costType_iv);
        appoint_detail_address_layout= (LinearLayout) contextView.findViewById(R.id.appoint_detail_address_layout);
        appoint_detail_address_iv= (ImageView) contextView.findViewById(R.id.appoint_detail_address_iv);
        appoint_detail_address_tv= (TextView) contextView.findViewById(R.id.appoint_detail_address_tv);
        appoint_detail_time_tv= (TextView) contextView.findViewById(R.id.appoint_detail_time_tv);

        appoint_detail_dog_img_layout= (SquareHeightRelativeLayout) contextView.findViewById(R.id.appoint_detail_dog_img_layout);
        appoint_detail_dog_img_iv= (ImageView) contextView.findViewById(R.id.appoint_detail_dog_img_iv);

        appoint_detail_other_info_layout= (RelativeLayout) contextView.findViewById(R.id.appoint_detail_other_info_layout);
        appoint_detail_other_detail_layout= (LinearLayout) contextView.findViewById(R.id.appoint_detail_other_detail_layout);

        appoint_detail_other_info_layout.setOnClickListener(this);
        appoint_detail_look_num_tv= (TextView) contextView.findViewById(R.id.appoint_detail_look_num_tv);
        appoint_detail_join_num_tv= (TextView) contextView.findViewById(R.id.appoint_detail_join_num_tv);

        //资料匹配
        appoint_detail_status_pb_layout= (LinearLayout) contextView.findViewById(R.id.appoint_detail_status_pb_layout);
        appoint_detail_phone_status_tv= (TextView) contextView.findViewById(R.id.appoint_detail_phone_status_tv);
        appoint_detail_video_status_tv= (TextView) contextView.findViewById(R.id.appoint_detail_video_status_tv);
        appoint_detail_info_pb= (ProgressBar) contextView.findViewById(R.id.appoint_detail_info_pb);
        appoint_detail_safe_pb= (ProgressBar) contextView.findViewById(R.id.appoint_detail_safe_pb);
        appoint_detail_qinmi_pb= (ProgressBar) contextView.findViewById(R.id.appoint_detail_qinmi_pb);
        appoint_detail_all_pbv= (ProgressBarView) contextView.findViewById(R.id.appoint_detail_all_pbv);

        //约会对象达成者
        appoint_detail_taruser_hint_tv= (TextView) contextView.findViewById(R.id.appoint_detail_taruser_hint_tv);
        appoint_detail_taruser_layout= (RelativeLayout) contextView.findViewById(R.id.appoint_detail_taruser_layout);
        appoint_detail_taruser_Img_iv= (ImageView) contextView.findViewById(R.id.appoint_detail_taruser_Img_iv);
        appoint_detail_target_name_tv= (TextView) contextView.findViewById(R.id.appoint_detail_target_name_tv);
        appoint_detail_target_sex_hor_tv= (TextView) contextView.findViewById(R.id.appoint_detail_target_sex_hor_tv);
        appoint_detail_target_time_tv= (TextView) contextView.findViewById(R.id.appoint_detail_target_time_tv);
        appoint_detail_target_contact_tv= (TextView) contextView.findViewById(R.id.appoint_detail_target_contact_tv);
        appoint_detail_taruser_Img_iv.setOnClickListener(this);
        appoint_detail_target_contact_tv.setOnClickListener(this);

        //底部操作
        appoint_detail_bottom_layout= (LinearLayout) contextView.findViewById(R.id.appoint_detail_bottom_layout);
        appoint_detail_bottom_left_tv= (TextView) contextView.findViewById(R.id.appoint_detail_bottom_left_tv);
        appoint_detail_bottom_right_tv= (TextView) contextView.findViewById(R.id.appoint_detail_bottom_right_tv);
        appoint_detail_bottom_line=contextView.findViewById(R.id.appoint_detail_bottom_line);
        appoint_detail_bottom_right_tv.setOnClickListener(this);
        appoint_detail_bottom_left_tv.setOnClickListener(this);

        this.getMainLayout().addView(contextView, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);

    }

    @Override
    protected void onResume() {
        super.onResume();
        MobclickAgent.onPageStart("约会详情"); // 统计页面(仅有Activity的应用中SDK自动调用，不需要单独写)
        MobclickAgent.onResume(this); // 统计时长
        if(isGoSignUp){
            isGoSignUp=false;
            getDatingDetail();
        }



    }

    @Override
    protected void onPause() {
        super.onPause();
        MobclickAgent.onPageEnd("约会详情"); // 统计页面(仅有Activity的应用中SDK自动调用，不需要单独写)
        MobclickAgent.onPause(this); // 统计时长
    }

    /**
     * 获取约会详情
     */
    private void getDatingDetail() {

        loadingDiaog = DialogUtil.LoadingDialog(AppointmentDetailActivity.this, null);
        if (!isFinishing()) {
            loadingDiaog.show();
        }

        LocInfo myLoc = Loc.getLoc();
        if (myLoc != null && myLoc.getLoc() != null) {
            lat = myLoc.getLoc().getLatitude();
            lng = myLoc.getLoc().getLongitude();
        }


        LatLng pt = new LatLng(lat, lng);
        pt = Loc.getBaiduGpsFromGcj(pt.latitude, pt.longitude);
        DatingDetailBean datingDetailBean = new DatingDetailBean();
        datingDetailBean.setDatingId(dating_id);
        datingDetailBean.setLat(pt.latitude);
        datingDetailBean.setLng(pt.longitude);

        DatingDetailService datingDetailService = new DatingDetailService(this);
        datingDetailService.parameter(datingDetailBean);
        datingDetailService.callBack(new OnCallBackSuccessListener() {
            @Override
            public void onSuccess(RespBean respBean) {
                super.onSuccess(respBean);
                loadingDiaog.dismiss();
                appoint_detail_root_layout.setVisibility(View.VISIBLE);
                DatingDetailRespBean datingDetailRespBean = (DatingDetailRespBean) respBean;
                appoindetaildto = datingDetailRespBean.getResp();
                initViewDate(appoindetaildto);
            }
        }, new OnCallBackFailListener(){
            @Override
            public void onFail(RespBean respBean) {
                super.onFail(respBean);
                loadingDiaog.dismiss();
                String msg = respBean.getMsg();
                if (TextUtils.isEmpty(msg)) {
                    DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this);
                    return;
                }
                DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this, msg);
            }
        });

        datingDetailService.enqueue();

    }


    /*
     * 设置数据
     */
    private void initViewDate(AppointDetailDto dto) {
        if(dto!=null){

            userid=dto.getOwner().getId();

            if(!CheckUtil.isEmpty(dto.getOwner().getHeadImg())){
                String imageurl= ImgUtils.DealImageUrl(dto.getOwner().getHeadImg(),150,150);
                Glide.with(this).load(imageurl).bitmapTransform(circletransformation).into(appoint_detail_userImg_iv);
            }

            if (dto.getOwner().getLevel() == 1) {
                appoint_detail_level_men_iv.setVisibility(View.VISIBLE);
            }else{
                appoint_detail_level_men_iv.setVisibility(View.GONE);
            }

            if(!CheckUtil.isEmpty(dto.getOwner().getName())){
                appoint_detail_name_tv.setText(dto.getOwner().getName());
            }


            if(dto.getOwner().getSex()==1){
                appoint_detail_sex_hor_tv.setBackgroundResource(R.drawable.appoint_item_male_bg);
                Drawable sexdrawable=this.getResources().getDrawable(R.drawable.new_sex_male_icon);
                sexdrawable.setBounds(0, 0, sexdrawable.getIntrinsicWidth(), sexdrawable.getIntrinsicHeight());
                appoint_detail_sex_hor_tv.setCompoundDrawables(sexdrawable,null,null,null);
            }else{
                appoint_detail_sex_hor_tv.setBackgroundResource(R.drawable.appoint_item_female_bg);
                Drawable sexdrawable=this.getResources().getDrawable(R.drawable.new_sex_female_icon);
                sexdrawable.setBounds(0, 0, sexdrawable.getIntrinsicWidth(), sexdrawable.getIntrinsicHeight());
                appoint_detail_sex_hor_tv.setCompoundDrawables(sexdrawable,null,null,null);
            }

            String hor_str=CheckUtil.ConstellationMatching(dto.getOwner().getHoroscope());
            appoint_detail_sex_hor_tv.setText(hor_str);


            switch (dto.getActivityType()){
                case Constant.APPOINT_TYPE_BAR:
                    appoint_detail_datingtype_iv.setBackgroundResource(R.drawable.chat_appoint_bar);
                    if(dto.getShop()!=null){
                        appoint_detail_other_info_layout.setVisibility(View.VISIBLE);
                        initShopView(dto.getShop());
                    }else{
                        appoint_detail_other_info_layout.setVisibility(View.GONE);
                    }

                    break;
                case Constant.APPOINT_TYPE_COFFEE:
                    appoint_detail_datingtype_iv.setBackgroundResource(R.drawable.chat_appoint_coffee);
                    if(dto.getShop()!=null){
                        appoint_detail_other_info_layout.setVisibility(View.VISIBLE);
                        initShopView(dto.getShop());
                    }else{
                        appoint_detail_other_info_layout.setVisibility(View.GONE);
                    }

                    break;
                case Constant.APPOINT_TYPE_MOVIE:
                    appoint_detail_datingtype_iv.setBackgroundResource(R.drawable.chat_appoint_movie);
                    if(dto.getMovie()!=null){
                        appoint_detail_other_info_layout.setVisibility(View.VISIBLE);
                        initMoviceView(dto.getMovie());
                    }else{
                        appoint_detail_other_info_layout.setVisibility(View.GONE);
                    }
                    break;
                case Constant.APPOINT_TYPE_DOG:
                    appoint_detail_datingtype_iv.setBackgroundResource(R.drawable.chat_appoint_dog);
                    appoint_detail_other_info_layout.setVisibility(View.GONE);
                    break;
                case Constant.APPOINT_TYPE_FITNESS:
                    appoint_detail_datingtype_iv.setBackgroundResource(R.drawable.chat_appoint_fitness);
                    appoint_detail_other_info_layout.setVisibility(View.GONE);
                    break;
                case Constant.APPOINT_TYPE_KTV:
                    appoint_detail_datingtype_iv.setBackgroundResource(R.drawable.chat_appoint_ktv);
                    if(dto.getShop()!=null){
                        appoint_detail_other_info_layout.setVisibility(View.VISIBLE);
                        initShopView(dto.getShop());
                    }else{
                        appoint_detail_other_info_layout.setVisibility(View.GONE);
                    }
                    break;
                case Constant.APPOINT_TYPE_EAT:
                    appoint_detail_datingtype_iv.setBackgroundResource(R.drawable.chat_appoint_eat);
                    if(dto.getShop()!=null){
                        appoint_detail_other_info_layout.setVisibility(View.VISIBLE);
                        initShopView(dto.getShop());
                    }else{
                        appoint_detail_other_info_layout.setVisibility(View.GONE);
                    }
                    break;
            }

            if(!CheckUtil.isEmpty(dto.getTitle())){
                appoint_detail_datingtype_tv.setText(dto.getTitle());
            }


            long endtime=ISO8601.getTime(dto.getEndTime());
            String endtimeStr=TimeUtil.getDatingDateString(endtime,System.currentTimeMillis());

            if(!endtimeStr.contains("今天")){
                endtimeStr=endtimeStr+"之前";
            }else{
                endtimeStr=endtimeStr;
            }

            if(dto.getAvailableTime()==1){
                endtimeStr=endtimeStr+",中午";
            }else if(dto.getAvailableTime()==2){
                endtimeStr=endtimeStr+",下午";
            }else if(dto.getAvailableTime()==3){
                endtimeStr=endtimeStr+",晚上";
            }

            appoint_detail_time_tv.setText(endtimeStr);

            String sexRequired="";
            if(dto.getSexRequired()==0){
                sexRequired="不限";
            }else if(dto.getSexRequired()==1){
                sexRequired="限男士";
            }else if(dto.getSexRequired()==2){
                sexRequired="限女士";
            }else{
                sexRequired="不限";
            }

            if(dto.getActivityType()!=Constant.APPOINT_TYPE_DOG && dto.getActivityType()!=Constant.APPOINT_TYPE_FITNESS ){

                appoint_detail_dog_img_layout.setVisibility(View.GONE);
                appoint_detail_dog_img_iv.setVisibility(View.GONE);

                appoint_detail_address_layout.setVisibility(View.GONE);

                if(dto.getCostType()==0){
                    appoint_detail_costType_tv.setText("我请客   "+sexRequired);
                }else  if(dto.getCostType()==1){
                    appoint_detail_costType_tv.setText("AA   "+sexRequired);
                }else if(dto.getCostType()==2){
                    appoint_detail_costType_tv.setText("你买单   "+sexRequired);
                }
                appoint_detail_costType_iv.setBackgroundResource(R.drawable.appoint_costtype_icon);

            }else{

                appoint_detail_address_layout.setVisibility(View.VISIBLE);

                appoint_detail_costType_iv.setBackgroundResource(R.drawable.appoint_item_address_icon);

                appoint_detail_address_iv.setBackgroundResource(R.drawable.appoint_costtype_icon);

                appoint_detail_address_tv.setText(sexRequired);

                if(dto.getWalkADog()!=null){

                    if(!CheckUtil.isEmpty(dto.getWalkADog().getImg())){
                        appoint_detail_dog_img_layout.setVisibility(View.VISIBLE);
                        appoint_detail_dog_img_iv.setVisibility(View.VISIBLE);
                        String imageurl= ImgUtils.DealImageUrl(dto.getWalkADog().getImg(),150,150);
                        Glide.with(this).load(imageurl).into(appoint_detail_dog_img_iv);

                    }else{
                        appoint_detail_dog_img_layout.setVisibility(View.GONE);
                        appoint_detail_dog_img_iv.setVisibility(View.GONE);
                    }

                    if(!CheckUtil.isEmpty(dto.getWalkADog().getAddress())){
                        appoint_detail_costType_tv.setText(dto.getWalkADog().getAddress());
                    }

                }else{
                    appoint_detail_dog_img_layout.setVisibility(View.GONE);
                    appoint_detail_dog_img_iv.setVisibility(View.GONE);
                }

                if(dto.getSports()!=null) {
                    if (!CheckUtil.isEmpty(dto.getSports().getAddress()) && !CheckUtil.isEmpty(dto.getSports().getTitle())) {
                        appoint_detail_costType_tv.setText(dto.getSports().getTitle()+"("+dto.getSports().getAddress()+")");
                    }
                }

            }



            appoint_detail_look_num_tv.setText("查看"+dto.getPageView()+"");
            appoint_detail_join_num_tv.setText("已有"+dto.getTotalCandidates()+"人报名");

            if(loginUserid==userid){
                appoint_detail_status_pb_layout.setVisibility(View.GONE);
                targetDto=dto.getTargetUser();
                if(targetDto!=null){
                    appoint_detail_taruser_hint_tv.setVisibility(View.VISIBLE);
                    appoint_detail_taruser_layout.setVisibility(View.VISIBLE);

                    if(!CheckUtil.isEmpty(targetDto.getUser().getHeadImg())){
                        String imageurl= ImgUtils.DealImageUrl(targetDto.getUser().getHeadImg(),150,150);
                        Glide.with(this).load(imageurl).bitmapTransform(circletransformation).into(appoint_detail_taruser_Img_iv);
                    }

                    if(!CheckUtil.isEmpty(targetDto.getUser().getName())){
                        appoint_detail_target_name_tv.setText(targetDto.getUser().getName());
                    }
                    long time = ISO8601.getTime(targetDto.getJoinTime());
                    String timeStr = TimeUtil.getDatingTargetTimeStr(time);
                    appoint_detail_target_time_tv.setText(timeStr);

                    if(targetDto.getUser().getSex()==1){
                        appoint_detail_target_sex_hor_tv.setBackgroundResource(R.drawable.appoint_item_male_bg);
                        Drawable sexdrawable=this.getResources().getDrawable(R.drawable.new_sex_male_icon);
                        sexdrawable.setBounds(0, 0, sexdrawable.getIntrinsicWidth(), sexdrawable.getIntrinsicHeight());
                        appoint_detail_target_sex_hor_tv.setCompoundDrawables(sexdrawable,null,null,null);
                    }else{
                        appoint_detail_target_sex_hor_tv.setBackgroundResource(R.drawable.appoint_item_female_bg);
                        Drawable sexdrawable=this.getResources().getDrawable(R.drawable.new_sex_female_icon);
                        sexdrawable.setBounds(0, 0, sexdrawable.getIntrinsicWidth(), sexdrawable.getIntrinsicHeight());
                        appoint_detail_target_sex_hor_tv.setCompoundDrawables(sexdrawable,null,null,null);
                    }

                    String target_hor_str=CheckUtil.ConstellationMatching(targetDto.getUser().getHoroscope());
                    appoint_detail_target_sex_hor_tv.setText(target_hor_str);


                }else{
                    appoint_detail_taruser_hint_tv.setVisibility(View.GONE);
                    appoint_detail_taruser_layout.setVisibility(View.GONE);
                }

            }else{
                appoint_detail_taruser_hint_tv.setVisibility(View.GONE);
                appoint_detail_taruser_layout.setVisibility(View.GONE);

                if(dto.getMatchScore()!=null){
                    appoint_detail_status_pb_layout.setVisibility(View.VISIBLE);

                    if (((dto.getOwner().getStatus() >> 1) & 1) == 0) {
                        appoint_detail_video_status_tv.setText("未认证");
                        appoint_detail_video_status_tv.setBackgroundResource(R.drawable.appoint_phone_no_lable_shape);
                        appoint_detail_video_status_tv.setTextColor(this.getResources().getColor(R.color.text_color_5c6a6b));
                    }else{
                        appoint_detail_video_status_tv.setText("已认证");
                        appoint_detail_video_status_tv.setBackgroundResource(R.drawable.appoint_phone_lable_shape);
                        appoint_detail_video_status_tv.setTextColor(this.getResources().getColor(R.color.text_color_white));
                    }

                    if (((dto.getOwner().getStatus() >> 2) & 1) == 0) {

                        appoint_detail_phone_status_tv.setText("未认证");
                        appoint_detail_phone_status_tv.setBackgroundResource(R.drawable.appoint_phone_no_lable_shape);
                        appoint_detail_phone_status_tv.setTextColor(this.getResources().getColor(R.color.text_color_5c6a6b));
                    }else{
                        appoint_detail_phone_status_tv.setText("已认证");
                        appoint_detail_phone_status_tv.setBackgroundResource(R.drawable.appoint_phone_lable_shape);
                        appoint_detail_phone_status_tv.setTextColor(this.getResources().getColor(R.color.text_color_white));
                    }

                    appoint_detail_info_pb.setProgress(dto.getMatchScore().getProfile());
                    appoint_detail_qinmi_pb.setProgress(dto.getMatchScore().getMagic());
                    appoint_detail_safe_pb.setProgress(dto.getMatchScore().getSafety());

                    appoint_detail_all_pbv.setProgress(dto.getMatchScore().getTotalMatch());
                    appoint_detail_all_pbv.setProgressBar_max(100);
                    appoint_detail_all_pbv.setPromptTextIsDisplayable(true);
                    appoint_detail_all_pbv.setPromptTextCrompttext("匹配度");
                    appoint_detail_all_pbv.setOutside_round_style(ProgressBarView.STROKE_FILL);

                }else{
                    appoint_detail_status_pb_layout.setVisibility(View.GONE);
                }

            }

            switch (dto.getStatus()){
                case 0:
                    appoint_detail_bottom_line.setVisibility(View.GONE);
                    appoint_detail_bottom_right_tv.setVisibility(View.GONE);
                    appoint_detail_bottom_left_tv.setText("约会已取消");
                    appoint_detail_bottom_left_tv.setTextColor(this.getResources().getColor(R.color.text_color_9a9a9a));
                    appoint_detail_bottom_layout.setBackgroundResource(R.color.text_color_b2b2b2);
                    break;

                case 1:
                    if(loginUserid==userid){
                        appoint_detail_bottom_line.setVisibility(View.GONE);
                        appoint_detail_bottom_right_tv.setVisibility(View.GONE);
                        appoint_detail_bottom_left_tv.setText("报名管理");
                        appoint_detail_bottom_left_tv.setTextColor(this.getResources().getColor(R.color.text_color_white));
                        appoint_detail_bottom_layout.setBackgroundResource(R.color.text_color_494850);
                    }else{
                        appoint_detail_bottom_line.setVisibility(View.VISIBLE);
                        appoint_detail_bottom_right_tv.setVisibility(View.VISIBLE);
                        appoint_detail_bottom_left_tv.setVisibility(View.VISIBLE);
                        appoint_detail_bottom_right_tv.setTextColor(this.getResources().getColor(R.color.text_color_white));
                        appoint_detail_bottom_left_tv.setTextColor(this.getResources().getColor(R.color.text_color_white));
                        appoint_detail_bottom_layout.setBackgroundResource(R.color.text_color_494850);
                        if(dto.isVisitorIsCandidate()){
                            appoint_detail_bottom_right_tv.setText("取消报名");
                            appoint_detail_bottom_left_tv.setText("先聊聊");
                        }else{
                            appoint_detail_bottom_line.setVisibility(View.VISIBLE);
                            appoint_detail_bottom_right_tv.setVisibility(View.VISIBLE);
                            appoint_detail_bottom_left_tv.setVisibility(View.VISIBLE);
                            appoint_detail_bottom_right_tv.setText("报名");
                            appoint_detail_bottom_left_tv.setText("先聊聊");

                        }
                    }
                    break;

                case 2:
                    if(loginUserid==userid){
                        appoint_detail_bottom_line.setVisibility(View.VISIBLE);
                        appoint_detail_bottom_right_tv.setVisibility(View.VISIBLE);
                        appoint_detail_bottom_left_tv.setVisibility(View.VISIBLE);
                        appoint_detail_bottom_right_tv.setTextColor(this.getResources().getColor(R.color.text_color_white));
                        appoint_detail_bottom_left_tv.setTextColor(this.getResources().getColor(R.color.text_color_white));
                        appoint_detail_bottom_layout.setBackgroundResource(R.color.text_color_494850);

                        appoint_detail_bottom_right_tv.setText("约会评价");
                        appoint_detail_bottom_left_tv.setText("报名管理");

                    }else{

                        if(dto.isVisitorIsTargetUser()){
                            appoint_detail_bottom_right_tv.setText("约会评价");
                            appoint_detail_bottom_left_tv.setText("联系ta");

                            appoint_detail_bottom_line.setVisibility(View.VISIBLE);
                            appoint_detail_bottom_right_tv.setVisibility(View.VISIBLE);
                            appoint_detail_bottom_left_tv.setVisibility(View.VISIBLE);
                            appoint_detail_bottom_right_tv.setTextColor(this.getResources().getColor(R.color.text_color_white));
                            appoint_detail_bottom_left_tv.setTextColor(this.getResources().getColor(R.color.text_color_white));
                            appoint_detail_bottom_layout.setBackgroundResource(R.color.text_color_494850);

                        }else{
                            appoint_detail_bottom_line.setVisibility(View.GONE);
                            appoint_detail_bottom_right_tv.setVisibility(View.GONE);
                            appoint_detail_bottom_left_tv.setText("约会已达成");
                            appoint_detail_bottom_left_tv.setTextColor(this.getResources().getColor(R.color.text_color_9a9a9a));
                            appoint_detail_bottom_layout.setBackgroundResource(R.color.text_color_b2b2b2);

                        }
                    }
                    break;

                case 3:
                    appoint_detail_bottom_line.setVisibility(View.GONE);
                    appoint_detail_bottom_right_tv.setVisibility(View.GONE);
                    appoint_detail_bottom_left_tv.setText("约会已过期");
                    appoint_detail_bottom_left_tv.setTextColor(this.getResources().getColor(R.color.text_color_9a9a9a));
                    appoint_detail_bottom_layout.setBackgroundResource(R.color.text_color_b2b2b2);
                    break;

                case 4:
                    helpdialog = DialogUtil.createHintOperateDialog(AppointmentDetailActivity.this, "","该约会可能存在违规内容,系统正在审核", "", "确定", quitBackCallListener);
                    if (!isFinishing()) {
                        helpdialog.show();
                    }
                    break;

                case 5:
                    helpdialog = DialogUtil.createHintOperateDialog(AppointmentDetailActivity.this, "","该约会涉嫌违规内容,已被系统处理", "", "确定", quitBackCallListener);
                    if (!isFinishing()) {
                        helpdialog.show();
                    }
                    break;
            }
        }
    }


    private void initShopView(ShopDto shopdto){


        if (appoint_detail_other_detail_layout.getChildCount() > 0) {
            appoint_detail_other_detail_layout.removeAllViews();
        }

        View layoutView=mInflater.inflate(R.layout.appoint_detail_shop_layout, null);

        ImageView appoint_detail_shop_img_iv= (ImageView) layoutView.findViewById(R.id.appoint_detail_shop_img_iv);
        TextView appoint_detail_shop_name_tv= (TextView) layoutView.findViewById(R.id.appoint_detail_shop_name_tv);
        TextView appoint_detail_shop_people_cost_tv= (TextView) layoutView.findViewById(R.id.appoint_detail_shop_people_cost_tv);
        TextView appoint_detail_shop_address_tv= (TextView) layoutView.findViewById(R.id.appoint_detail_shop_address_tv);
        TextView appoint_detail_shop_distance_tv= (TextView) layoutView.findViewById(R.id.appoint_detail_shop_distance_tv);

        ImageView appoint_detail_shop_one_star= (ImageView) layoutView.findViewById(R.id.appoint_detail_shop_one_star);
        ImageView appoint_detail_shop_two_star= (ImageView) layoutView.findViewById(R.id.appoint_detail_shop_two_star);
        ImageView appoint_detail_shop_three_star= (ImageView) layoutView.findViewById(R.id.appoint_detail_shop_three_star);
        ImageView appoint_detail_shop_four_star= (ImageView) layoutView.findViewById(R.id.appoint_detail_shop_four_star);
        ImageView appoint_detail_shop_five_star= (ImageView) layoutView.findViewById(R.id.appoint_detail_shop_five_star);


        if(!CheckUtil.isEmpty(shopdto.getImg())){
//            String imageurl= ImgUtils.DealImageUrl(shopdto.getImg(),150,150);
            Glide.with(this).load(shopdto.getImg()).into(appoint_detail_shop_img_iv);
        }

        if(!CheckUtil.isEmpty(shopdto.getName())){
            appoint_detail_shop_name_tv.setText(shopdto.getName());
        }

        if(!CheckUtil.isEmpty(shopdto.getAddress())){
            appoint_detail_shop_address_tv.setText(shopdto.getAddress());
        }

        appoint_detail_shop_people_cost_tv.setText("¥"+shopdto.getCost()+"/人");

        if(shopdto.getDistance()==0){
            appoint_detail_shop_distance_tv.setVisibility(View.GONE);
        }else{
            appoint_detail_shop_distance_tv.setVisibility(View.VISIBLE);
            LogUtils.e("getDistance="+shopdto.getDistance());
            appoint_detail_shop_distance_tv.setText(CheckUtil.getSpacingTool(shopdto.getDistance()));
        }



        if(shopdto.getRating()==0){
            appoint_detail_shop_one_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_two_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_three_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_four_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_five_star.setBackgroundResource(R.drawable.score_none_star);

        }else if(shopdto.getRating()>0 && shopdto.getRating()<10){

            appoint_detail_shop_one_star.setBackgroundResource(R.drawable.score_half_star);
            appoint_detail_shop_two_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_three_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_four_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_five_star.setBackgroundResource(R.drawable.score_none_star);

        }else if(shopdto.getRating()==10){
            appoint_detail_shop_one_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_two_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_three_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_four_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_five_star.setBackgroundResource(R.drawable.score_none_star);

        }else if(shopdto.getRating()>10 && shopdto.getRating()<20){
            appoint_detail_shop_one_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_two_star.setBackgroundResource(R.drawable.score_half_star);
            appoint_detail_shop_three_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_four_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_five_star.setBackgroundResource(R.drawable.score_none_star);

        }else if(shopdto.getRating()==20){

            appoint_detail_shop_one_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_two_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_three_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_four_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_five_star.setBackgroundResource(R.drawable.score_none_star);

        }else if(shopdto.getRating()>20 && shopdto.getRating()<30){

            appoint_detail_shop_one_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_two_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_three_star.setBackgroundResource(R.drawable.score_half_star);
            appoint_detail_shop_four_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_five_star.setBackgroundResource(R.drawable.score_none_star);

        }else if(shopdto.getRating()==30){
            appoint_detail_shop_one_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_two_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_three_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_four_star.setBackgroundResource(R.drawable.score_none_star);
            appoint_detail_shop_five_star.setBackgroundResource(R.drawable.score_none_star);

        }else if(shopdto.getRating()>30 && shopdto.getRating()<40){

            appoint_detail_shop_one_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_two_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_three_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_four_star.setBackgroundResource(R.drawable.score_half_star);
            appoint_detail_shop_five_star.setBackgroundResource(R.drawable.score_none_star);

        }else if(shopdto.getRating()==40){
            appoint_detail_shop_one_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_two_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_three_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_four_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_five_star.setBackgroundResource(R.drawable.score_none_star);

        }else if(shopdto.getRating()>40 && shopdto.getRating()<50){

            appoint_detail_shop_one_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_two_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_three_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_four_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_five_star.setBackgroundResource(R.drawable.score_half_star);

        }else if(shopdto.getRating()==50){

            appoint_detail_shop_one_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_two_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_three_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_four_star.setBackgroundResource(R.drawable.score_star);
            appoint_detail_shop_five_star.setBackgroundResource(R.drawable.score_star);

        }

        appoint_detail_other_detail_layout.addView(layoutView);
    }


    private void initMoviceView(MoviceDto moviceDto){

        if (appoint_detail_other_detail_layout.getChildCount() > 0) {
            appoint_detail_other_detail_layout.removeAllViews();
        }

        View movice_layoutView=mInflater.inflate(R.layout.appoint_detail_movice_layout, null);

        ImageView appoint_detail_movice_img_iv= (ImageView) movice_layoutView.findViewById(R.id.appoint_detail_movice_img_iv);
        TextView appoint_detail_movice_name_tv= (TextView) movice_layoutView.findViewById(R.id.appoint_detail_movice_name_tv);
        TextView appoint_detail_movice_cianme_tv= (TextView) movice_layoutView.findViewById(R.id.appoint_detail_movice_cianme_tv);

        TextView appoint_detail_movice_address_tv= (TextView) movice_layoutView.findViewById(R.id.appoint_detail_movice_address_tv);
        TextView appoint_detail_movice_distance_tv= (TextView) movice_layoutView.findViewById(R.id.appoint_detail_movice_distance_tv);

        if(!CheckUtil.isEmpty(moviceDto.getImg())){
//            String imageurl= ImgUtils.DealImageUrl(moviceDto.getImg(),150,150);
            Glide.with(this).load(moviceDto.getImg()).into(appoint_detail_movice_img_iv);
        }

        if(!CheckUtil.isEmpty(moviceDto.getName())){
            appoint_detail_movice_name_tv.setText(moviceDto.getName());
        }

        if(!CheckUtil.isEmpty(moviceDto.getCinema())){
            appoint_detail_movice_cianme_tv.setText(moviceDto.getCinema());
        }

        if(!CheckUtil.isEmpty(moviceDto.getAddress())){
            appoint_detail_movice_address_tv.setText(moviceDto.getAddress());
        }

        if(moviceDto.getDistance()==0){
            appoint_detail_movice_distance_tv.setVisibility(View.GONE);
        }else{
            appoint_detail_movice_distance_tv.setVisibility(View.VISIBLE);
            appoint_detail_movice_distance_tv.setText(CheckUtil.getSpacingTool(moviceDto.getDistance()));
        }

        appoint_detail_other_detail_layout.addView(movice_layoutView);
    }



    @Override
    public void onClick(View v) {
        int id = v.getId();
        switch(id) {
            case R.id.appoint_detail_userImg_iv:

                Bundle bundle = new Bundle();
                bundle.putInt(YpSettings.USERID, userid);
                ActivityUtil.jump(AppointmentDetailActivity.this, UserInfoActivity.class, bundle, 0, 100);

                break;

            case R.id.appoint_detail_other_info_layout:

                if(appoindetaildto!=null && appoindetaildto.getShop()!=null){
                    if(appoindetaildto.getActivityType()!=Constant.APPOINT_TYPE_DOG && appoindetaildto.getActivityType()!=Constant.APPOINT_TYPE_FITNESS && appoindetaildto.getActivityType()!=Constant.APPOINT_TYPE_MOVIE){
                        //跳转到web 查看帮助
                        Bundle bd = new Bundle();
                        bd.putString(YpSettings.BUNDLE_KEY_WEB_URL, appoindetaildto.getShop().getUrl());
                        bd.putString(YpSettings.BUNDLE_KEY_WEB_TITLE, "约会详情");
                        bd.putBoolean(YpSettings.BUNDLE_KEY_WEB_HIDE_TITLE, false);
                        bd.putBoolean(YpSettings.BUNDLE_KEY_WEB_NEED_HOST, false);
                        bd.putInt(YpSettings.SOURCE_YTPE_KEY, 300);
                        ActivityUtil.jump(AppointmentDetailActivity.this, SimpleWebViewActivity.class, bd, 0, 100);
                    }
                }

                break;

            case R.id.appoint_detail_taruser_Img_iv:

                if(targetDto.getUser()!=null){
                    Bundle bundles = new Bundle();
                    bundles.putInt(YpSettings.USERID, targetDto.getUser().getId());
                    ActivityUtil.jump(AppointmentDetailActivity.this, UserInfoActivity.class, bundles, 0, 100);
                }
                break;

            case R.id.appoint_detail_target_contact_tv:
                //弹出联系ta的提示框
                contartUser(appoindetaildto.getTargetUser().getMobile(),appoindetaildto.getTargetUser().getUser().getId());
                break;

            case R.id.appoint_detail_bottom_left_tv:

                if(appoindetaildto!=null){

                    if(appoindetaildto.getStatus()==1){
                        if(loginUserid==userid){
                            //跳转到报名管理
                            isGoSignUp=true;
                            Bundle bundles = new Bundle();
                            bundles.putString(YpSettings.APPOINT_ID_KEY,dating_id);
                            ActivityUtil.jump(AppointmentDetailActivity.this, SignUpManagementActivity.class, bundles, 0, 100);


                        }else{
                            //跳转到聊天界面
                            if (!isPostchating) {
                                //
                                isPostchating = true;
                                loadingDiaog = DialogUtil.LoadingDialog(AppointmentDetailActivity.this, null);
                                if (!isFinishing()) {
                                    loadingDiaog.show();
                                }
                                chatuserid=userid;
                                postChatRequest(false);
                            }

                        }
                    }else if(appoindetaildto.getStatus()==2){

                        if(loginUserid==userid){
                            //跳转到报名管理

                            Bundle bundles = new Bundle();
                            bundles.putString(YpSettings.APPOINT_ID_KEY, dating_id);
                            ActivityUtil.jump(AppointmentDetailActivity.this, SignUpManagementActivity.class, bundles, 0, 100);


                        }else{
                            if(appoindetaildto.isVisitorIsTargetUser()){
                                //弹出联系ta的提示框
                                contartUser(appoindetaildto.getOwnerMobile(),appoindetaildto.getOwner().getId());
                            }
                        }
                    }
                }
                break;

            case R.id.appoint_detail_bottom_right_tv:

                if(appoindetaildto!=null){
                    if(appoindetaildto.getStatus()==1){
                        if(loginUserid!=userid){
                            if(appoindetaildto.isVisitorIsCandidate()){
                                //取消报名
                                helpdialog = DialogUtil.createHintOperateDialog(AppointmentDetailActivity.this, "取消报名", "取消报名将失去一次约会机会,确认取消?","取消", "确认", cancelJoinBackCallListener);
                                if (!isFinishing()) {
                                    helpdialog.show();
                                }

                            }else{
                                //报名
                                if(loginuser_sex!=appoindetaildto.getSexRequired() && appoindetaildto.getSexRequired()==1){
                                    DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this,"只有男性用户才能报名");
                                    return;
                                }
                                if(loginuser_sex!=appoindetaildto.getSexRequired() && appoindetaildto.getSexRequired()==2){
                                    DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this,"只有女性用户才能报名");
                                    return;
                                }
                                if (!isvalidJoin) {
                                    //
                                    isvalidJoin = true;
                                    loadingDiaog = DialogUtil.LoadingDialog(AppointmentDetailActivity.this, null);
                                    if (!isFinishing()) {
                                        loadingDiaog.show();
                                    }
                                    validJoin();
                                }
                            }

                        }
                    }else if(appoindetaildto.getStatus()==2){

                        if(loginUserid==userid){
                            //跳转到约会评价

                            Bundle bundles = new Bundle();
                            bundles.putSerializable(YpSettings.APPOINT_DETAIL_DIO_KEY, appoindetaildto);
                            ActivityUtil.jump(AppointmentDetailActivity.this, AppointEvaluationActivity.class, bundles, 0, 100);

                        }else{
                            if(appoindetaildto.isVisitorIsTargetUser()){
                                //去约会评价
                                Bundle bundles = new Bundle();
                                bundles.putSerializable(YpSettings.APPOINT_DETAIL_DIO_KEY, appoindetaildto);
                                ActivityUtil.jump(AppointmentDetailActivity.this, AppointEvaluationActivity.class, bundles, 0, 100);

                            }
                        }
                    }
                }
                break;
        }
    }


    private boolean isvalidJoin=false;

    private void validJoin(){

        AppointMentsValidJoinBean validjoinBean = new AppointMentsValidJoinBean();
        validjoinBean.setId(dating_id);
        validjoinBean.setJoin(true);

        AppointMentsValidJoinService validjoinService = new AppointMentsValidJoinService(this);
        validjoinService.parameter(validjoinBean);
        validjoinService.callBack(new OnCallBackSuccessListener() {
            @Override
            public void onSuccess(RespBean respBean) {
                super.onSuccess(respBean);

                loadingDiaog.dismiss();
                isvalidJoin = false;

                helpdialog = DialogUtil.createHintOperateDialog(AppointmentDetailActivity.this, "报名", "对方确认后,你的手机号码将显示给对方","取消", "确认", validJoinBackCallListener);
                if (!isFinishing()) {
                    helpdialog.show();
                }
            }
        }, new OnCallBackFailListener() {
            @Override
            public void onFail(RespBean respBean) {
                super.onFail(respBean);
                loadingDiaog.dismiss();
                isvalidJoin = false;
                String errcode=respBean.getErrCode();
                String msg = respBean.getMsg();

                if(!CheckUtil.isEmpty(errcode) && !CheckUtil.isEmpty(msg)){
                    joinbackDeal(errcode,msg);
                    return;
                }

                if (TextUtils.isEmpty(msg)) {
                    DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this);
                    return;
                }
                DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this, msg);

            }
        });

        validjoinService.enqueue();

    }

    //取消报名
    private boolean isjoinpost=false;

    private void cancelJoin(final boolean isjoin){

        AppointMentsJoinBean joinBean = new AppointMentsJoinBean();
        joinBean.setId(dating_id);
        joinBean.setJoin(isjoin);

        AppointMentsJoinService joinService = new AppointMentsJoinService(this);
        joinService.parameter(joinBean);
        joinService.callBack(new OnCallBackSuccessListener() {
            @Override
            public void onSuccess(RespBean respBean) {
                super.onSuccess(respBean);


                isjoinpost = false;
                //刷新界面
                if(isjoin){
                    loadingDiaog.dismiss();
                    appoindetaildto.setVisitorIsCandidate(true);
                    DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this,"报名成功");
                    appoint_detail_bottom_right_tv.setText("取消报名");
                }else{
                    getUserInfo();
                }

            }
        }, new OnCallBackFailListener() {
            @Override
            public void onFail(RespBean respBean) {
                super.onFail(respBean);
                loadingDiaog.dismiss();
                isjoinpost = false;
                String errcode=respBean.getErrCode();
                String msg = respBean.getMsg();

                if(!CheckUtil.isEmpty(errcode) && !CheckUtil.isEmpty(msg)){
                    joinbackDeal(errcode,msg);
                    return;
                }

                if (TextUtils.isEmpty(msg)) {
                    DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this);
                    return;
                }
                DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this, msg);

            }
        });

        joinService.enqueue();

    }

    /***
     * 获取用户信息及相册信息
     *
     */
    private void getUserInfo() {

        UserInfoBean userInfoBean = new UserInfoBean();
        userInfoBean.setUserId(loginUserid);
        userInfoBean.setAlbum(true);
        userInfoBean.setBubble(true);
        userInfoBean.setBump(true);
        userInfoBean.setForDating(false);
        userInfoBean.setWish(true);
        userInfoBean.setVerification(true);
        userInfoBean.setAppointment(true);

        UserInfoService userInfoService = new UserInfoService(this);
        userInfoService.parameter(userInfoBean);
        userInfoService.callBack(new OnCallBackSuccessListener() {
            @Override
            public void onSuccess(RespBean respBean) {
                super.onSuccess(respBean);

                UserInfoRespBean userInfoRespBean = (UserInfoRespBean) respBean;
                UserDto userInfo = userInfoRespBean.getResp();
                String jsonstr = JsonUtils.toJson(userInfo);
                if (null != userInfo) {
                    // 保存数据
                    DbHelperUtils.saveUserInfo(userid, jsonstr);
                    // 保存数据
                    DbHelperUtils.saveBaseUser(userid, userInfo);
                }
                loadingDiaog.dismiss();

                appoindetaildto.setVisitorIsCandidate(false);
                DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this,"取消报名成功");
                appoint_detail_bottom_right_tv.setText("报名");

            }
        }, new OnCallBackFailListener(){
            @Override
            public void onFail(RespBean respBean) {
                super.onFail(respBean);
                loadingDiaog.dismiss();
                appoindetaildto.setVisitorIsCandidate(false);
                DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this,"取消报名成功");
                appoint_detail_bottom_right_tv.setText("报名");
            }
        });
        userInfoService.enqueue();
    }

    private BackCallListener cancelJoinBackCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }

            if (!isjoinpost) {
                //
                isjoinpost = true;
                loadingDiaog = DialogUtil.LoadingDialog(AppointmentDetailActivity.this, null);
                if (!isFinishing()) {
                    loadingDiaog.show();
                }
                cancelJoin(false);
            }

        }
        @Override
        public void onCancel(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }

        }
    };


    private BackCallListener validJoinBackCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }

            if (!isjoinpost) {
                //
                isjoinpost = true;
                loadingDiaog = DialogUtil.LoadingDialog(AppointmentDetailActivity.this, null);
                if (!isFinishing()) {
                    loadingDiaog.show();
                }
                cancelJoin(true);
            }

        }
        @Override
        public void onCancel(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }

        }
    };


    private void joinbackDeal(String errcode,String msg){
        if(errcode.equals("AppointmentJoinFailure_HeadImgIsInAuditing")||errcode.equals("AppointmentJoinFailure_MobileRequired")){
            DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this,msg);
        }else if(errcode.equals("AppointmentJoinFailure_PPMatcheNotValid")){

            helpdialog = DialogUtil.createHintOperateDialog(AppointmentDetailActivity.this, "报名失败", msg,"", "确认", matchBackCallListener);
            if (!isFinishing()) {
                helpdialog.show();
            }

        }else if(errcode.equals(" AppointmentJoinFailure_VideoRequired")){

            helpdialog = DialogUtil.createHintOperateDialog(AppointmentDetailActivity.this, "报名失败", msg, "取消", "立即上传", verficationBackCallListener);
            if (!isFinishing()) {
                helpdialog.show();
            }

        }else if(errcode.equals("AppointmentJoinFailure_InTheirBlackList")){

            helpdialog = DialogUtil.createHintOperateDialog(AppointmentDetailActivity.this, "报名失败", msg, "", "确定", hintSureBackCallListener);
            if (!isFinishing()) {
                helpdialog.show();
            }
        }else if(errcode.equals("AppointmentJoinFailure_InYourBlackList")){

            helpdialog = DialogUtil.createHintOperateDialog(AppointmentDetailActivity.this, "报名失败",msg, "", "确定", hintSureBackCallListener);
            if (!isFinishing()) {
                helpdialog.show();
            }

        }else{
            if(!CheckUtil.isEmpty(msg)){
                DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this,msg);
            }else{
                DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this,"报名失败");
            }

        }
    }


    /**
     * 聊天
     */
    private void postChatRequest(boolean isconfirm) {

        ChatAttamptBean attamptBean = new ChatAttamptBean();
        attamptBean.setTargetUserId(chatuserid);
        attamptBean.setConfirm(isconfirm);


        ChatAttamptService attamptService = new ChatAttamptService(this);
        attamptService.parameter(attamptBean);
        attamptService.callBack(new OnCallBackSuccessListener() {
            @Override
            public void onSuccess(RespBean respBean) {
                super.onSuccess(respBean);
                loadingDiaog.dismiss();
                isPostchating = false;

                ChatAttamptRespBean attamptRespBean = (ChatAttamptRespBean) respBean;
                AttamptRespDto dto = attamptRespBean.getResp();
                chatPostResultHint(dto);

            }
        }, new OnCallBackFailListener() {
            @Override
            public void onFail(RespBean respBean) {
                super.onFail(respBean);

                loadingDiaog.dismiss();

                isPostchating = false;

                String msg = respBean.getMsg();
                if (TextUtils.isEmpty(msg)) {
                    // 没有网络的场合，去提示页
                    DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this);
                } else {
                    DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this, msg);
                }
            }
        });
        attamptService.enqueue();
    }


    /**
     * 聊天结果判断显示提示dialog
     *
     * @param dto
     */
    private void chatPostResultHint(AttamptRespDto dto) {

        if (dto != null) {
            if (dto.getViewStatus() == 0) {
                if (!CheckUtil.isEmpty(dto.getMessage())) {
                    DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this, dto.getMessage());
                } else {
                    DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this, "无法发起聊天");
                }
            } else if (dto.getViewStatus() == 1) {
                Bundle bundle = new Bundle();
                bundle.putInt(YpSettings.USERID, chatuserid);
                ActivityUtil.jump(AppointmentDetailActivity.this, ChatActivity.class, bundle, 0, 100);

            } else if (dto.getViewStatus() == 2) {
                //头像不通过 帮助 取消
                helpdialog = DialogUtil.createHintOperateDialog(AppointmentDetailActivity.this, "", dto.getMessage(), "查看帮助", "立即上传", helpAndUploadBackCallListener);
                if (!isFinishing()) {
                    helpdialog.show();
                }
            } else if (dto.getViewStatus() == 3) {
                // 对方拒绝接收非视频认证用户消息
                helpdialog = DialogUtil.createHintOperateDialog(AppointmentDetailActivity.this, "", dto.getMessage(), "取消", "立即认证", verficationBackCallListener);
                if (!isFinishing()) {
                    helpdialog.show();
                }

            } else if (dto.getViewStatus() == 4) {

                helpdialog = DialogUtil.createHintOperateDialog(AppointmentDetailActivity.this, "", dto.getMessage(), "使用P果", "立即认证", chatPandVerficationBackCallListener);
                if (!isFinishing()) {
                    helpdialog.show();
                }

            } else if (dto.getViewStatus() == 5) {
                //消耗p果 取消
                helpdialog = DialogUtil.createHintOperateDialog(AppointmentDetailActivity.this, "", dto.getMessage(), "取消", "消耗P果", chatuserPbackCallListener);
                if (!isFinishing()) {
                    helpdialog.show();
                }
            }
        }
    }


    //帮助以及上传头像 dialog回调
    private BackCallListener quitBackCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }
            finish();
        }

        @Override
        public void onCancel(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }
            finish();

        }
    };



    private BackCallListener hintSureBackCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }
        }

        @Override
        public void onCancel(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }
        }
    };


    private BackCallListener matchBackCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }

        }
        @Override
        public void onCancel(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }
            //跳转到web 查看帮助

            Bundle bundle = new Bundle();
            bundle.putString(YpSettings.BUNDLE_KEY_WEB_URL, "MatchHelp");
            bundle.putString(YpSettings.BUNDLE_KEY_WEB_TITLE, "匹配度");
            bundle.putBoolean(YpSettings.BUNDLE_KEY_WEB_HIDE_TITLE, false);

            ActivityUtil.jump(AppointmentDetailActivity.this, SimpleWebViewActivity.class, bundle, 0, 100);

        }
    };


    //帮助以及上传头像 dialog回调
    private BackCallListener helpAndUploadBackCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }
            Bundle bundles = new Bundle();
            bundles.putInt(YpSettings.USERID, YPApplication.getInstance().loginUser.getUserId());
            ActivityUtil.jump(AppointmentDetailActivity.this, UserInfoEditActivity.class, bundles, 0, 100);
        }

        @Override
        public void onCancel(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }
            //跳转到web 查看帮助

            Bundle bundle = new Bundle();
            bundle.putString(YpSettings.BUNDLE_KEY_WEB_URL, "Standard/AvatarAudit");
            bundle.putString(YpSettings.BUNDLE_KEY_WEB_TITLE, "头像审核规范");
            bundle.putBoolean(YpSettings.BUNDLE_KEY_WEB_HIDE_TITLE, false);

            ActivityUtil.jump(AppointmentDetailActivity.this, SimpleWebViewActivity.class, bundle, 0, 100);

        }
    };

    //视频认证 dialog回调
    private BackCallListener verficationBackCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }
            LogUtils.e("视频认证 dialog回调laile000000000000000000000000000000000");
            Bundle bundle = new Bundle();
            bundle.putInt(YpSettings.USERID, YPApplication.loginUser.getUserId());
            ActivityUtil.jump(AppointmentDetailActivity.this, VideoDetailGetActivity.class, bundle, 0, 100);
        }

        @Override
        public void onCancel(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }
        }
    };

    //聊天使用p果 dialog回调
    private BackCallListener chatuserPbackCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }
            loadingDiaog = DialogUtil.LoadingDialog(AppointmentDetailActivity.this, null);
            if (!isFinishing()) {
                loadingDiaog.show();
            }
            postChatRequest(true);
        }

        @Override
        public void onCancel(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }

        }
    };


    //聊天使用p果和视频认证 dialog回调
    private BackCallListener chatPandVerficationBackCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }
            LogUtils.e("聊天使用p果和视频认证 dialog回调laile000000000000000000000000000000000");
            Bundle bundle = new Bundle();
            bundle.putInt(YpSettings.USERID, YPApplication.loginUser.getUserId());
            ActivityUtil.jump(AppointmentDetailActivity.this, VideoDetailGetActivity.class, bundle, 0, 100);
        }

        @Override
        public void onCancel(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }
            loadingDiaog = DialogUtil.LoadingDialog(AppointmentDetailActivity.this, null);
            if (!isFinishing()) {
                loadingDiaog.show();
            }
            postChatRequest(true);

        }
    };

    private Dialog targetClickDialog;

    private void contartUser(final String mobile, final int tageruserid){

        if(appoindetaildto !=null && CheckUtil.isEmpty(mobile)){
            return;
        }

        targetClickDialog = DialogUtil.createOperateDialog(AppointmentDetailActivity.this, "操作", "先聊聊", mobile, "取消", false, false, false, new BackCall() {

            @Override
            public void deal(int which, Object... obj) {
                super.deal(which, obj);

                switch (which) {
                    case R.id.select_operate_dialog_one_layout:

                        targetClickDialog.dismiss();

                        if (!isPostchating) {
                            //
                            isPostchating = true;
                            loadingDiaog = DialogUtil.LoadingDialog(AppointmentDetailActivity.this, null);
                            if (!isFinishing()) {
                                loadingDiaog.show();
                            }
                            chatuserid=tageruserid;
                            postChatRequest(false);
                        }

                        break;
                    case R.id.select_operate_dialog_two_layout:

                        Intent intent = new Intent(Intent.ACTION_DIAL, Uri.parse("tel:" +mobile));
                        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                        startActivity(intent);

                        targetClickDialog.dismiss();
                        break;

                    case R.id.select_operate_dialog_three_layout:
                        targetClickDialog.dismiss();
                        break;
                }


            }
        });
        targetClickDialog.show();
    }



    private Dialog optionsDialog,reportDialog;

    public void showMyOptionsDialog() {
        // 初始化一个自定义的Dialog
        optionsDialog = new MyDialog(AppointmentDetailActivity.this, R.style.MyDialog, R.layout.select_operate_dialog_layout, new MyDialog.DialogEventListener() {

            @Override
            public void onInit(View contentView) {


                TextView select_operate_dialog_title_tv = (TextView) contentView.findViewById(R.id.select_operate_dialog_title_tv);
                LinearLayout select_operate_dialog_one_layout = (LinearLayout) contentView.findViewById(R.id.select_operate_dialog_one_layout);
                LinearLayout select_operate_dialog_two_layout = (LinearLayout) contentView.findViewById(R.id.select_operate_dialog_two_layout);
                LinearLayout select_operate_dialog_three_layout = (LinearLayout) contentView.findViewById(R.id.select_operate_dialog_three_layout);

                TextView select_operate_dialog_one_tv = (TextView) contentView.findViewById(R.id.select_operate_dialog_one_tv);

                TextView select_operate_dialog_two_tv = (TextView) contentView.findViewById(R.id.select_operate_dialog_two_tv);

                TextView select_operate_dialog_three_tv = (TextView) contentView.findViewById(R.id.select_operate_dialog_three_tv);

                select_operate_dialog_title_tv.setText("更多操作");
                select_operate_dialog_one_tv.setText("取消此条约会");
                select_operate_dialog_two_tv.setText("举报");


                select_operate_dialog_one_layout.setVisibility(View.VISIBLE);
                select_operate_dialog_two_layout.setVisibility(View.VISIBLE);
                select_operate_dialog_three_layout.setVisibility(View.GONE);

                select_operate_dialog_one_layout.setOnClickListener(new OnClickListener() {

                    @Override
                    public void onClick(View v) {ViewsUtils.preventViewMultipleClick(v, 3000);

                        optionsDialog.dismiss();

                        helpdialog = DialogUtil.createHintOperateDialog(AppointmentDetailActivity.this, "提示", "是否取消此条约会?", "取消", "确认", doMyoptionsBackCallListener);
                        if (!isFinishing()) {
                            helpdialog.show();
                        }

                    }

                });

                select_operate_dialog_two_layout.setOnClickListener(new OnClickListener() {

                    @Override
                    public void onClick(View v) {ViewsUtils.preventViewMultipleClick(v, 3000);

                        optionsDialog.dismiss();

                        reportDialog = DialogUtil.createBubbleReportDialog(AppointmentDetailActivity.this, "举报原因", "骚扰信息", "广告欺诈", "不健康内容", new ReportMiBackCall());
                        if (!isFinishing()) {
                            reportDialog.show();
                        }
                    }

                });

            }
        });
        optionsDialog.setCanceledOnTouchOutside(true);// 设置点击屏幕Dialog不消失
        optionsDialog.show();

    }


    public void showOptionsDialog() {
        // 初始化一个自定义的Dialog
        optionsDialog = new MyDialog(AppointmentDetailActivity.this, R.style.MyDialog, R.layout.select_operate_dialog_layout, new MyDialog.DialogEventListener() {

            @Override
            public void onInit(View contentView) {


                TextView select_operate_dialog_title_tv = (TextView) contentView.findViewById(R.id.select_operate_dialog_title_tv);
                LinearLayout select_operate_dialog_one_layout = (LinearLayout) contentView.findViewById(R.id.select_operate_dialog_one_layout);
                LinearLayout select_operate_dialog_two_layout = (LinearLayout) contentView.findViewById(R.id.select_operate_dialog_two_layout);
                LinearLayout select_operate_dialog_three_layout = (LinearLayout) contentView.findViewById(R.id.select_operate_dialog_three_layout);

                TextView select_operate_dialog_one_tv = (TextView) contentView.findViewById(R.id.select_operate_dialog_one_tv);

                select_operate_dialog_title_tv.setText("更多操作");
                select_operate_dialog_one_tv.setText("举报");

                select_operate_dialog_one_layout.setVisibility(View.VISIBLE);
                select_operate_dialog_two_layout.setVisibility(View.GONE);
                select_operate_dialog_three_layout.setVisibility(View.GONE);

                select_operate_dialog_one_layout.setOnClickListener(new OnClickListener() {

                    @Override
                    public void onClick(View v) {ViewsUtils.preventViewMultipleClick(v, 3000);

                        optionsDialog.dismiss();

                        reportDialog = DialogUtil.createBubbleReportDialog(AppointmentDetailActivity.this, "举报原因", "骚扰信息", "广告欺诈", "不健康内容", new ReportMiBackCall());
                        if (!isFinishing()) {
                            reportDialog.show();
                        }

                    }

                });


            }
        });
        optionsDialog.setCanceledOnTouchOutside(true);// 设置点击屏幕Dialog不消失
        optionsDialog.show();

    }


    private BackCallListener doMyoptionsBackCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }
            loadingDiaog = DialogUtil.LoadingDialog(AppointmentDetailActivity.this, null);
            if (!isFinishing()) {
                loadingDiaog.show();
            }
            doCloseDatingRequest();
        }

        @Override
        public void onCancel(View view, Object... obj) {
            if (!isFinishing()) {
                helpdialog.dismiss();
            }
        }
    };


    private class ReportMiBackCall extends BackCall {
        @Override
        public void deal(int which, Object... obj) {

            switch (which) {
                case R.id.select_operate_dialog_one_layout:

                    if (!isFinishing()) {
                        reportDialog.dismiss();
                    }
                    doReportRequest("骚扰信息");

                    break;
                case R.id.select_operate_dialog_two_layout:

                    if (!isFinishing()) {
                        reportDialog.dismiss();
                    }
                    doReportRequest("广告欺诈");

                    break;

                case R.id.select_operate_dialog_three_layout:

                    if (!isFinishing()) {
                        reportDialog.dismiss();
                    }
                    doReportRequest("不健康内容");

                    break;
            }
            super.deal(which, obj);
        }
    }


    /**
     * 举报
     */
    private void doReportRequest(String content) {

//		String url = "Type=2&Id=" + userID + "&Content=涉黄";
        loadingDiaog = DialogUtil.LoadingDialog(AppointmentDetailActivity.this, null);
        if (!isFinishing()) {
            loadingDiaog.show();
        }

        BubblingReportBean reportBean = new BubblingReportBean();
        reportBean.setId(dating_id);
        reportBean.setType("Appointment");
        reportBean.setContent(content);

        BubblingReportService reportService = new BubblingReportService(this);
        reportService.parameter(reportBean);
        reportService.callBack(new OnCallBackSuccessListener() {
            @Override
            public void onSuccess(RespBean respBean) {
                super.onSuccess(respBean);
                loadingDiaog.dismiss();
                DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this, "举报成功");


            }
        }, new OnCallBackFailListener() {
            @Override
            public void onFail(RespBean respBean) {

                super.onFail(respBean);
                loadingDiaog.dismiss();

                String msg = respBean.getMsg();
                if (TextUtils.isEmpty(msg)) {
                    DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this);
                    return;
                }
                DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this, msg);
            }
        });
        reportService.enqueue();
    }


    private void doCloseDatingRequest() {

        AppointMentsCloseBean closeBean = new AppointMentsCloseBean();
        closeBean.setId(dating_id);

        AppointMentsCloseService closeService = new AppointMentsCloseService(this);
        closeService.parameter(closeBean);
        closeService.callBack(new OnCallBackSuccessListener() {
            @Override
            public void onSuccess(RespBean respBean) {
                super.onSuccess(respBean);
                loadingDiaog.dismiss();

                appoindetaildto.setStatus(0);
                appoint_detail_bottom_line.setVisibility(View.GONE);
                appoint_detail_bottom_right_tv.setVisibility(View.GONE);
                appoint_detail_bottom_left_tv.setText("约会已取消");
                appoint_detail_bottom_left_tv.setTextColor(AppointmentDetailActivity.this.getResources().getColor(R.color.text_color_9a9a9a));
                appoint_detail_bottom_layout.setBackgroundResource(R.color.text_color_b2b2b2);

            }
        }, new OnCallBackFailListener() {
            @Override
            public void onFail(RespBean respBean) {

                super.onFail(respBean);
                loadingDiaog.dismiss();

                String msg = respBean.getMsg();
                if (TextUtils.isEmpty(msg)) {
                    DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this);
                    return;
                }
                DialogUtil.showDisCoverNetToast(AppointmentDetailActivity.this, msg);
            }
        });
        closeService.enqueue();
    }

}
