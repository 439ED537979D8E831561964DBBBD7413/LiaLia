package cn.chono.yopper.activity.near;

import android.app.Activity;
import android.app.Dialog;
import android.content.DialogInterface;
import android.content.Intent;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.SystemClock;
import android.provider.Settings;
import android.support.annotation.Nullable;
import android.text.TextUtils;
import android.view.KeyEvent;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.LinearInterpolator;
import android.view.animation.RotateAnimation;
import android.widget.GridView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.baidu.mapapi.model.LatLng;
import com.lidroid.xutils.db.sqlite.Selector;
import com.lidroid.xutils.exception.DbException;
import com.lidroid.xutils.util.LogUtils;
import com.umeng.analytics.MobclickAgent;
import com.umeng.message.PushAgent;

import java.util.ArrayList;
import java.util.List;

import cn.chono.yopper.R;
import cn.chono.yopper.Service.DiscoverScreenService.DiscoverScreenServiceTask;
import cn.chono.yopper.Service.Http.OnCallBackFailListener;
import cn.chono.yopper.Service.Http.OnCallBackSuccessListener;
import cn.chono.yopper.Service.Http.RespBean;
import cn.chono.yopper.Service.Http.UsersNearby.UsersNearbyBean;
import cn.chono.yopper.Service.Http.UsersNearby.UsersNearbyRespBean;
import cn.chono.yopper.Service.Http.UsersNearby.UsersNearbyService;
import cn.chono.yopper.Service.Http.UsersNearbyMore.UsersNearbyMoreBean;
import cn.chono.yopper.Service.Http.UsersNearbyMore.UsersNearbyMoreRespBean;
import cn.chono.yopper.Service.Http.UsersNearbyMore.UsersNearbyMoreService;
import cn.chono.yopper.YPApplication;
import cn.chono.yopper.YpBaseFragment;
import cn.chono.yopper.YpSettings;
import cn.chono.yopper.activity.base.DiscoverListFragment;
import cn.chono.yopper.activity.base.DiscoverListFragment.OnScreenSelectedFreshListener;
import cn.chono.yopper.activity.base.IndexActivity;
import cn.chono.yopper.activity.base.SimpleWebViewActivity;
import cn.chono.yopper.activity.usercenter.UserInfoActivity;
import cn.chono.yopper.activity.usercenter.UserInfoEditActivity;
import cn.chono.yopper.adapter.DiscoverPeopleAdapter;
import cn.chono.yopper.adapter.DiscoverPeopleAdapter.OnItemClickLitener;
import cn.chono.yopper.data.DiscoverPeopleDto;
import cn.chono.yopper.data.DiscoverPeopleDto.PeopLeList;
import cn.chono.yopper.data.DiscoverPeopleLocalDto;
import cn.chono.yopper.data.LoginUserInfo;
import cn.chono.yopper.data.UserDto;
import cn.chono.yopper.location.Loc;
import cn.chono.yopper.location.LocInfo;
import cn.chono.yopper.utils.ActivityUtil;
import cn.chono.yopper.utils.BackCallListener;
import cn.chono.yopper.utils.DbHelperUtils;
import cn.chono.yopper.utils.DialogUtil;
import cn.chono.yopper.utils.JsonUtils;
import cn.chono.yopper.utils.TimeUtil;
import cn.chono.zxb.xrefreshview.CustomHeaderAnim;
import cn.chono.zxb.xrefreshview.XRefreshView;
import cn.chono.zxb.xrefreshview.XRefreshView.SimpleXRefreshListener;

public class DiscoverPeopleFragment extends YpBaseFragment implements
        OnItemClickLitener, OnScreenSelectedFreshListener, OnClickListener, DiscoverListFragment.OnPeopleBackToTopListener, DiscoverListFragment.OnDiscoverItmePeopleListener {

    private XRefreshView xrefreshView;
    private GridView gridView;

    private DiscoverPeopleAdapter adapter;

    int lastVisibleItem = 0;

    /**
     * 筛选的性别，0--无限 ;1--男;2--女
     */
    private int _screen = 0;


    private double _latitude=31.240517;
    private double _longtitude=121.478844;
    private String _url_next_page;

    private Animation mRotateAnimation;

    private boolean haveFilterData = false;
    private boolean haveFilterListData = false;
    private boolean haveGpsTag;

    private String _nextQuery;
    private TextView error_location_tv;
    private TextView error_network_tv;
    private TextView error_no_data_tv;
    private ImageView error_to_load_img;

    private LinearLayout error_location_layout;// 定位
    private LinearLayout error_network_layout;// 网
    private LinearLayout error_no_data_layout;
    private LinearLayout error_to_load_layout;

    private boolean isOnRefresh = true;
    private boolean isOnLoadMore = true;

    private boolean isgetLoc = false;

    private int _start = 0;
    private int _total = 0;


    private LinearLayout discover_data_layout;
    private RelativeLayout discover_examine_level_rules_layout;
    private TextView discover_examine_level_rules_tv;

    private UserDto userdto;

    private Dialog album_dialog;
    private Dialog status_dialog;

    private List<PeopLeList> time_being_list = new ArrayList<>();

    private int time_being_screen;

    private LocInfo myLoc;

    private UsersNearbyService nearbyService;

    private UsersNearbyMoreService moreService;

    private boolean goSetLocationg = false;


    @Override
    @Nullable
    public View onCreateView(LayoutInflater inflater,
                             @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
        View contentView = inflater.inflate(R.layout.discover_people_fragment,
                container, false);
        PushAgent.getInstance(getActivity()).onAppStart();
        IndexActivity.setOnPeopleBackToTopListener(this);
//		YpBaseFragment.setOnPeopleBackToTopListener(this);
        YpBaseFragment.setOnDiscoverItmePeopleListener(this);

        _screen = DiscoverScreenServiceTask.getInstance().getDBScreen();
        time_being_screen = _screen;

        initView(contentView);
        setXrefreshViewListener();

        if (YpBaseFragment.isItmePeople) {
            initData();
            getLocAndInit();
        }


        return contentView;
    }

    @Override
    public void setUserVisibleHint(boolean isVisibleToUser) {
        super.setUserVisibleHint(isVisibleToUser);


    }

    @Override
    public void onResume() {
        super.onResume();
        if (IndexActivity.selected_menu_type == 1) {

            MobclickAgent.onPageStart("附近 (人)"); // 统计页面(仅有Activity的应用中SDK自动调用，不需要单独写)
            MobclickAgent.onResume(getActivity()); // 统计时长
        }

        if (YpBaseFragment.isItmePeople && goSetLocationg) {
            getLocAndInit();
        }
    }

    private void getLocAndInit() {
        haveGpsTag = Loc.isGpsAvailable();
        if (!haveGpsTag) {
            // 未开启定位权限

            error_to_load_layout.setVisibility(View.GONE);
            error_network_layout.setVisibility(View.GONE);

            if (haveFilterData) {
                error_location_layout.setVisibility(View.GONE);
                if (haveFilterListData) {
                    discover_data_layout.setVisibility(View.VISIBLE);
                    error_no_data_layout.setVisibility(View.GONE);
                } else {
                    discover_data_layout.setVisibility(View.GONE);
                    error_no_data_layout.setVisibility(View.VISIBLE);
                }
                locDialog = DialogUtil.createHintOperateDialog(getActivity(), "定位服务未开启", "开启定位服务以看到附近用户", "取消", "立即开启", locbackCallListener);
                locDialog.setCanceledOnTouchOutside(false);// 设置点击屏幕Dialog不消失
                if (!getActivity().isFinishing()) {
                    locDialog.show();
                }


            } else {
                error_location_layout.setVisibility(View.VISIBLE);
                discover_data_layout.setVisibility(View.GONE);
                error_no_data_layout.setVisibility(View.GONE);
            }

        } else {
            error_location_layout.setVisibility(View.GONE);
            error_network_layout.setVisibility(View.GONE);

            if (haveFilterData) {
                if (haveFilterListData) {
                    discover_data_layout.setVisibility(View.VISIBLE);
                    error_no_data_layout.setVisibility(View.GONE);
                } else {
                    discover_data_layout.setVisibility(View.GONE);
                    error_no_data_layout.setVisibility(View.VISIBLE);
                    initRotateAnimation();
                }

            } else {
                discover_data_layout.setVisibility(View.GONE);
                error_no_data_layout.setVisibility(View.GONE);
                error_to_load_layout.setVisibility(View.VISIBLE);
                initRotateAnimation();
            }
            getLocinfo();
        }
    }

    private void getLocinfo() {

        new Thread(new Runnable() {

            @Override
            public void run() {
                int count = 0;
                while (true) {
                    boolean isExist = Loc.IsLocExist();
                    if (isExist) {
                        break;
                    }
                    count++;
                    if (count > 9) {
                        break;
                    }
                    SystemClock.sleep(1000);
                }

                myLoc = Loc.getLoc();
                if (myLoc != null && myLoc.getLoc() != null) {
                    LocHandler.sendEmptyMessage(1);

                } else {
                    LocHandler.sendEmptyMessage(0);
                }
            }
        }).start();

    }

    /**
     * 定位未开启dialog
     */

    private Dialog locDialog;

    private BackCallListener locbackCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {
            if (!getActivity().isFinishing()) {
                locDialog.dismiss();
            }
            goSetLocationg = true;
            try {
                Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                startActivity(intent);
            } catch (Exception e) {
                Intent intent = new Intent(Settings.ACTION_SETTINGS);
                startActivity(intent);
            }
        }

        @Override
        public void onCancel(View view, Object... obj) {
            if (!getActivity().isFinishing()) {
                locDialog.dismiss();
            }

        }
    };


    @Override
    public void onPause() {
        super.onPause();
        MobclickAgent.onPageEnd("附近 (人)"); // 统计页面(仅有Activity的应用中SDK自动调用，不需要单独写)
        MobclickAgent.onPause(getActivity()); // 统计时长
    }


    private void initView(View contentView) {
        setOnScreenSelectedFreshListener(this);
        xrefreshView = (XRefreshView) contentView
                .findViewById(R.id.xrefreshview);

        gridView = (GridView) contentView.findViewById(R.id.gridView);
        // id_recyclerview = (RecyclerView) contentView
        // .findViewById(R.id.id_recyclerview);
        // id_recyclerview.setLayoutManager(new StaggeredGridLayoutManager(3,
        // StaggeredGridLayoutManager.VERTICAL));
        // id_recyclerview.addItemDecoration(new DividerGridItemDecoration(
        // getActivity(), R.drawable.discover_people));
        adapter = new DiscoverPeopleAdapter(getActivity());

        // id_recyclerview.setAdapter(adapter);
        gridView.setAdapter(adapter);
        adapter.setOnItemClickLitener(this);

        error_location_tv = (TextView) contentView.findViewById(R.id.error_location_tv);
        error_network_tv = (TextView) contentView.findViewById(R.id.error_network_tv);
        error_no_data_tv = (TextView) contentView.findViewById(R.id.error_no_data_tv);
        error_to_load_img = (ImageView) contentView.findViewById(R.id.error_to_load_img);

        error_location_layout = (LinearLayout) contentView.findViewById(R.id.error_location_layout);
        error_network_layout = (LinearLayout) contentView.findViewById(R.id.error_network_layout);
        error_no_data_layout = (LinearLayout) contentView.findViewById(R.id.error_no_data_layout);
        error_to_load_layout = (LinearLayout) contentView.findViewById(R.id.error_to_load_layout);

        error_network_tv.setOnClickListener(this);
        error_location_tv.setOnClickListener(this);

        error_no_data_tv.setText(R.string.error_hini);

        discover_data_layout = (LinearLayout) contentView.findViewById(R.id.discover_data_layout);
        discover_examine_level_rules_layout = (RelativeLayout) contentView.findViewById(R.id.discover_examine_level_rules_layout);
        discover_examine_level_rules_tv = (TextView) contentView.findViewById(R.id.discover_examine_level_rules_tv);
        discover_examine_level_rules_tv.setOnClickListener(this);


    }

    private void setXrefreshViewListener() {

        // 设置静默加载模式

        xrefreshView.setSlienceLoadMore();
        xrefreshView.setAutoLoadMore(true);
        xrefreshView.setPinnedTime(1000);
        xrefreshView.setMoveForHorizontal(true);
        xrefreshView.setCustomHeaderView(new CustomHeaderAnim(getActivity()));
        // 处理ViewPager冲突
        xrefreshView.setMoveForHorizontal(true);
        // 设置静默加载时提前加载的item个数
        xrefreshView.setPreLoadCount(15);


        xrefreshView.setXRefreshViewListener(new SimpleXRefreshListener() {

            @Override
            public void onRefresh() {
                super.onRefresh();
                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        isScreenAvailable = false;
                        if (isOnRefresh) {
                            isOnRefresh = false;
                            _start = 0;
                            onRefreshData(_start);
                        } else {
                            isScreenAvailable = true;
                        }

                        xrefreshView.stopRefresh();
                    }
                }, 2000);
            }

            @Override
            public void onLoadMore(boolean isSlience) {
                super.onLoadMore(isSlience);
                new Handler().postDelayed(new Runnable() {
                    public void run() {
                        if (isOnLoadMore) {
                            isOnLoadMore = false;
                            onLoadMoreData(_nextQuery);

                        }

                        xrefreshView.stopLoadMore();
                    }
                }, 500);

            }

        });

    }

    private void initData() {
        String dataStr = grtDataLocal(YPApplication.loginUser.getUserId());
        if (!TextUtils.isEmpty(dataStr)) {// 获取到保存的数据字符串
            DiscoverPeopleDto peropleDto = JsonUtils.fromJson(dataStr,
                    DiscoverPeopleDto.class);

            if (peropleDto != null) {// 对象转换，有数据

                List<PeopLeList> list = peropleDto.getList();
                haveFilterData = true;
                if (list != null && list.size() > 0) {// 列表有数据
                    haveFilterListData = true;
                    discover_data_layout.setVisibility(View.VISIBLE);
                    error_no_data_layout.setVisibility(View.GONE);

                    _nextQuery = peropleDto.getNextQuery();
                    adapter.setData(list);

                    adapter.notifyDataSetChanged();

                } else {

                    haveFilterListData = false;
                    error_no_data_layout.setVisibility(View.VISIBLE);
                    discover_data_layout.setVisibility(View.GONE);

                }

            } else {// 对象转换异常，没有本地数据
                haveFilterData = false;
                haveFilterListData = false;
                discover_data_layout.setVisibility(View.GONE);
                error_to_load_layout.setVisibility(View.VISIBLE);
                initRotateAnimation();

            }

        } else {// 为空就是没有数据
            haveFilterData = false;
            haveFilterListData = false;
            // 没有本地数据
            discover_data_layout.setVisibility(View.GONE);
            error_to_load_layout.setVisibility(View.VISIBLE);
            initRotateAnimation();

        }

    }

    private Handler LocHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {

            try {

                if (msg.what == 0) {// 定位失败

                    // 动画回收
                    removeRotateAnimation();

                    if (haveFilterData) {
                        if (haveFilterListData) {
                            discover_data_layout.setVisibility(View.VISIBLE);
                            error_no_data_layout.setVisibility(View.GONE);
                        } else {
                            discover_data_layout.setVisibility(View.GONE);
                            error_no_data_layout.setVisibility(View.VISIBLE);
                        }
                        //提示未开启定位
//						DialogUtil.showDisCoverNetToast(getActivity(),"获取位置失败");
                    } else {
                        discover_data_layout.setVisibility(View.GONE);
                        error_no_data_layout.setVisibility(View.GONE);
                        error_to_load_layout.setVisibility(View.GONE);
                        error_location_layout.setVisibility(View.VISIBLE);
                    }
                    onRefreshData(_start);

                } else if (msg.what == 1) {// 找到位置
                    isgetLoc = true;

                    _latitude = myLoc.getLoc().getLatitude();
                    _longtitude = myLoc.getLoc().getLongitude();
                    _start = 0;
                    onRefreshData(_start);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    };

    /**
     * 上拉加载请求方法
     */
    private void onLoadMoreData(String nextQuery) {


        if (TextUtils.isEmpty(nextQuery)) {
            isOnLoadMore = true;
            return;
        }

        UsersNearbyMoreBean nearbyMoreBean = new UsersNearbyMoreBean();
        nearbyMoreBean.setNextQuery(nextQuery);

        moreService = new UsersNearbyMoreService(getActivity());
        moreService.parameter(nearbyMoreBean);
        moreService.callBack(new OnCallBackSuccessListener() {
            @Override
            public void onSuccess(RespBean respBean) {
                super.onSuccess(respBean);

                UsersNearbyMoreRespBean moreRespBean = (UsersNearbyMoreRespBean) respBean;

                DiscoverPeopleDto peropleDto = moreRespBean.getResp();

                isOnLoadMore = true;

                if (peropleDto != null) {
                    List<PeopLeList> list = peropleDto.getList();
                    if (list != null && list.size() > 0) {// 列表有数据

                        _nextQuery = peropleDto.getNextQuery();
                        adapter.addData(list);

                        adapter.notifyDataSetChanged();

                    }

                }

            }
        }, new OnCallBackFailListener() {
            @Override
            public void onFail(RespBean respBean) {
                super.onFail(respBean);

                isOnLoadMore = true;
                // 定位视图隐藏 无数据视图隐藏-小圆圈视图隐藏-
                // 如果没有本地缓存，则显示网络加载失败视图，如果有缓存则提示网络问题
                error_location_layout.setVisibility(View.GONE);
                error_network_layout.setVisibility(View.GONE);
                error_no_data_layout.setVisibility(View.GONE);
                error_to_load_layout.setVisibility(View.GONE);
                // 提示连接失败
                DialogUtil.showDisCoverNetToast(getActivity());

                getDiscoverPeopleScreenListener().OnScreenSelectedBackStatus(time_being_screen);
            }
        });
        moreService.enqueue();
        getScreenData(YPApplication.loginUser.getUserId(), _screen);

    }

    /**
     * 下拉加载更多
     *
     * @param start
     */
    private void onRefreshData(final int start) {

        isScreenAvailable = false;

        LocInfo myLoc = Loc.getLoc();
        if (myLoc != null && myLoc.getLoc() != null) {
            _latitude = myLoc.getLoc().getLatitude();
            _longtitude = myLoc.getLoc().getLongitude();
        }

        if (_latitude == 0 && _longtitude == 0) {
            isOnRefresh = true;
            isScreenAvailable = true;
            return;
        }

        LatLng pt = new LatLng(_latitude, _longtitude);
        pt = Loc.getBaiduGpsFromGcj(pt.latitude, pt.longitude);


        UsersNearbyBean nearbyBean = new UsersNearbyBean();
        nearbyBean.setLng(pt.longitude);
        nearbyBean.setLat(pt.latitude);
        nearbyBean.setTime(TimeUtil.getCurrentTimeMillis());


        nearbyBean.setStart(start);

        System.out.println("_screen=" + _screen);
        if (_screen == 3) {
            nearbyBean.setLevel(1);
            nearbyBean.setSex(1);
        } else {
            nearbyBean.setSex(_screen);
        }

        nearbyService = new UsersNearbyService(getActivity());

        nearbyService.parameter(nearbyBean);

        nearbyService.callBack(new OnCallBackSuccessListener() {
            @Override
            public void onSuccess(RespBean respBean) {
                super.onSuccess(respBean);
                isScreenAvailable = true;
                UsersNearbyRespBean moreRespBean = (UsersNearbyRespBean) respBean;

                DiscoverPeopleDto peropleDto = moreRespBean.getResp();
                String responseStr = JsonUtils.toJson(peropleDto);

                isOnRefresh = true;

                // 定位视图隐藏 网络加载失败视图隐藏-小圆圈视图隐藏
                // 如果没有数据，则显示无数据视图，如果有数据则刷新视图
                // 动画回收
                // 动画回收
                removeRotateAnimation();

                error_location_layout.setVisibility(View.GONE);
                error_network_layout.setVisibility(View.GONE);
                error_to_load_layout.setVisibility(View.GONE);


                if (peropleDto != null) {

                    haveFilterData = true;
                    List<PeopLeList> list = peropleDto.getList();
                    if (list != null && list.size() > 0) {// 列表有数据
                        haveFilterListData = true;
                        error_no_data_layout.setVisibility(View.GONE);
                        discover_data_layout.setVisibility(View.VISIBLE);
                        _nextQuery = peropleDto.getNextQuery();

                        adapter.setData(list);

                        adapter.notifyDataSetChanged();


                    } else {
                        haveFilterListData = false;
                        error_no_data_layout.setVisibility(View.VISIBLE);
                        discover_data_layout.setVisibility(View.GONE);

                    }

                    AsyncTask<Void, Void, Integer> task = saveDataLocal(YPApplication.loginUser.getUserId(), responseStr);
                    task.execute();// 执行保存数据
                } else {
                    haveFilterData = false;
                    haveFilterListData = false;
                    error_no_data_layout.setVisibility(View.VISIBLE);
                    discover_data_layout.setVisibility(View.GONE);

                }


            }
        }, new OnCallBackFailListener() {
            @Override
            public void onFail(RespBean respBean) {
                super.onFail(respBean);
                isScreenAvailable = true;
                LogUtils.e("-----------------respBean-----------------------" + respBean.toString());

                isOnRefresh = true;
                // 定位视图隐藏 无数据视图隐藏-小圆圈视图隐藏-
                // 如果没有本地缓存，则显示网络加载失败视图，如果有缓存则提示网络问题
                // 动画回收
                // 动画回收
                // 动画回收
                removeRotateAnimation();

                getDiscoverPeopleScreenListener().OnScreenSelectedBackStatus(time_being_screen);

                error_location_layout.setVisibility(View.GONE);
                error_to_load_layout.setVisibility(View.GONE);

                if (haveFilterData) {
                    if (haveFilterListData) {
                        discover_data_layout.setVisibility(View.VISIBLE);
                        error_no_data_layout.setVisibility(View.GONE);
                    } else {
                        discover_data_layout.setVisibility(View.GONE);
                        error_no_data_layout
                                .setVisibility(View.VISIBLE);
                    }

                    error_network_layout.setVisibility(View.GONE);
                    // 提示连接失败
                    DialogUtil.showDisCoverNetToast(getActivity());
                } else {
                    error_network_layout.setVisibility(View.VISIBLE);
                    discover_data_layout.setVisibility(View.GONE);
                    error_no_data_layout.setVisibility(View.GONE);
                }

            }
        });
        nearbyService.enqueue();
        getScreenData(YPApplication.loginUser.getUserId(), _screen);

    }


    private Activity activity;

    @Override
    public void onAttach(Activity activity) {
        this.activity = activity;
        super.onAttach(activity);
    }

    @Override
    public void onItemClick(View view, int position, int userID) {
        Bundle userbundle = new Bundle();
        userbundle.putInt(YpSettings.USERID, userID);
        ActivityUtil.jump(getActivity(), UserInfoActivity.class, userbundle, 0, 100);

    }

    @Override
    public void onScreenSelectedFresh(int appointType, int sexType) {
        time_being_screen = _screen;
        _screen = sexType;
        _start = 0;
        System.out.println("onScreenSelectedFresh=" + _screen);


        if (xrefreshView.getVisibility() == View.GONE) {
            _start = 0;
            onRefreshData(_start);

        } else {
            xrefreshView.stopRefresh();
            xrefreshView.startRefresh();
        }


//        onRefreshData(_start);
    }

    /**
     * 保存数据
     *
     * @param userId
     * @param data
     * @return
     */
    private AsyncTask<Void, Void, Integer> saveDataLocal(final int userId,
                                                         final String data) {

        AsyncTask<Void, Void, Integer> task = new AsyncTask<Void, Void, Integer>() {

            @Override
            protected Integer doInBackground(Void... params) {

                try {
                    DiscoverPeopleLocalDto localDto = YPApplication.db
                            .findFirst(Selector.from(
                                    DiscoverPeopleLocalDto.class).where(
                                    "userId", " =", userId));

                    if (localDto != null) {
                        localDto.setUserId(YPApplication.loginUser.getUserId());
                        localDto.setData(data);
                        localDto.setTime(System.currentTimeMillis());
                        YPApplication.db.update(localDto);
                    } else {
                        localDto = new DiscoverPeopleLocalDto();
                        localDto.setUserId(YPApplication.loginUser.getUserId());
                        localDto.setData(data);
                        localDto.setTime(System.currentTimeMillis());
                        YPApplication.db.save(localDto);
                    }

                } catch (DbException e) {
                    e.printStackTrace();
                }

                return null;
            }
        };
        return task;

    }

    /**
     * 获取缓存数据
     *
     * @param userId
     * @return
     */

    private String grtDataLocal(int userId) {

        try {
            DiscoverPeopleLocalDto localDto = YPApplication.db
                    .findFirst(Selector.from(DiscoverPeopleLocalDto.class)
                            .where("userId", " =", userId));
            if (localDto == null) {
                return null;
            }

            return localDto.getData();

        } catch (DbException e) {
            e.printStackTrace();

        }

        return null;

    }


    @Override
    public void onClick(View v) {
        switch (v.getId()) {
            case R.id.error_location_tv:

                try {
                    Intent intent = new Intent(
                            Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                    startActivity(intent);
                } catch (Exception e) {
                    Intent intent = new Intent(Settings.ACTION_SETTINGS);
                    getActivity().startActivity(intent);
                }
                break;
            case R.id.error_network_tv:

                error_to_load_layout.setVisibility(View.VISIBLE);
                error_network_layout.setVisibility(View.GONE);
                error_location_layout.setVisibility(View.GONE);
                error_no_data_layout.setVisibility(View.GONE);
                error_location_layout.setVisibility(View.GONE);
                discover_data_layout.setVisibility(View.GONE);
                initRotateAnimation();
                _start = 0;
                onRefreshData(_start);

                break;
            case R.id.discover_examine_level_rules_tv://查看优质男规则

                //跳转到web 查看帮助
                int attraction = 0;
                LoginUserInfo loginUserInfo = DbHelperUtils.getUserInfo(YPApplication.loginUser.getUserId());
                if (loginUserInfo != null) {
                    UserDto dto = JsonUtils.fromJson(loginUserInfo.getResp(), UserDto.class);
                    if (dto != null && dto.getProfile() != null) {
                        attraction = dto.getProfile().getAttraction();
                    }
                }

                Bundle bundle = new Bundle();
                bundle.putString(YpSettings.BUNDLE_KEY_WEB_URL, "Attraction/Male?v=" + attraction);
                bundle.putString(YpSettings.BUNDLE_KEY_WEB_TITLE, "魅力值");
                bundle.putBoolean(YpSettings.BUNDLE_KEY_WEB_HIDE_TITLE, false);

                ActivityUtil.jump(getActivity(), SimpleWebViewActivity.class, bundle, 0, 100);
                break;

            default:
                break;
        }

    }


    /**
     * @param userid
     */
    private void getScreenData(int userid, int screen) {
        time_being_list = adapter.getData();

        if (3 == screen) {
            LoginUserInfo loginUserInfo = DbHelperUtils.getUserInfo(userid);

            if (loginUserInfo != null) {
                userdto = JsonUtils.fromJson(loginUserInfo.getResp(), UserDto.class);
                if (userdto != null) {
                    int sex = userdto.getProfile().getSex();
                    int level = userdto.getProfile().getLevel();
                    List<String> album = userdto.getAlbum();
                    int status = userdto.getProfile().getStatus();
                    if (sex == 1) {//男性
                        if (level == 1) {
                            discover_examine_level_rules_layout.setVisibility(View.GONE);
                        } else {
                            discover_examine_level_rules_layout.setVisibility(View.VISIBLE);
                        }


                    } else {//女性
                        discover_examine_level_rules_layout.setVisibility(View.GONE);
                        if (null != album && album.size() < 4) {//相册不足4张


                            album_dialog = DialogUtil.createHintOperateDialog(getActivity(), "", "至少上传4张个人照片才能继续查看", "取消", "立即上传", new AlbumDialogBackCallListener());
                            album_dialog.setCancelable(true);
                            album_dialog.setCanceledOnTouchOutside(false);
                            album_dialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
                                @Override
                                public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {
                                    if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {
                                        _screen = time_being_screen;
                                        getDiscoverPeopleScreenListener().OnScreenSelectedBackStatus(time_being_screen);
                                        adapter.setData(time_being_list);
                                        adapter.notifyDataSetChanged();
                                        album_dialog.dismiss();
                                    }

                                    return false;
                                }
                            });

                            album_dialog.show();


                        } else if (((status >> 0) & 1) == 0) {//头像没审核通过

                            status_dialog = DialogUtil.createHintOperateDialog(getActivity(), "", "通过头像审核才能继续查看", "查看帮助", "确定", new StatusDialogBackCallListener());
                            status_dialog.setCancelable(true);
                            status_dialog.setCanceledOnTouchOutside(false);
                            status_dialog.setOnKeyListener(new DialogInterface.OnKeyListener() {
                                @Override
                                public boolean onKey(DialogInterface dialog, int keyCode, KeyEvent event) {

                                    if (keyCode == KeyEvent.KEYCODE_BACK && event.getRepeatCount() == 0) {
                                        _screen = time_being_screen;
                                        getDiscoverPeopleScreenListener().OnScreenSelectedBackStatus(time_being_screen);
                                        adapter.setData(time_being_list);
                                        adapter.notifyDataSetChanged();
                                        status_dialog.dismiss();
                                    }

                                    return false;
                                }
                            });
                            status_dialog.show();

                        }


                    }

                }
            }
        } else {
            discover_examine_level_rules_layout.setVisibility(View.GONE);
        }


    }

    @Override
    public void onDiscoverItmePeople() {

        if (!YpBaseFragment.isItmePeople) {
            YpBaseFragment.isItmePeople = true;
            initData();
            getLocAndInit();

        }


    }


    /**
     * 优质男没有上传4张相册图片  的提示回调
     */
    private class AlbumDialogBackCallListener implements BackCallListener {

        @Override
        public void onEnsure(View view, Object... obj) {
            if (null != nearbyService) {
                nearbyService.cancel();
            }
            if (null != moreService) {
                moreService.cancel();
            }
            _screen = time_being_screen;
            getDiscoverPeopleScreenListener().OnScreenSelectedBackStatus(time_being_screen);

            adapter.setData(time_being_list);
            adapter.notifyDataSetChanged();

            Bundle userbundle = new Bundle();
            userbundle.putInt(YpSettings.USERID, YPApplication.loginUser.getUserId());
            ActivityUtil.jump(getActivity(), UserInfoEditActivity.class, userbundle, 0, 100);
            album_dialog.dismiss();
        }

        @Override
        public void onCancel(View view, Object... obj) {
            if (null != nearbyService) {
                nearbyService.cancel();
            }
            if (null != moreService) {
                moreService.cancel();
            }
            _screen = time_being_screen;
            getDiscoverPeopleScreenListener().OnScreenSelectedBackStatus(time_being_screen);
            adapter.setData(time_being_list);
            adapter.notifyDataSetChanged();
            album_dialog.dismiss();
        }
    }

    /**
     * 优质男没有通过 头像审核弹出 的提示回调
     */
    private class StatusDialogBackCallListener implements BackCallListener {

        @Override
        public void onEnsure(View view, Object... obj) {
            if (null != nearbyService) {
                nearbyService.cancel();
            }
            if (null != moreService) {
                moreService.cancel();
            }


            _screen = time_being_screen;
            getDiscoverPeopleScreenListener().OnScreenSelectedBackStatus(time_being_screen);
            adapter.setData(time_being_list);
            adapter.notifyDataSetChanged();
            status_dialog.dismiss();
        }

        @Override
        public void onCancel(View view, Object... obj) {
            if (null != nearbyService) {
                nearbyService.cancel();
            }
            if (null != moreService) {
                moreService.cancel();
            }
            _screen = time_being_screen;
            getDiscoverPeopleScreenListener().OnScreenSelectedBackStatus(time_being_screen);
            adapter.setData(time_being_list);
            adapter.notifyDataSetChanged();
            //跳转到web 查看帮助

            Bundle bundle = new Bundle();
            bundle.putString(YpSettings.BUNDLE_KEY_WEB_URL, "Standard/AvatarAudit");
            bundle.putString(YpSettings.BUNDLE_KEY_WEB_TITLE, "头像审核规范");
            bundle.putBoolean(YpSettings.BUNDLE_KEY_WEB_HIDE_TITLE, false);

            ActivityUtil.jump(getActivity(), SimpleWebViewActivity.class, bundle, 0, 100);
            status_dialog.dismiss();
        }
    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        // 动画回收
        removeRotateAnimation();
    }

    private void initRotateAnimation() {
        mRotateAnimation = new RotateAnimation(0, 360,
                Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF,
                0.5f);
        mRotateAnimation.setInterpolator(new LinearInterpolator());
        // mRotateAnimation.setDuration(ROTATION_ANIMATION_DURATION);
        mRotateAnimation.setRepeatCount(Animation.INFINITE);
        mRotateAnimation.setDuration(350);
        mRotateAnimation.setRepeatMode(Animation.RESTART);
        error_to_load_img.setAnimation(mRotateAnimation);
    }

    /**
     * 正在加载动画回收
     */
    private void removeRotateAnimation() {
        // 动画回收
        if (mRotateAnimation != null) {
            mRotateAnimation.cancel();
            error_to_load_img.clearAnimation();
        }
    }

    @Override
    public void onPeopleBackToTop() {
        gridView.setSelection(0);
    }


}
