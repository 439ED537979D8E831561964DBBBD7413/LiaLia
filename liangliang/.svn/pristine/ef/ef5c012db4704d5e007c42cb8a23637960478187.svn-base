package cn.chono.yopper.extractmpegframes.util;

import android.annotation.TargetApi;
import android.graphics.Bitmap;
import android.media.MediaCodec;
import android.media.MediaCodecInfo;
import android.media.MediaExtractor;
import android.media.MediaFormat;
import android.opengl.GLES20;
import android.os.Build;
import android.util.Log;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import cn.chono.yopper.extractmpegframes.outputsurface.CodecOutputSurface;

/**
 * @version 0.1 king 2015-10
 */
public class Utils {


    public static Bitmap getBitmap(ByteBuffer mPixelBuf, int width, int height) throws IOException {
        mPixelBuf.rewind();
        GLES20.glReadPixels(0, 0, width, height, GLES20.GL_RGBA,
                GLES20.GL_UNSIGNED_BYTE, mPixelBuf);

        ByteArrayOutputStream bos = null;
        Bitmap bmp = null;
        try {
            bmp = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_4444);
            mPixelBuf.rewind();
            bmp.copyPixelsFromBuffer(mPixelBuf);

            bos = new ByteArrayOutputStream();
            bmp.compress(Bitmap.CompressFormat.PNG, 90, bos);
            //bmp.recycle();
        } finally {
            if (bos != null)
                bos.close();
        }
        return bmp;
    }

    /**
     * 获取桢数
     * @param extractor
     * @param decoder
     * @param outputSurface
     * @return key-value：桢数-时间
     * @throws IOException
     */

    public static Map<Integer, Long> getFrameSize(MediaExtractor extractor, MediaCodec decoder, CodecOutputSurface outputSurface)
            throws IOException {
        Map<Integer, Long> map = new HashMap<>();

        final int TIMEOUT_USEC = 1 * 1000;

        ByteBuffer[] decoderInputBuffers = decoder.getInputBuffers();
        MediaCodec.BufferInfo info = new MediaCodec.BufferInfo();
        int inputChunk = 0;

        boolean outputDone = false;
        boolean inputDone = false;
        while (!outputDone) {
            // Feed more data to the decoder.
            if (!inputDone) {
                int inputBufIndex = decoder.dequeueInputBuffer(TIMEOUT_USEC);
                if (inputBufIndex >= 0) {
                    ByteBuffer inputBuf = decoderInputBuffers[inputBufIndex];

                    // Read the sample data into the ByteBuffer. This neither
                    // respects nor
                    // updates inputBuf's position, limit, etc.
                    int chunkSize = extractor.readSampleData(inputBuf, 0);
                    if (chunkSize < 0) {
                        // End of stream -- send empty frame with EOS flag set.
                        decoder.queueInputBuffer(inputBufIndex, 0, 0, 0L,
                                MediaCodec.BUFFER_FLAG_END_OF_STREAM);
                        inputDone = true;
                    } else {
                        long presentationTimeUs = extractor.getSampleTime();
                        decoder.queueInputBuffer(inputBufIndex, 0, chunkSize,
                                presentationTimeUs, 0 /* flags */);
                        map.put(inputChunk, presentationTimeUs);
                        inputChunk++;
                        extractor.advance();
                    }
                }
            }

            if (!outputDone) {
                int decoderStatus = decoder.dequeueOutputBuffer(info,
                        TIMEOUT_USEC);
                if (decoderStatus == MediaCodec.INFO_TRY_AGAIN_LATER) {
                    // no output available yet
                } else if (decoderStatus == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
                    // not important for us, since we're using Surface
                } else if (decoderStatus == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
                    MediaFormat newFormat = decoder.getOutputFormat();
                } else if (decoderStatus < 0) {
                } else { // decoderStatus >= 0
                    if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
                        outputDone = true;
                    }

                    boolean doRender = (info.size != 0);

                    // As soon as we call releaseOutputBuffer, the buffer will
                    // be forwarded
                    // to SurfaceTexture to convert to a texture. The API
                    // doesn't guarantee
                    // that the texture will be available before the call
                    // returns, so we
                    // need to wait for the onFrameAvailable callback to fire.
                    decoder.releaseOutputBuffer(decoderStatus, doRender);
                    if (doRender) {
                        outputSurface.awaitNewImage();
                        outputSurface.drawImage(true);

                    }
                }
            }
        }
        return map;
    }



    /**
     * 获取桢数
     * @param extractor
     * @param decoder
     * @param outputSurface
     * @return key-value：桢数-时间
     * @throws IOException
     */

    public static Map<Integer, Long> getFrameSizeByse(MediaExtractor extractor, MediaCodec decoder, CodecOutputSurface outputSurface)
            throws IOException {
        Map<Integer, Long> map = new HashMap<>();

        final int TIMEOUT_USEC = 1 * 1000;

        ByteBuffer[] decoderInputBuffers = decoder.getInputBuffers();
        MediaCodec.BufferInfo info = new MediaCodec.BufferInfo();
        int inputChunk = 0;

        boolean outputDone = false;
        boolean inputDone = false;
        while (!outputDone) {
            // Feed more data to the decoder.
            if (!inputDone) {
                int inputBufIndex = decoder.dequeueInputBuffer(TIMEOUT_USEC);
                if (inputBufIndex >= 0) {
                    ByteBuffer inputBuf = decoderInputBuffers[inputBufIndex];

                    // Read the sample data into the ByteBuffer. This neither
                    // respects nor
                    // updates inputBuf's position, limit, etc.
                    int chunkSize = extractor.readSampleData(inputBuf, 0);
                    if (chunkSize < 0) {
                        // End of stream -- send empty frame with EOS flag set.
                        decoder.queueInputBuffer(inputBufIndex, 0, 0, 0L,
                                MediaCodec.BUFFER_FLAG_END_OF_STREAM);
                        inputDone = true;
                    } else {
                        long presentationTimeUs = extractor.getSampleTime();
                        decoder.queueInputBuffer(inputBufIndex, 0, chunkSize,
                                presentationTimeUs, 0 /* flags */);
                        map.put(inputChunk, presentationTimeUs);
                        inputChunk++;
                        extractor.advance();
                    }
                }
            }

            if (!outputDone) {
                int decoderStatus = decoder.dequeueOutputBuffer(info,
                        TIMEOUT_USEC);
                if (decoderStatus == MediaCodec.INFO_TRY_AGAIN_LATER) {
                    // no output available yet
                } else if (decoderStatus == MediaCodec.INFO_OUTPUT_BUFFERS_CHANGED) {
                    // not important for us, since we're using Surface
                } else if (decoderStatus == MediaCodec.INFO_OUTPUT_FORMAT_CHANGED) {
                    MediaFormat newFormat = decoder.getOutputFormat();
                } else if (decoderStatus < 0) {
                } else { // decoderStatus >= 0
                    if ((info.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0) {
                        outputDone = true;
                    }

                    boolean doRender = (info.size != 0);

                    // As soon as we call releaseOutputBuffer, the buffer will
                    // be forwarded
                    // to SurfaceTexture to convert to a texture. The API
                    // doesn't guarantee
                    // that the texture will be available before the call
                    // returns, so we
                    // need to wait for the onFrameAvailable callback to fire.
                    decoder.releaseOutputBuffer(decoderStatus, doRender);
                    if (doRender) {
                        outputSurface.awaitNewImage();
                        outputSurface.drawImage(true);


                    }
                }
            }
        }
        return map;
    }


    public static List<Integer> getItems(int size, int len) {
        Log.d("ATG", "> getItems(int size, int len)=" +"size--="+size+"----len="+len);
        List<Integer> items = new ArrayList<Integer>();
        if (size <= len) {
            // 不足 len
            for (int i=0; i<size; i++) {
                items.add(i+1);
            }
        } else {
            // 超过 len
            for (int i=0; i<len; i++) {
                int item;
                if (i == 0) {
                    item = 1;
                } else if (i == len) {
                    item = len;
                } else {
                    item = (int) Math.floor((double)(i+1)*size/len);
                }
                items.add(item);
            }
        }

        return items;
    }



    public static void getColorFormat(MediaFormat format) {
        int colorFormat = format.getInteger(MediaFormat.KEY_COLOR_FORMAT);

        int QOMX_COLOR_FormatYUV420PackedSemiPlanar64x32Tile2m8ka = 0x7FA30C03;

        String formatString = "";
        if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format12bitRGB444) {
            formatString = "COLOR_Format12bitRGB444";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format16bitARGB1555) {
            formatString = "COLOR_Format16bitARGB1555";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format16bitARGB4444) {
            formatString = "COLOR_Format16bitARGB4444";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format16bitBGR565) {
            formatString = "COLOR_Format16bitBGR565";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format16bitRGB565) {
            formatString = "COLOR_Format16bitRGB565";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format18bitARGB1665) {
            formatString = "COLOR_Format18bitARGB1665";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format18BitBGR666) {
            formatString = "COLOR_Format18BitBGR666";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format18bitRGB666) {
            formatString = "COLOR_Format18bitRGB666";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format19bitARGB1666) {
            formatString = "COLOR_Format19bitARGB1666";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format24BitABGR6666) {
            formatString = "COLOR_Format24BitABGR6666";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format24bitARGB1887) {
            formatString = "COLOR_Format24bitARGB1887";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format24BitARGB6666) {
            formatString = "COLOR_Format24BitARGB6666";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format24bitBGR888) {
            formatString = "COLOR_Format24bitBGR888";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format24bitRGB888) {
            formatString = "COLOR_Format24bitRGB888";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format25bitARGB1888) {
            formatString = "COLOR_Format25bitARGB1888";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format32bitARGB8888) {
            formatString = "COLOR_Format32bitARGB8888";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format32bitBGRA8888) {
            formatString = "COLOR_Format32bitBGRA8888";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_Format8bitRGB332) {
            formatString = "COLOR_Format8bitRGB332";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatCbYCrY) {
            formatString = "COLOR_FormatCbYCrY";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatCrYCbY) {
            formatString = "COLOR_FormatCrYCbY";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatL16) {
            formatString = "COLOR_FormatL16";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatL2) {
            formatString = "COLOR_FormatL2";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatL24) {
            formatString = "COLOR_FormatL24";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatL32) {
            formatString = "COLOR_FormatL32";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatL4) {
            formatString = "COLOR_FormatL4";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatL8) {
            formatString = "COLOR_FormatL8";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatMonochrome) {
            formatString = "COLOR_FormatMonochrome";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatRawBayer10bit) {
            formatString = "COLOR_FormatRawBayer10bit";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatRawBayer8bit) {
            formatString = "COLOR_FormatRawBayer8bit";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatRawBayer8bitcompressed) {
            formatString = "COLOR_FormatRawBayer8bitcompressed";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatYCbYCr) {
            formatString = "COLOR_FormatYCbYCr";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatYCrYCb) {
            formatString = "COLOR_FormatYCrYCb";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV411PackedPlanar) {
            formatString = "COLOR_FormatYUV411PackedPlanar";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV411Planar) {
            formatString = "COLOR_FormatYUV411Planar";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedPlanar) {
            formatString = "COLOR_FormatYUV420PackedPlanar";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420PackedSemiPlanar) {
            formatString = "COLOR_FormatYUV420PackedSemiPlanar";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV422PackedPlanar) {
            formatString = "COLOR_FormatYUV422PackedPlanar";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV422PackedSemiPlanar) {
            formatString = "COLOR_FormatYUV422PackedSemiPlanar";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV422Planar) {
            formatString = "COLOR_FormatYUV422Planar";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV422PackedSemiPlanar) {
            formatString = "COLOR_FormatYUV422PackedSemiPlanar";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV422Planar) {
            formatString = "COLOR_FormatYUV422Planar";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV422SemiPlanar) {
            formatString = "COLOR_FormatYUV422SemiPlanar";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV444Interleaved) {
            formatString = "COLOR_FormatYUV444Interleaved";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_QCOM_FormatYUV420SemiPlanar) {
            formatString = "COLOR_QCOM_FormatYUV420SemiPlanar";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_TI_FormatYUV420PackedSemiPlanar) {
            formatString = "COLOR_TI_FormatYUV420PackedSemiPlanar";
        } else if (colorFormat == QOMX_COLOR_FormatYUV420PackedSemiPlanar64x32Tile2m8ka) {
            formatString = "QOMX_COLOR_FormatYUV420PackedSemiPlanar64x32Tile2m8ka";
        } else if (colorFormat == MediaCodecInfo.CodecCapabilities.COLOR_FormatYUV420Planar) {
            formatString = "COLOR_FormatYUV420Planar";
        }
    }




}
