package cn.chono.yopper.view;

import android.app.Activity;
import android.content.Context;
import android.support.v4.app.Fragment;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentPagerAdapter;
import android.support.v4.view.ViewPager;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.AccelerateInterpolator;
import android.view.animation.Animation;
import android.view.animation.Animation.AnimationListener;
import android.view.animation.TranslateAnimation;
import android.widget.LinearLayout;
import android.widget.TextView;

import java.util.ArrayList;

import cn.chono.yopper.R;
import cn.chono.yopper.utils.UnitUtil;

public class TabFragmentIndicator extends LinearLayout implements ViewPager.OnPageChangeListener, OnClickListener {

	OnTabClickListener onTabClickListener;

	OnDiscoverTabSelecterdListener onDiscoverTabSelecterdListener;

	Context mContext;
	ViewPager mViewPager;
	View container ;
	private View slider;
	private  int tabNum   ;
	private  int selectedPage = 0;
	private  int preSelectedPage = 0;
	private  int scrollState;
	private  final int SCROLL_STATE_PRESS = 1;
	private  final int SCROLL_STATE_UP = 2;
	private float unitWidth;
	private float currentPositionPix;
	private boolean isClick = false;
	SectionsPagerAdapter mSectionsPagerAdapter;
	private ArrayList<Class<?>> fragmentList= new ArrayList<Class<?>>();

	private int TabTypeId;
	public TabFragmentIndicator(Context context, AttributeSet attrs) {
		super(context, attrs);
		mContext = context;
	}




	public void setViewPager(ViewPager viewPager,FragmentManager fragmentManager)
	{
		viewPager.setOffscreenPageLimit(1);
		mViewPager = viewPager;
		mViewPager.addOnPageChangeListener(this);
		//		mSectionsPagerAdapter = new SectionsPagerAdapter(((FragmentActivity)mContext).getSupportFragmentManager());
		mSectionsPagerAdapter = new SectionsPagerAdapter(fragmentManager);
		mViewPager.setAdapter(mSectionsPagerAdapter);
	}


	public void addFragment(int index,Class<?> claz)
	{
		fragmentList.add(index, claz);
		if(mSectionsPagerAdapter!=null)
			mSectionsPagerAdapter.notifyDataSetChanged();
	}
	/**
	 * 设置tabview
	 * @param type 0--约会    ，1--发现
	 * @param layoutId
	 */
	public void setTabContainerView(int type,int layoutId){

		container =   LayoutInflater.from(mContext).inflate(layoutId, null);

		TextView one_tab_tv=(TextView) container.findViewById(R.id.one_tab_tv);
		TextView two_tab_tv=(TextView) container.findViewById(R.id.two_tab_tv);
		TabTypeId=type;

		if(type==1){
			one_tab_tv.setText("人");
			two_tab_tv.setText("冒泡");
		}

		this.addView(container, 0);

		int height = (int) getResources().getDimension(R.dimen.tab_height);
		ViewGroup.LayoutParams params = container.getLayoutParams();
		params.height = height;
		container.setLayoutParams(params);


		if(container instanceof ViewGroup)
		{
			tabNum = ((ViewGroup)container).getChildCount();
			for(int i = 0 ;i<tabNum;i++ )
			{
				((ViewGroup)container).getChildAt(i).setTag(i);
				((ViewGroup)container).getChildAt(i).setOnClickListener(this);
			}
		}


	}

	public void setTabSliderView(int tabtype,int layoutId)
	{
		slider = LayoutInflater.from(mContext).inflate(layoutId, null);
		this.addView(slider, 1);
		setCursorWidth(tabtype);
	}

	public View getIndicatorView()
	{
		return container;
	}


	public class SectionsPagerAdapter extends FragmentPagerAdapter {

		public SectionsPagerAdapter(FragmentManager fm) {
			super(fm);
		}

		@Override
		public Fragment getItem(int index) {

			return Fragment.instantiate(mContext, fragmentList.get(index).getName(),null);
		}
		@Override
		public int getCount() {
			return fragmentList.size();
		}
	}


	@Override
	public void onPageSelected(int position) {

		System.out.println("onPageSelected -----"+position);

		System.out.println("onPageSelected -----"+selectedPage);

		((TextView)((ViewGroup)container).getChildAt(selectedPage)).setTextColor(this.getResources().getColor(R.color.text_color_black));
		((TextView)((ViewGroup)container).getChildAt(position)).setTextColor(this.getResources().getColor(R.color.text_color_black));
		if(selectedPage!=position){
			selectedPage = position;
			setClik(position);

			if(TabTypeId==1){
				onDiscoverTabSelecterdListener.onDiscoverTabSelected(position);
			}

		}
	}

	@Override
	public void onPageScrolled(int position,float positionOffset, int positionOffsetPixels) {
		System.out.println("dkd -----"+position);
		System.out.println("positionOffset -----"+positionOffset);
		System.out.println("positionOffsetPixels -----"+positionOffsetPixels);
		//
		//LogUtils.e("positionOffsetPixels"+positionOffsetPixels);
		//LogUtils.e("tab数量"+tabNum);
		//		if(!isClick){
		//			if(positionOffsetPixels != 0){
		//				if(scrollState == SCROLL_STATE_PRESS){//手指按下的状态
		//					if(selectedPage == position){//表示往左拉，相应的tab往右走
		//						slider.setTranslationX(currentPositionPix + positionOffsetPixels / tabNum);
		//						LogUtils.e("11111111111==="+currentPositionPix);
		//					}else{//表示往右拉
		//						slider.setTranslationX(currentPositionPix - (unitWidth - positionOffsetPixels / tabNum));
		//						LogUtils.e("222222");
		//					}
		//				}else if(scrollState == SCROLL_STATE_UP){//手指抬起的状态
		////					System.out.println("preSelectedPage---" + preSelectedPage);
		////					System.out.println("position---" + position);
		//					if(preSelectedPage == position){//往左拉
		//						slider.setTranslationX(currentPositionPix + positionOffsetPixels / tabNum);
		//						LogUtils.e("333333333==="+currentPositionPix);
		//					}else{//表示往右拉
		//						slider.setTranslationX(currentPositionPix - (unitWidth - positionOffsetPixels / tabNum));
		//						LogUtils.e("44444444");
		//					}
		//				}
		//			}
		//		}
	}
	@Override
	public void onPageScrollStateChanged(int state) {
		System.out.println("onPageScrollStateChanged -----"+state);
		//		System.out.println("onPageScrollStateChanged------state" + state);
		//		if(!isClick){
		//			currentPositionPix = selectedPage * unitWidth;
		//			scrollState = state;
		//			preSelectedPage = selectedPage;
		//		}
	}




	@Override
	public void onClick(View v) {
		final int index = (Integer) v.getTag();
		if(selectedPage==index){
			onTabClickListener.onTabClick(v);

			if(TabTypeId==1){
				onDiscoverTabSelecterdListener.onDiscoverTabSelected(index);
			}
			return ;
		}
		setClik(index);


	}

	public void setClik(final int index){




		isClick = true;
		slider.setTranslationX(0);
		TranslateAnimation animation = new TranslateAnimation(selectedPage * unitWidth , index * unitWidth, 0, 0);
		animation.setInterpolator(new AccelerateInterpolator());
		animation.setDuration(100);
		animation.setFillEnabled(true);
		animation.setFillAfter(true);
		slider.startAnimation(animation);



		animation.setAnimationListener(new AnimationListener() {

			@Override
			public void onAnimationStart(Animation animation) {
				mViewPager.setCurrentItem(index, true);
			}
			@Override
			public void onAnimationRepeat(Animation animation) {}

			@Override
			public void onAnimationEnd(Animation animation) {
				slider.clearAnimation();
				slider.setTranslationX(selectedPage * unitWidth);
				isClick = false;
			}
		});
	}



	/**设置cursor的宽度，并获取移动的单位长度float**/
	private void setCursorWidth(int tabtype){
		int cursorWidth=0;
		if(tabtype==0){

			int WS=UnitUtil.getScreenWidthPixels(mContext);
			int dip=(int) UnitUtil.getScreenDIP(mContext);

			if(WS>=1080 && dip==2){
				cursorWidth = UnitUtil.dip2px(255,mContext)/tabNum;
				unitWidth = (float)UnitUtil.dip2px(255,mContext)/tabNum;
			}else{
				cursorWidth = UnitUtil.dip2px(170,mContext)/tabNum;
				unitWidth = (float)UnitUtil.dip2px(170,mContext)/tabNum;
			}

		}else if(tabtype==1){
			cursorWidth = UnitUtil.dip2px(100,mContext)/tabNum;
			unitWidth = (float)UnitUtil.dip2px(100,mContext)/tabNum;
		}

		int cursorHeight = (int) getResources().getDimension(R.dimen.cursor_height);

		ViewGroup.LayoutParams params = slider.getLayoutParams();
		params.height = cursorHeight;
		params.width = cursorWidth;

		slider.setLayoutParams(params);
	}
	/**获取屏幕宽度**/
	private int getWindowWidth(){
		DisplayMetrics dm = new DisplayMetrics();

		((Activity)mContext).getWindowManager().getDefaultDisplay().getMetrics(dm);
		return dm.widthPixels;
	}


	public int getSelectedPosition(){

		return selectedPage;

	}

	public void setTabSelected(int index,int noselectedIndex){
		((TextView)((ViewGroup)container).getChildAt(noselectedIndex)).setTextColor(this.getResources().getColor(R.color.text_color_black));
		((TextView)((ViewGroup)container).getChildAt(index)).setTextColor(this.getResources().getColor(R.color.text_color_black));
	}


	public void setOnTabClickListener(OnTabClickListener onTabClickListener) {
		this.onTabClickListener = onTabClickListener;
	}

	public void setOnDiscoverTabSelecterdListener(OnDiscoverTabSelecterdListener onDiscoverTabSelecterdListener) {
		this.onDiscoverTabSelecterdListener = onDiscoverTabSelecterdListener;
	}


	public interface OnTabClickListener{
		public void onTabClick(View v);
	}

	public interface OnDiscoverTabSelecterdListener{

		public void onDiscoverTabSelected(int tabId);
	}
}
