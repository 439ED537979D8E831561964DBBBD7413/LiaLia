package cn.chono.yopper.adapter;

import android.content.Context;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;
import com.lidroid.xutils.db.sqlite.Selector;
import com.lidroid.xutils.exception.DbException;

import java.util.ArrayList;
import java.util.List;

import cn.chono.yopper.R;
import cn.chono.yopper.Service.Http.OnCallBackFailListener;
import cn.chono.yopper.Service.Http.OnCallBackSuccessListener;
import cn.chono.yopper.Service.Http.RespBean;
import cn.chono.yopper.Service.Http.UserInfoID.UserInfoIDBean;
import cn.chono.yopper.Service.Http.UserInfoID.UserInfoIDRespBean;
import cn.chono.yopper.Service.Http.UserInfoID.UserInfoIDService;
import cn.chono.yopper.YPApplication;
import cn.chono.yopper.YpSettings;
import cn.chono.yopper.data.BaseUser;
import cn.chono.yopper.data.DatingAttamptDto;
import cn.chono.yopper.data.DatingRequestDto;
import cn.chono.yopper.data.MessageDto;
import cn.chono.yopper.data.MessageType;
import cn.chono.yopper.data.TextMsg;
import cn.chono.yopper.glide.CropCircleTransformation;
import cn.chono.yopper.smack.entity.ChatDto;
import cn.chono.yopper.utils.ChatUtils;
import cn.chono.yopper.utils.CheckUtil;
import cn.chono.yopper.utils.ImgUtils;
import cn.chono.yopper.utils.JsonUtils;
import cn.chono.yopper.utils.TimeUtil;

public class StrangeMessageAdapter extends BaseAdapter {
    /**
     * 这个用来填充list
     */
    private List<MessageDto> list;
    /**
     * context上下文,用来获得convertView
     */
    private Context mContext;


    private CropCircleTransformation transformation;

    private BitmapPool mPool;

    public StrangeMessageAdapter(Context context) {
        // 初始化
        mContext = context;

        mPool = Glide.get(context).getBitmapPool();
        transformation = new CropCircleTransformation(mPool);
    }

    public List<MessageDto> getList() {
        return list;
    }

    public void setList(List<MessageDto> list) {
        if (list == null) {
            list = new ArrayList<MessageDto>();
        }
        this.list = list;
        notifyDataSetChanged();
    }

    @Override
    public int getCount() {
        if (list != null) {
            return list.size();
        } else {
            return 0;
        }

    }

    @Override
    public Object getItem(int position) {
        return list.get(position);
    }

    @Override
    public long getItemId(int position) {
        return position;
    }

    @Override
    public View getView(int position, View convertView, ViewGroup parent) {

        final ViewHolder holder;
        // 如果没有设置过,初始化convertView
        convertView = null;

        if (convertView == null) {
            // 获得设置的view
            convertView = LayoutInflater.from(mContext).inflate(R.layout.strange_message_list_item, parent, false);

            // 初始化holder
            holder = new ViewHolder();

            holder.strange_icon_img_iv = (ImageView) convertView.findViewById(R.id.strange_message_item_icon_img_iv);

            holder.strange_name_tv = (TextView) convertView.findViewById(R.id.strange_message_item_name_tv);

            holder.strange_time_tv = (TextView) convertView.findViewById(R.id.strange_message_item_time_tv);

            holder.strange_content_tv = (TextView) convertView.findViewById(R.id.strange_message_item_content_tv);

            holder.strange_num_tv = (TextView) convertView.findViewById(R.id.strange_message_item_num_tv);


            convertView.setTag(holder);

        } else {
            // 有直接获得ViewHolder
            holder = (ViewHolder) convertView.getTag();

        }
        final MessageDto dto = list.get(position);


        String jid = dto.getJid();


        String userid = jid.substring(0, jid.indexOf("@"));


        try {
            BaseUser baseUser = YPApplication.getInstance().db.findFirst(Selector.from(BaseUser.class).where("id", " =", userid));

            if (baseUser != null) {

                holder.strange_name_tv.setText(baseUser.getName() + "");

                String imageurl = ImgUtils.DealImageUrl(baseUser.getHeadImg(), YpSettings.IMG_SIZE_150, YpSettings.IMG_SIZE_150);

                Glide.with(mContext).load(imageurl).bitmapTransform(transformation).into(holder.strange_icon_img_iv);

            } else {

                getUserWithID(userid, holder.strange_icon_img_iv, holder.strange_name_tv);

            }

        } catch (DbException e1) {
            e1.printStackTrace();
        }

        String content = getcontent(dto.getLastmessage(), dto.getS_r_type());


        holder.strange_content_tv.setText(content + "");

        if (dto.getNo_read_num() > 0) {

            if (dto.getNo_read_num() < 10) {
                holder.strange_num_tv.setBackgroundResource(R.drawable.circle_messaga_num_bg);
            } else {
                holder.strange_num_tv.setBackgroundResource(R.drawable.center_messaga_num_bg);
            }

            holder.strange_num_tv.setVisibility(View.VISIBLE);
            holder.strange_num_tv.setText(dto.getNo_read_num() + "");
        } else {
            holder.strange_num_tv.setVisibility(View.GONE);
        }

        // 时间设置

        holder.strange_time_tv.setText(msgTimeFormat(dto.getLasttime()) + "");

        return convertView;

    }

    /**
     * ViewHolder
     *
     * @Title:
     * @Description:主要是避免了不断的view获取初始化.
     * @Since:2015-3-22
     * @Version:
     */
    class ViewHolder {

        public ImageView strange_icon_img_iv;
        public TextView strange_name_tv;

        public TextView strange_time_tv;
        public TextView strange_content_tv;
        public TextView strange_num_tv;

    }


    private String getcontent(String message, int s_r_type) {

        // 文本：文本
        //
        // 表情：[表情]
        //
        // 图片：[图片]
        //
        // P果：[P果]
        //
        // 约会：[约会邀请] 地点
        //
        // 约Ta：[Ta想约你] 地点

        String type = ChatUtils.getMsgType(message);

        String content = "";
        if (TextUtils.equals(type, MessageType.Img)) {
            content = "[图片]";
        } else if (TextUtils.equals(type, MessageType.Appointment)) {
            content = "[约会]";
        } else if (TextUtils.equals(type, MessageType.DatingRequest)) {

            DatingRequestDto datingRequestDto = JsonUtils.fromJson(message, DatingRequestDto.class);
            content = "[约会邀请]" + datingRequestDto.getDating().getContent();

        } else if (TextUtils.equals(type, MessageType.DatingAttampt)) {

            DatingAttamptDto datingAttamptDto = JsonUtils.fromJson(message, DatingAttamptDto.class);
            if (s_r_type == ChatDto.s_type) {
                content = "[约Ta]" + datingAttamptDto.getContent();
            } else {
                content = "[Ta想约你]" + datingAttamptDto.getContent();
            }

        } else if (TextUtils.equals(type, MessageType.DatingResult)) {

            content = "[约会结果]";

        } else if (TextUtils.equals(type, MessageType.Attraction)) {

            content = "[P果]";

        } else {
            // 默认文字
            TextMsg textmsg = JsonUtils.fromJson(message, TextMsg.class);
            if (textmsg != null) {
                content = textmsg.getText();
            }

        }

        return content;

    }

    private String msgTimeFormat(long datetime) {

        String time = "";

        long system_time = System.currentTimeMillis();
        if (TimeUtil.isToday(datetime)) {
            // 是当天

            int min = TimeUtil.getdifMin(datetime, system_time);

            if (min == 0) {
                time = "刚刚";
            } else if (1 <= min && min < 60) {
                time = min + "分钟前";
            } else {
                time = TimeUtil.gethour_minString(datetime);
            }

        } else {
            // 消息时间不是当天
            time = TimeUtil.getDateString(datetime, system_time);
        }

        return time;
    }


    private void getUserWithID(final String id, final ImageView icon_img_iv, final TextView name_tv) {


        UserInfoIDBean infoIDBean = new UserInfoIDBean();
        infoIDBean.setUserId(Integer.valueOf(id));

        UserInfoIDService infoIDService = new UserInfoIDService(mContext);

        infoIDService.parameter(infoIDBean);

        infoIDService.callBack(new OnCallBackSuccessListener() {
            @Override
            public void onSuccess(RespBean respBean) {
                super.onSuccess(respBean);

                UserInfoIDRespBean idRespBean = (UserInfoIDRespBean) respBean;

                BaseUser baseUser = idRespBean.getResp();
                try {
                    name_tv.setText(baseUser.getName() + "");
                    // 绑定数据
                    if (!CheckUtil.isEmpty(baseUser.getHeadImg())) {
                        String imageurl = ImgUtils.DealImageUrl(baseUser.getHeadImg(), YpSettings.IMG_SIZE_150, YpSettings.IMG_SIZE_150);

                        Glide.with(mContext).load(imageurl).bitmapTransform(transformation).into(icon_img_iv);
                    }
                    YPApplication.getInstance().db.save(baseUser);
                } catch (Exception e) {
                    e.printStackTrace();
                }


            }
        }, new OnCallBackFailListener() {
            @Override
            public void onFail(RespBean respBean) {
                super.onFail(respBean);

                name_tv.setText("未知");

            }
        });

        infoIDService.enqueue();


    }


}