package cn.chono.yopper.adapter;

import android.content.Context;
import android.support.v7.widget.RecyclerView;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import com.bumptech.glide.Glide;
import com.bumptech.glide.load.engine.bitmap_recycle.BitmapPool;

import java.util.ArrayList;
import java.util.List;

import cn.chono.yopper.R;
import cn.chono.yopper.Service.Http.Appointments.AppointmentsData;
import cn.chono.yopper.Service.Http.Appointments.AppointmentsOwner;
import cn.chono.yopper.YpSettings;
import cn.chono.yopper.data.Constant;
import cn.chono.yopper.glide.CropCircleTransformation;
import cn.chono.yopper.utils.ISO8601;
import cn.chono.yopper.utils.ImgUtils;
import cn.chono.yopper.utils.TimeUtil;

public class UserAppointAdapter extends RecyclerView.Adapter<UserAppointAdapter.ViewHolder> {

    private List<AppointmentsData> list;

    private Context mContext;

    private CropCircleTransformation transformation;

    private BitmapPool mPool;

    private boolean ishistory = false;

    public interface OnItemClickLitener {
        void onItemClick(View view, int position);

        void onItemUserIconClick(View view, int position);

    }

    private OnItemClickLitener mOnItemClickLitener;

    public void setOnItemClickLitener(OnItemClickLitener mOnItemClickLitener) {
        this.mOnItemClickLitener = mOnItemClickLitener;
    }

    public UserAppointAdapter(Context context) {
        this.mContext = context;
        mPool = Glide.get(context).getBitmapPool();
        transformation = new CropCircleTransformation(mPool);

    }

    public void setData(List<AppointmentsData> list) {
        this.list = list;
    }

    public void addData(List<AppointmentsData> morelist) {
        if (null == list) {
            list = new ArrayList<>();
        }
        list.addAll(morelist);

    }

    public List<AppointmentsData> getDatas() {
        return list;
    }


    @Override
    public ViewHolder onCreateViewHolder(ViewGroup viewGroup, int i) {
        // 给ViewHolder设置布局文件
        View v = LayoutInflater.from(viewGroup.getContext()).inflate(R.layout.user_appoint_list_item, viewGroup, false);
        return new ViewHolder(v);
    }

    @Override
    public void onBindViewHolder(final ViewHolder viewHolder, int i) {
        // 给ViewHolder设置元素

        AppointmentsData appointmentsData = list.get(i);
        AppointmentsOwner owner = appointmentsData.getOwner();

        String imageurl = ImgUtils.DealImageUrl(owner.getHeadImg(), YpSettings.IMG_SIZE_150, YpSettings.IMG_SIZE_150);
        Glide.with(mContext).load(imageurl).bitmapTransform(transformation).into(viewHolder.appoint_user_icon_iv);

        int activityType = appointmentsData.getActivityType();
        switch (activityType) {
            case Constant.APPOINT_TYPE_EAT:

                viewHolder.appoint_type_iv.setImageResource(R.drawable.chat_appoint_eat);

                viewHolder.appoint_content_iv.setImageResource(R.drawable.appoint_item_address_icon);
                break;

            case Constant.APPOINT_TYPE_COFFEE:

                viewHolder.appoint_type_iv.setImageResource(R.drawable.chat_appoint_coffee);
                viewHolder.appoint_content_iv.setImageResource(R.drawable.appoint_item_address_icon);
                break;

            case Constant.APPOINT_TYPE_BAR:

                viewHolder.appoint_type_iv.setImageResource(R.drawable.chat_appoint_bar);
                viewHolder.appoint_content_iv.setImageResource(R.drawable.appoint_item_address_icon);
                break;

            case Constant.APPOINT_TYPE_MOVIE:
                viewHolder.appoint_type_iv.setImageResource(R.drawable.chat_appoint_movie);
                viewHolder.appoint_content_iv.setImageResource(R.drawable.appoint_item_movice_icon);

                break;

            case Constant.APPOINT_TYPE_DOG:
                viewHolder.appoint_type_iv.setImageResource(R.drawable.chat_appoint_dog);
                viewHolder.appoint_content_iv.setImageResource(R.drawable.appoint_item_address_icon);
                break;


            case Constant.APPOINT_TYPE_FITNESS:
                viewHolder.appoint_type_iv.setImageResource(R.drawable.chat_appoint_fitness);
                viewHolder.appoint_content_iv.setImageResource(R.drawable.appoint_item_address_icon);
                break;

            case Constant.APPOINT_TYPE_KTV:
                viewHolder.appoint_type_iv.setImageResource(R.drawable.chat_appoint_ktv);
                viewHolder.appoint_content_iv.setImageResource(R.drawable.appoint_item_address_icon);
                break;


        }

        viewHolder.appoint_tiem_iv.setImageResource(R.drawable.appoint_item_time_icon);

        viewHolder.appoint_type_name_tv.setText(appointmentsData.getTitle());
        viewHolder.appoint_content_name_tv.setText(appointmentsData.getContent());

        long endtime= ISO8601.getTime(appointmentsData.getEndTime());
        String timeStr=TimeUtil.getDatingDateString(endtime,System.currentTimeMillis());

        int availableTime = appointmentsData.getAvailableTime();

        String availableTimeStr = "";

        switch (availableTime) {
            case 1:
                availableTimeStr = "  上午";
                break;
            case 2:
                availableTimeStr = "  下午";
                break;
            case 3:
                availableTimeStr = "  晚上";
                break;
        }

        if(!timeStr.contains("今天")){
            timeStr=timeStr+"之前";
        }

        viewHolder.appoint_tiem_tv.setText(timeStr + availableTimeStr);


        viewHolder.appoint_evaluation_appointmemt_status_tv.setText(appointmentsData.getStatusText());

        int commentStatus = appointmentsData.getCommentStatus();
        switch (commentStatus) {
            case 0:
                viewHolder.appoint_evaluation_but.setVisibility(View.INVISIBLE);
                break;
            case 1:
                viewHolder.appoint_evaluation_but.setVisibility(View.VISIBLE);
                viewHolder.appoint_evaluation_but.setText("等待评价");
                viewHolder.appoint_evaluation_but.setBackgroundResource(R.drawable.corners_orange_selected_style);
                viewHolder.appoint_evaluation_but.setTextColor(mContext.getResources().getColor(R.color.text_color_white));
                break;

            case 2:
                viewHolder.appoint_evaluation_but.setVisibility(View.VISIBLE);
                viewHolder.appoint_evaluation_but.setText("已评价");
                viewHolder.appoint_evaluation_but.setBackgroundResource(R.drawable.b2b2b2_border_corners_ffffff_selected_style);
                viewHolder.appoint_evaluation_but.setTextColor(mContext.getResources().getColor(R.color.text_color_9a9a9a));
                break;
        }
        final int pos = viewHolder.getLayoutPosition();

        // 如果设置了回调，则设置点击事件
        if (mOnItemClickLitener != null) {
            viewHolder.itemView.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View v) {

                    mOnItemClickLitener.onItemClick(viewHolder.itemView, pos);
                }
            });
            viewHolder.appoint_user_icon_iv.setOnClickListener(new OnClickListener() {
                @Override
                public void onClick(View v) {
                    mOnItemClickLitener.onItemUserIconClick(viewHolder.appoint_user_icon_iv, pos);
                }
            });
        }

    }



    @Override
    public int getItemCount() {
        // 返回数据总数
        return list == null ? 0 : list.size();
    }

    // 重写的自定义ViewHolder
    public static class ViewHolder extends RecyclerView.ViewHolder {

        private ImageView appoint_user_icon_iv;

        private ImageView appoint_type_iv;
        private TextView appoint_type_name_tv;


        private ImageView appoint_content_iv;
        private TextView appoint_content_name_tv;

        private ImageView appoint_tiem_iv;
        private TextView appoint_tiem_tv;

        private TextView appoint_evaluation_but;
        private TextView appoint_evaluation_appointmemt_status_tv;


        public ViewHolder(View v) {
            super(v);

            appoint_user_icon_iv = (ImageView) v.findViewById(R.id.appoint_user_icon_iv);

            appoint_type_iv = (ImageView) v.findViewById(R.id.appoint_type_iv);
            appoint_type_name_tv = (TextView) v.findViewById(R.id.appoint_type_name_tv);

            appoint_content_iv = (ImageView) v.findViewById(R.id.appoint_content_iv);
            appoint_content_name_tv = (TextView) v.findViewById(R.id.appoint_content_name_tv);


            appoint_tiem_iv = (ImageView) v.findViewById(R.id.appoint_tiem_iv);
            appoint_tiem_tv = (TextView) v.findViewById(R.id.appoint_tiem_tv);

            appoint_evaluation_but = (TextView) v.findViewById(R.id.appoint_evaluation_but);
            appoint_evaluation_appointmemt_status_tv = (TextView) v.findViewById(R.id.appoint_evaluation_appointmemt_status_tv);


        }
    }


}
