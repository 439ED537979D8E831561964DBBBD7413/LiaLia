package cn.chono.yopper.activity.base;

import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.provider.Settings;
import android.text.TextUtils;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.LinearLayout;

import com.umeng.analytics.AnalyticsConfig;
import com.umeng.analytics.MobclickAgent;
import com.umeng.message.PushAgent;

import cn.chono.yopper.MainFrameActivity;
import cn.chono.yopper.R;
import cn.chono.yopper.YPApplication;
import cn.chono.yopper.location.Loc;
import cn.chono.yopper.utils.ActivityUtil;
import cn.chono.yopper.utils.BackCallListener;
import cn.chono.yopper.utils.DialogUtil;
import cn.chono.yopper.utils.SharedprefUtil;

/**
 * @ClassName: StartActivity
 * @Description:程序的入口，启动页（闪屏页）
 * @author: xianbin.zou
 * @date: 2015年3月12日 上午9:37:21
 */
public class StartActivity extends MainFrameActivity {
    /**
     * 上下文对象
     */
    private Context context;

    /**
     * 动画效果
     */
    private Animation animation;

    private Dialog dialog;

    private boolean isDlocking = false;

    private static final int mSleepTime = 1500; // 闪屏停留的时间

    private LinearLayout start_root_layout;

    private boolean haveGpsTag;
    /**
     * 跳转至首页线程
     */
    private Runnable mToIndexRunnable = new Runnable() {
        @Override
        public void run() {
            try {
                // 固定时间后跳转至首页
                Thread.sleep(mSleepTime);
                splashHandler.sendEmptyMessage(0);
            } catch (Exception e) {
                splashHandler.sendEmptyMessage(0);
            }
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentLayout(R.layout.start_activity);
        // 上下文对象
        context = this;
        /** 友盟设置是否对日志信息进行加密, 默认false(不加密). */
        AnalyticsConfig.enableEncrypt(true);
        MobclickAgent.updateOnlineConfig(this);
        PushAgent.getInstance(this).onAppStart();
        getTitleLayout().setVisibility(View.GONE);// 隐藏标题
        start_root_layout = (LinearLayout) findViewById(R.id.start_root_layout);
        isMzMoble();// 此方法必须在start_root_layout初始化之后.判断是否是魅族手机

    }

    /**
     * 判断是否是魅族手机
     */
    private void isMzMoble() {
//        // 判断是否是魅族手机
//        if (UnitUtil.checkDeviceHasNavigationBar(StartActivity.this)) {
//
//            start_root_layout.setBackgroundResource(R.drawable.mx_start_img);
//
//        } else {
//            start_root_layout.setBackgroundResource(R.drawable.start_img);
//        }
        // 防止点击事件传递到桌面
        start_root_layout.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {

            }
        });
    }

    @Override
    protected void onResume() {
        super.onResume();
        MobclickAgent.onPageStart("启动页"); // 统计页面(仅有Activity的应用中SDK自动调用，不需要单独写)
        MobclickAgent.onResume(this); // 统计时长

        // 获得位置
        haveGpsTag = Loc.isGpsAvailable();
        if (!haveGpsTag) {
            isDlocking = true;
            dialog = DialogUtil.createHintOperateDialog(StartActivity.this, "定位服务未开启", "开启定位服务以看到附近用户", "取消", "立即开启", locbackCallListener);
            dialog.setCanceledOnTouchOutside(false);// 设置点击屏幕Dialog不消失
            if (!isFinishing()) {
                dialog.show();
            }
        } else {
            Loc.sendLocControlMessage(true);
        }

        new Thread(mToIndexRunnable).start();
        startAnimation();


    }

    @Override
    protected void onPause() {
        super.onPause();
        MobclickAgent.onPageEnd("启动页"); // 统计页面(仅有Activity的应用中SDK自动调用，不需要单独写)
        MobclickAgent.onPause(this); // 统计时长
        Loc.sendLocControlMessage(false);
    }

    private void startAnimation() {

        // 设置动画效果是alpha，在anim目录下的alpha.xml文件中定义动画效果
        animation = AnimationUtils.loadAnimation(context, R.anim.alpha);
        // 给view设置动画效果
        start_root_layout.startAnimation(animation);

    }

    private Handler splashHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {

            if (!isDlocking) {
                // 如果没有登录，则进入引导页WelcomeActivity
                String StartCode = SharedprefUtil.get(context, YPApplication.getInstance().StartCode, "");

                if (TextUtils.equals(StartCode,YPApplication.getInstance().versionName)) {// 相同时不进引导页
                    String authToken = YPApplication.loginUser.getAuthToken();

                    if (TextUtils.isEmpty(authToken)) {

                        ActivityUtil.jump(StartActivity.this, SelectEntryActivity.class, null, 0, 100);
                        finish();
                        return;
                    }
                    // 已经登录
                    ActivityUtil.jump(StartActivity.this, IndexActivity.class, null, 0, 100);
                    finish();
                    return;
                }
                // 引导页
                ActivityUtil.jump(StartActivity.this, WelcomeActivity.class,
                        null, 0, 100);
                finish();

            }

            super.handleMessage(msg);
        }
    };

    @Override
    protected void onDestroy() {
        if (splashHandler != null) {
            splashHandler.removeCallbacksAndMessages(null);
        }
        super.onDestroy();
    }

    private BackCallListener locbackCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {
            if (!isFinishing()) {
                dialog.dismiss();
            }
            isDlocking = false;
            try {
                Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                startActivity(intent);
            } catch (Exception e) {
                Intent intent = new Intent(Settings.ACTION_SETTINGS);
                startActivity(intent);
            }
        }

        @Override
        public void onCancel(View view, Object... obj) {
            isDlocking = false;
            splashHandler.sendEmptyMessage(0);
            if (!isFinishing()) {
                dialog.dismiss();
            }

        }
    };

}
