package cn.chono.yopper.extractmpegframes.outputsurface;

import android.annotation.TargetApi;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Matrix;
import android.graphics.SurfaceTexture;
import android.opengl.EGL14;
import android.opengl.EGLConfig;
import android.opengl.EGLContext;
import android.opengl.EGLDisplay;
import android.opengl.EGLSurface;
import android.opengl.GLES20;
import android.os.Build;
import android.util.Log;
import android.view.Surface;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;

import cn.chono.yopper.extractmpegframes.render.STextureRender;

/**
 * Holds state associated with a Surface used for MediaCodec decoder output.
 * <p/>
 * The constructor for this class will prepare GL, create a SurfaceTexture, and
 * then create a Surface for that SurfaceTexture. The Surface can be passed to
 * MediaCodec.configure() to receive decoder output. When a frame arrives, we
 * latch the texture with updateTexImage(), then render the texture with GL to a
 * pbuffer.
 * <p/>
 * By default, the Surface will be using a BufferQueue in asynchronous mode, so
 * we can potentially drop frames.
 */

public class CodecOutputSurface implements SurfaceTexture.OnFrameAvailableListener {
    private static final String TAG = CodecOutputSurface.class.getSimpleName();
    private STextureRender mTextureRender;
    private SurfaceTexture mSurfaceTexture;
    private Surface mSurface;

    private EGLDisplay mEGLDisplay = EGL14.EGL_NO_DISPLAY;
    private EGLContext mEGLContext = EGL14.EGL_NO_CONTEXT;
    private EGLSurface mEGLSurface = EGL14.EGL_NO_SURFACE;
    int mWidth;
    int mHeight;

    private ByteBuffer mPixelBuf; // used by saveFrame()
    private boolean VERBOSE = false;

    /**
     * Creates a CodecOutputSurface backed by a pbuffer with the specified
     * dimensions.
     * <p/>
     * The new EGL context and surface will be made current. Creates a Surface
     * that can be passed
     * <p/>
     * to MediaCodec.configure().
     */
    public CodecOutputSurface(int width, int height) {
        if (width <= 0 || height <= 0) {
            throw new IllegalArgumentException();
        }
        mWidth = width;
        mHeight = height;

        eglSetup();
        makeCurrent();
        setup();
    }

    /**
     * Creates interconnected instances of TextureRender, SurfaceTexture, and
     * Surface.
     */
    private void setup() {
        mTextureRender = new STextureRender();
        mTextureRender.surfaceCreated();

        if (VERBOSE)
            Log.d(TAG, "textureID=" + mTextureRender.getTextureId());
        mSurfaceTexture = new SurfaceTexture(mTextureRender.getTextureId());

        // This doesn't work if this object is created on the thread that
        // CTS started for
        // these test cases.
        //
        // The CTS-created thread has a Looper, and the SurfaceTexture
        // constructor will
        // create a Handler that uses it. The "frame available" message is
        // delivered
        // there, but since we're not a Looper-based thread we'll never see
        // it. For
        // this to do anything useful, CodecOutputSurface must be created on
        // a thread without
        // a Looper, so that SurfaceTexture uses the main application Looper
        // instead.
        //
        // Java language note: passing "this" out of a constructor is
        // generally unwise,
        // but we should be able to get away with it here.
        mSurfaceTexture.setOnFrameAvailableListener(this);

        mSurface = new Surface(mSurfaceTexture);

        mPixelBuf = ByteBuffer.allocateDirect(mWidth * mHeight * 4);
        mPixelBuf.order(ByteOrder.LITTLE_ENDIAN);
    }

    /**
     * Prepares EGL. We want a GLES 2.0 context and a surface that supports
     * pbuffer.
     */
    private void eglSetup() {
        mEGLDisplay = EGL14.eglGetDisplay(EGL14.EGL_DEFAULT_DISPLAY);
        if (mEGLDisplay == EGL14.EGL_NO_DISPLAY) {
            throw new RuntimeException("unable to get EGL14 display");
        }
        int[] version = new int[2];
        if (!EGL14.eglInitialize(mEGLDisplay, version, 0, version, 1)) {
            mEGLDisplay = null;
            throw new RuntimeException("unable to initialize EGL14");
        }

        // Configure EGL for pbuffer and OpenGL ES 2.0, 24-bit RGB.
        int[] attribList = {EGL14.EGL_RED_SIZE, 8, EGL14.EGL_GREEN_SIZE, 8,
                EGL14.EGL_BLUE_SIZE, 8, EGL14.EGL_ALPHA_SIZE, 8,
                EGL14.EGL_RENDERABLE_TYPE, EGL14.EGL_OPENGL_ES2_BIT,
                EGL14.EGL_SURFACE_TYPE, EGL14.EGL_PBUFFER_BIT, EGL14.EGL_NONE};
        EGLConfig[] configs = new EGLConfig[1];
        int[] numConfigs = new int[1];
        if (!EGL14.eglChooseConfig(mEGLDisplay, attribList, 0, configs, 0,
                configs.length, numConfigs, 0)) {
            throw new RuntimeException(
                    "unable to find RGB888+recordable ES2 EGL config");
        }

        // Configure context for OpenGL ES 2.0.
        int[] attrib_list = {EGL14.EGL_CONTEXT_CLIENT_VERSION, 2,
                EGL14.EGL_NONE};
        mEGLContext = EGL14.eglCreateContext(mEGLDisplay, configs[0],
                EGL14.EGL_NO_CONTEXT, attrib_list, 0);
        checkEglError("eglCreateContext");
        if (mEGLContext == null) {
            throw new RuntimeException("null context");
        }

        // Create a pbuffer surface.
        int[] surfaceAttribs = {EGL14.EGL_WIDTH, mWidth, EGL14.EGL_HEIGHT,
                mHeight, EGL14.EGL_NONE};
        mEGLSurface = EGL14.eglCreatePbufferSurface(mEGLDisplay, configs[0],
                surfaceAttribs, 0);
        checkEglError("eglCreatePbufferSurface");
        if (mEGLSurface == null) {
            throw new RuntimeException("surface was null");
        }
    }

    /**
     * Discard all resources held by this class, notably the EGL context.
     */
    public void release() {
        if (mEGLDisplay != EGL14.EGL_NO_DISPLAY) {
            EGL14.eglDestroySurface(mEGLDisplay, mEGLSurface);
            EGL14.eglDestroyContext(mEGLDisplay, mEGLContext);
            EGL14.eglReleaseThread();
            EGL14.eglTerminate(mEGLDisplay);
        }
        mEGLDisplay = EGL14.EGL_NO_DISPLAY;
        mEGLContext = EGL14.EGL_NO_CONTEXT;
        mEGLSurface = EGL14.EGL_NO_SURFACE;

        mSurface.release();

        // this causes a bunch of warnings that appear harmless but might
        // confuse someone:
        // W BufferQueue: [unnamed-3997-2] cancelBuffer: BufferQueue has
        // been abandoned!
        // mSurfaceTexture.release();

        mTextureRender = null;
        mSurface = null;
        mSurfaceTexture = null;
    }

    /**
     * Makes our EGL context and surface current.
     */
    public void makeCurrent() {
        if (!EGL14.eglMakeCurrent(mEGLDisplay, mEGLSurface, mEGLSurface,
                mEGLContext)) {
            throw new RuntimeException("eglMakeCurrent failed");
        }
    }

    /**
     * Returns the Surface.
     */
    public Surface getSurface() {
        return mSurface;
    }

    /**
     * Latches the next buffer into the texture. Must be called from the thread
     * that created the CodecOutputSurface object. (More specifically, it must
     * be called on the thread with the EGLContext that contains the GL texture
     * object used by SurfaceTexture.)
     */
    public void awaitNewImage() {
        mSurfaceTexture.updateTexImage();
    }

    /**
     * Draws the data from SurfaceTexture onto the current EGL surface.
     *
     * @param invert if set, render the image with Y inverted (0,0 in top left)
     */
    public void drawImage(boolean invert) {
        mTextureRender.drawFrame(mSurfaceTexture, invert);
    }

    // SurfaceTexture callback
    @Override
    public void onFrameAvailable(SurfaceTexture st) {
        Log.d(TAG, " new frame available");
    }

    /**
     * Saves the current frame to disk as a PNG image.
     */
    public Bitmap saveFrame() throws IOException {
        mPixelBuf.rewind();
        GLES20.glReadPixels(0, 0, mWidth, mHeight, GLES20.GL_RGBA,
                GLES20.GL_UNSIGNED_BYTE, mPixelBuf);

        Bitmap bmp = Bitmap.createBitmap(mWidth, mHeight, Bitmap.Config.ARGB_8888);
        mPixelBuf.rewind();
        bmp.copyPixelsFromBuffer(mPixelBuf);
        return bmp;
    }

    /**
     * Saves the current frame to disk as a PNG image.
     */
    public byte[] saveFrameBitmap() throws IOException {
        Bitmap bitmap = saveFrame();

        int bitmapWidth = bitmap.getWidth();
        int bitmapHeight = bitmap.getHeight();
        int width = 320;
        int height = 320;

        // 缩放图片的尺寸
        float scaleWidth = (float) width / bitmapWidth;
        float scaleHeight = (float) height / bitmapHeight;

        Matrix matrix = new Matrix();
        matrix.postScale(scaleWidth, scaleHeight);
        // 产生缩放后的Bitmap对象
        Bitmap resizeBitmap = Bitmap.createBitmap(bitmap, 0, 0, bitmapWidth, bitmapHeight, matrix, false);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();

        resizeBitmap.compress(Bitmap.CompressFormat.JPEG, 80, baos);

        bitmap.recycle();
        resizeBitmap.recycle();
        System.gc();

        return baos.toByteArray();
    }

    /**
     * Checks for EGL errors.
     */
    private void checkEglError(String msg) {
        int error;
        if ((error = EGL14.eglGetError()) != EGL14.EGL_SUCCESS) {
            throw new RuntimeException(msg + ": EGL error: 0x"
                    + Integer.toHexString(error));
        }
    }


}
