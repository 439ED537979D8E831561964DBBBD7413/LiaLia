package cn.chono.yopper.wxapi;

import java.io.ByteArrayOutputStream;

import android.app.Activity;
import android.content.Context;
import android.content.Intent;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.Bitmap.CompressFormat;
import android.graphics.BitmapFactory;
import android.text.TextUtils;
import cn.chono.yopper.utils.CheckUtil;
import cn.chono.yopper.utils.ContextUtil;
import cn.chono.yopper.utils.DealImgUtils;
import cn.chono.yopper.utils.DialogUtil;

import com.tencent.connect.common.Constants;
import com.tencent.mm.sdk.constants.Build;
import com.tencent.mm.sdk.modelmsg.SendAuth;
import com.tencent.mm.sdk.modelmsg.SendMessageToWX;
import com.tencent.mm.sdk.modelmsg.WXMediaMessage;
import com.tencent.mm.sdk.modelmsg.WXWebpageObject;
import com.tencent.mm.sdk.openapi.IWXAPI;
import com.tencent.mm.sdk.openapi.IWXAPIEventHandler;
import com.tencent.mm.sdk.openapi.WXAPIFactory;

/**
 * 微信工具类
 *
 * @author SQ
 */
public class WeixinUtils {
	// private static boolean DEBUG = Settings.DEBUG;wx50ec9bdb8dc39fde
	private static String APP_ID = "wxacd602afd29c9038";
	// 在微信注册的appId（正式版)



	// appkey:c5f0f20147602417cd521f2aba810f31
	// //在微信注册的appId(测试版) 如果是测试版，会在initWeixin里面把APP_ID改成APP_ID_test

	private static final int TIMELINE_SUPPORTED_VERSION = 0x21020001; // 微信支持分享到朋友圈的最低版本

	private static IWXAPI api; // IWXAPI是第三方app和微信通信的openapi接口

	public static String weiXinLoginState = "";

	private static final int THUMB_SIZE = 150;


	public static SendAuth.Resp weiXin_sendAuth;




	/**
	 * 初始化微信api
	 *
	 * @param context
	 */
	public static void initWeixin(Context context) {
		try {
			// 如果是测试版使用测试版app_id
			// if (DEBUG == true)
			// APP_ID = APP_ID_TEST;
			// 通过WXAPIFactory工厂，获取IWXAPI的实例
			api = WXAPIFactory.createWXAPI(context, APP_ID, true);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 检查用户手机端是否可使用微信分享
	 *
	 * @return
	 */
	public static boolean isWeixinAvailable() {
		try {
			if (api == null) {
				return false;
			}
			return api.isWXAppInstalled();// && api.isWXAppSupportAPI();
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * 检查用户手机端是否可使用微信支付
	 *
	 */
	public static boolean isWeixinPay() {
		try {
			if (api == null) {
				return false;
			}
			boolean isPaySupported = api.getWXAppSupportAPI() >= Build.PAY_SUPPORTED_SDK_INT;
			return isPaySupported;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}


	// 微信登录
	public static void WeixinLogin(Activity ativity) throws Exception{

			if (isWeixinAvailable()) {
				final SendAuth.Req req = new SendAuth.Req();
				req.scope = "snsapi_userinfo";
				weiXinLoginState = CheckUtil.randomString(5) + "_session";
				req.state = weiXinLoginState;
				api.sendReq(req);
			}

	}

	/**
	 * 注册微信app，注册成功后该应用将显示在微信的app列表中
	 *
	 * @return
	 */
	public static boolean regWeixin() {
		try {
			if (api == null || !isWeixinAvailable()) {
				return false;
			}
			return api.registerApp(APP_ID);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * 反注册微信app，成功后将不再显示在微信的app列表中
	 */
	public static void unregWeixin() {
		try {
			if (api == null || !isWeixinAvailable()) {
				return;
			}
			api.unregisterApp();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 用户手机的微信版本是否支持发送到朋友圈
	 *
	 * @return
	 */
	public static boolean isTimelineSupported() {
		try {
			if (api == null || !isWeixinAvailable()) {
				return false;
			}
			int wxSdkVersion = api.getWXAppSupportAPI();
			return wxSdkVersion >= TIMELINE_SUPPORTED_VERSION;
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * 打开用户手机端的微信程序
	 *
	 * @return
	 */
	public static boolean openWeixin() {
		try {
			if (api == null || !isWeixinAvailable()) {
				return false;
			}
			return api.openWXApp();
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * 处理微信回调
	 *
	 * @param intent
	 * @param handler
	 * @return
	 */
	public static boolean handleIntent(Intent intent, IWXAPIEventHandler handler) {
		try {
			if (api == null || !isWeixinAvailable()) {
				return false;
			}
			return api.handleIntent(intent, handler);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * 处理支付微信回调
	 *
	 * @param intent
	 * @param handler
	 * @return
	 */
	public static boolean handlePayIntent(Intent intent,
										  IWXAPIEventHandler handler) {
		try {
			if (api == null || !isWeixinPay()) {
				return false;
			}
			return api.handleIntent(intent, handler);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}



	/**
	 * 分享内容到微信
	 *
	 * @return
	 */
	public static void sendTextAndPicture(String title, String description,
										  String imageUrl, String webUrl,Bitmap  bmp) {
		try {
			if (api == null || !isWeixinAvailable()
					|| TextUtils.isEmpty(description)) {
				return ;

			}
			// 初始化一个WXTextObject对象
			// ----
			// ImageLoader imageLoader = ImageLoader.getInstance();
			// imageLoader.
			byte[] b = new byte[] {};
			// FileObject f = FileCacheUtil.getInstance().get("MyImageView",
			// imageUrl);
			// if (f != null) {
			// b = f.getContent();
			// }
			// ----
			WXWebpageObject obj = new WXWebpageObject();
			obj.webpageUrl = webUrl;

			// ----
			WXMediaMessage msg = new WXMediaMessage();
			msg.mediaObject = obj;
			// 发送文本类型的消息时，title字段不起作用
			// msg.title = "Will be ignored";
			msg.title = title;
			msg.description = description;


			Bitmap thumbBmp = Bitmap.createScaledBitmap(bmp, THUMB_SIZE, THUMB_SIZE, true);
			bmp.recycle();
			msg.thumbData = DealImgUtils.bmpToByteArray(thumbBmp, true);
			// 构造一个Req
			SendMessageToWX.Req req = new SendMessageToWX.Req();
			req.transaction = buildTransaction("TextAndPicture"); // transaction字段用于唯一标识一个请求
			req.message = msg;
			req.scene = SendMessageToWX.Req.WXSceneSession;

			// 调用api接口发送数据到微信
			api.sendReq(req);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * 分享内容到微信朋友圈
	 */
	public static void sendFriendTextAndPicture(String title,
												String description, String imageUrl, String webUrl,Bitmap bmp) {
		try {
			if (api == null || !isWeixinAvailable()
					|| TextUtils.isEmpty(description)) {
				return ;
			}
			WXWebpageObject obj = new WXWebpageObject();
			obj.webpageUrl = webUrl;
			// ----
			WXMediaMessage msg = new WXMediaMessage();
			msg.mediaObject = obj;
			msg.title = title;
			msg.description = description;





			Bitmap thumbBmp = Bitmap.createScaledBitmap(bmp, THUMB_SIZE, THUMB_SIZE, true);
			bmp.recycle();
			msg.thumbData = DealImgUtils.bmpToByteArray(thumbBmp, true);


			//			Bitmap bmp = BitmapFactory.decodeStream(new URL(imageUrl).openStream());
			//			Bitmap thumbBmp = Bitmap.createScaledBitmap(bmp, 150, 150, true);
			//			bmp.recycle();
			//			msg.thumbData = bmpToByteArray(thumbBmp, true);

			// msg.thumbData = b;
			// 构造一个Req
			SendMessageToWX.Req req = new SendMessageToWX.Req();
			req.transaction = buildTransaction("friendTextAndPicture"); // transaction字段用于唯一标识一个请求
			req.message = msg;
			req.scene = SendMessageToWX.Req.WXSceneTimeline;
			// 调用api接口发送数据到微信
			api.sendReq(req);
		} catch (Exception e) {
			e.printStackTrace();

		}
	}



	/**
	 * 分享网页到微信
	 *
	 * @param url
	 * @param title
	 * @param desc
	 * @return
	 */
	public static boolean sendWebpage(String url, String title, String desc) {
		try {
			if (api == null || !isWeixinAvailable() || TextUtils.isEmpty(url)) {
				return false;
			}
			WXWebpageObject webpage = new WXWebpageObject();
			webpage.webpageUrl = url;

			WXMediaMessage msg = new WXMediaMessage(webpage);
			msg.title = title;
			msg.description = desc;

			SendMessageToWX.Req req = new SendMessageToWX.Req();
			req.transaction = buildTransaction("webpage");
			req.message = msg;
			req.scene = SendMessageToWX.Req.WXSceneSession;
			return api.sendReq(req);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	/**
	 * 分享内容到微信
	 *
	 * @return
	 */
	public static boolean sendBumpAndPicture(Context context, String title,
											 String description, int imageUrl, String webUrl) {
		try {
			if (api == null || !isWeixinAvailable()
					|| TextUtils.isEmpty(description)) {
				return false;

			}
			// 初始化一个WXTextObject对象
			// ----
			// ImageLoader imageLoader = ImageLoader.getInstance();
			// imageLoader.
			byte[] b = new byte[] {};
			// FileObject f = FileCacheUtil.getInstance().get("MyImageView",
			// imageUrl);
			// if (f != null) {
			// b = f.getContent();
			// }
			// ----
			WXWebpageObject obj = new WXWebpageObject();
			obj.webpageUrl = webUrl;

			// ----
			WXMediaMessage msg = new WXMediaMessage();
			msg.mediaObject = obj;
			// 发送文本类型的消息时，title字段不起作用
			// msg.title = "Will be ignored";
			msg.title = title;
			msg.description = description;
			// msg.thumbData = b;
			Bitmap bitmap = BitmapFactory.decodeResource(
					context.getResources(), imageUrl);
			msg.setThumbImage(bitmap);
			// 构造一个Req
			SendMessageToWX.Req req = new SendMessageToWX.Req();
			req.transaction = buildTransaction("TextAndPicture"); // transaction字段用于唯一标识一个请求
			req.message = msg;
			req.scene = SendMessageToWX.Req.WXSceneSession;

			// 调用api接口发送数据到微信
			return api.sendReq(req);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}

	private static String buildTransaction(final String type) {
		return (type == null) ? String.valueOf(System.currentTimeMillis())
				: type + System.currentTimeMillis();
	}

	public static Bitmap getBitmapFromResources(int resId) {
		Resources res = ContextUtil.getContext().getResources();
		return BitmapFactory.decodeResource(res, resId);
	}



	public static byte[] bmpToByteArray(final Bitmap bmp, final boolean needRecycle) {
		ByteArrayOutputStream output = new ByteArrayOutputStream();
		bmp.compress(CompressFormat.JPEG, 100, output);
		if (needRecycle) {
			bmp.recycle();
		}

		byte[] result = output.toByteArray();
		try {
			output.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		return result;
	}



	private static String GET_REQUEST_USER_INFO =
			"https://api.weixin.qq.com/sns/userinfo?access_token=ACCESS_TOKEN&openid=OPENID";



	public static String getUserInfoURL(String token,String openId ){
		String getUserInfoURL = GET_REQUEST_USER_INFO.replace("ACCESS_TOKEN", token).
				replace("OPENID", openId);
		return getUserInfoURL;
	}
}
