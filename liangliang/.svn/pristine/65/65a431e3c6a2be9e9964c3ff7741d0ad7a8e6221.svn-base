package cn.chono.yopper.activity.base;

import android.app.Dialog;
import android.content.Intent;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.SystemClock;
import android.provider.Settings;
import android.support.v7.widget.DefaultItemAnimator;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.view.animation.Animation;
import android.view.animation.LinearInterpolator;
import android.view.animation.RotateAnimation;
import android.widget.AbsListView;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.baidu.mapapi.model.LatLng;
import com.lidroid.xutils.util.LogUtils;

import java.util.ArrayList;
import java.util.List;

import cn.chono.yopper.MainFrameActivity;
import cn.chono.yopper.R;
import cn.chono.yopper.Service.Http.DaingsNearest.DaingsNearestBean;
import cn.chono.yopper.Service.Http.DaingsNearest.DaingsNearestRespBean;
import cn.chono.yopper.Service.Http.DaingsNearest.DaingsNearestService;
import cn.chono.yopper.Service.Http.DaingsNearestMore.DaingsNearestMoreBean;
import cn.chono.yopper.Service.Http.DaingsNearestMore.DaingsNearestMoreRespBean;
import cn.chono.yopper.Service.Http.DaingsNearestMore.DaingsNearestMoreService;
import cn.chono.yopper.Service.Http.DatingRequirment.DatingRequirmentBean;
import cn.chono.yopper.Service.Http.DatingRequirment.DatingRequirmentRespBean;
import cn.chono.yopper.Service.Http.DatingRequirment.DatingRequirmentService;
import cn.chono.yopper.Service.Http.OnCallBackFailListener;
import cn.chono.yopper.Service.Http.OnCallBackSuccessListener;
import cn.chono.yopper.Service.Http.RespBean;
import cn.chono.yopper.YPApplication;
import cn.chono.yopper.YpBaseFragment;
import cn.chono.yopper.YpSettings;
import cn.chono.yopper.activity.appointment.AppointPublishTypeSelectActivity;
import cn.chono.yopper.activity.appointment.AppointmentDetailActivity;
import cn.chono.yopper.activity.appointment.AppointmentFilterActivity;
import cn.chono.yopper.activity.usercenter.UserInfoActivity;
import cn.chono.yopper.adapter.AppointListAdapter;
import cn.chono.yopper.data.AppointFilterDto;
import cn.chono.yopper.data.AppointListDto;
import cn.chono.yopper.data.AppointmentDto;
import cn.chono.yopper.data.Constant;
import cn.chono.yopper.data.DatingRequirementListDto;
import cn.chono.yopper.data.DatingRequirment;
import cn.chono.yopper.location.Loc;
import cn.chono.yopper.location.LocInfo;
import cn.chono.yopper.utils.ActivityUtil;
import cn.chono.yopper.utils.BackCallListener;
import cn.chono.yopper.utils.CheckUtil;
import cn.chono.yopper.utils.DbHelperUtils;
import cn.chono.yopper.utils.DialogUtil;
import cn.chono.yopper.utils.JsonUtils;
import cn.chono.zxb.xrefreshview.CustomHeaderAnim;
import cn.chono.zxb.xrefreshview.XRefreshView;

public class AppointmentFragment extends YpBaseFragment implements OnClickListener,AppointListAdapter.OnItemClickLitener,IndexActivity.OnAppointFilterBackListener,MainFrameActivity.OnAppointPublishBackListener {

    private LinearLayout appoint_root_layout;

    // 发布
    private LinearLayout appoint_fragment_publish_iv;


    private LinearLayout appoint_fragment_filter_layout;
    private ImageView appoint_fragment_filter_iv;

    private int appointType;
    private int sexType;
    private int sortType;

    private String city="";
    private  int daysOffset=7;
    private int timeType=0;
    private int horType=0;
    private int emoType=0;
    private int minage=0;
    private int maxage=99;

    private boolean isall=false;

    private View convertView;

    private RecyclerView mRecyclerView;

    private AppointListAdapter mAdapter;

    private XRefreshView xrefreshView;

    private int userId;
    /**
     * 开始位置
     */
    private int location = 0;


    private boolean haveFilterData = false;

    private boolean haveFilterListData = false;


    private double lat = 0;

    private double lng = 0;


    private String nextQuery;

    private boolean haveGpsTag;


    private TextView error_location_tv;
    private TextView error_network_tv;
    private TextView  error_no_data_title;
    private TextView error_no_data_tv;
    private ImageView error_to_load_img;

    private LinearLayout error_location_layout;
    private LinearLayout error_network_layout;
    private LinearLayout error_no_data_layout;

    private LinearLayout error_to_load_layout;

    private Animation mRotateAnimation;

    private boolean isgetLoc = false;

    private boolean haveGeting = false;

    private  LocInfo myLoc;

    private boolean goSetLocationg=false;

    public AppointmentFragment() {

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,Bundle savedInstanceState) {

        convertView = inflater.inflate(R.layout.appointment_fragment_layout, container, false);

        userId = YPApplication.loginUser.getUserId();
        initView(convertView);
        IndexActivity.setOnAppointPublishBackListener(this);
        IndexActivity.setOnAppointFilterBackListener(this);
        initData();
        getLocAndInit();
        return convertView;
    }

    @Override
    public void onResume() {
        super.onResume();
        if(goSetLocationg){
            getLocAndInit();
        }
    }


    private void getLocAndInit(){
        // 获得位置
        haveGpsTag = Loc.isGpsAvailable();
        if (!haveGpsTag) {
            //未开启定位权限
            error_to_load_layout.setVisibility(View.GONE);
            error_network_layout.setVisibility(View.GONE);


            if (haveFilterData) {
                error_location_layout.setVisibility(View.GONE);
                if (haveFilterListData) {
                    xrefreshView.setVisibility(View.VISIBLE);
                    error_no_data_layout.setVisibility(View.GONE);
                } else {
                    xrefreshView.setVisibility(View.GONE);
                    error_no_data_layout.setVisibility(View.VISIBLE);

                }
                //提示未开启定位
                //showDialog();
                locDialog = DialogUtil.createHintOperateDialog(getActivity(), "定位服务未开启", "开启定位服务以看到附近用户", "取消", "立即开启", locationbackCallListener);
                locDialog.setCanceledOnTouchOutside(false);// 设置点击屏幕Dialog不消失
                if (!getActivity().isFinishing()) {
                    locDialog.show();
                }


            } else {
                error_location_layout.setVisibility(View.VISIBLE);
                xrefreshView.setVisibility(View.GONE);
                error_no_data_layout.setVisibility(View.GONE);
            }

        } else {
            error_location_layout.setVisibility(View.GONE);
            error_network_layout.setVisibility(View.GONE);

            if (haveFilterData) {
                if (haveFilterListData) {
                    xrefreshView.setVisibility(View.VISIBLE);
                    error_no_data_layout.setVisibility(View.GONE);
                } else {
                    xrefreshView.setVisibility(View.GONE);
                    error_no_data_layout.setVisibility(View.VISIBLE);
                    LogUtils.e("没有本地数据-0-0-0-0-0-==========");
                    initRotateAnimation();
                }

            } else {
                xrefreshView.setVisibility(View.GONE);
                error_no_data_layout.setVisibility(View.GONE);
                error_to_load_layout.setVisibility(View.VISIBLE);
                LogUtils.e("没有本地数据0-0-0-0-0-0-0-0-0-0-0");
                initRotateAnimation();
            }
            getLocinfo();
        }
    }

    private  void getLocinfo() {

        new Thread(new Runnable() {

            @Override
            public void run() {
                int count = 0;
                while (true) {
                    boolean isExist = Loc.IsLocExist();
                    if (isExist) {
                        break;
                    }
                    count++;
                    if (count > 9) {
                        break;
                    }
                    SystemClock.sleep(1000);
                }

                myLoc = Loc.getLoc();
                if (myLoc != null && myLoc.getLoc() != null) {
                    LocHandler.sendEmptyMessage(1);

                } else {
                    LocHandler.sendEmptyMessage(0);
                }
            }
        }).start();

    }

    @Override
    public void onPause() {
        super.onPause();
        Loc.sendLocControlMessage(false);
    }

    private void initView(View view) {

        appoint_root_layout= (LinearLayout) view.findViewById(R.id.appoint_root_layout);
        appoint_root_layout.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {

            }
        });

        appoint_fragment_filter_layout = (LinearLayout) view.findViewById(R.id.appoint_fragment_filter_layout);
        appoint_fragment_filter_layout.setOnClickListener(this);
        appoint_fragment_filter_iv=(ImageView) view.findViewById(R.id.appoint_fragment_filter_iv);

        appoint_fragment_publish_iv = (LinearLayout) view.findViewById(R.id.appoint_fragment_publish_iv);
        appoint_fragment_publish_iv.setOnClickListener(this);

        error_location_tv = (TextView) view.findViewById(R.id.error_location_tv);
        error_network_tv = (TextView) view.findViewById(R.id.error_network_tv);
        error_no_data_tv = (TextView) view.findViewById(R.id.error_no_data_tv);
        error_no_data_title = (TextView) view.findViewById(R.id.error_no_data_title);
        error_to_load_img = (ImageView) view.findViewById(R.id.error_to_load_img);

        error_location_layout = (LinearLayout) view.findViewById(R.id.error_location_layout);
        error_network_layout = (LinearLayout) view.findViewById(R.id.error_network_layout);
        error_no_data_layout = (LinearLayout) view.findViewById(R.id.error_no_data_layout);
        error_to_load_layout = (LinearLayout) view.findViewById(R.id.error_to_load_layout);

        error_no_data_tv.setOnClickListener(new OnClickListener() {
            @Override
            public void onClick(View v) {
                if(!isall){
                    appointType = 0;
                    sexType = 0;
                    sortType=0;
                    daysOffset=6;
                    timeType=0;
                    maxage=99;
                    minage=0;
                    horType=0;
                    emoType=0;
                    city="全国";
                    getAppointList(location);
                }
            }
        });

        error_network_tv.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {

                getAppointList(location);
            }
        });

        error_location_tv.setOnClickListener(new OnClickListener() {

            @Override
            public void onClick(View v) {

                try {
                    Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                    startActivity(intent);
                } catch (Exception e) {
                    Intent intent = new Intent(Settings.ACTION_SETTINGS);
                    getActivity().startActivity(intent);
                }

            }
        });

        xrefreshView = (XRefreshView) view.findViewById(R.id.appoint_xrefreshview);
        xrefreshView.setAutoLoadMore(true);
        setXrefreshListener();
        mRecyclerView = (RecyclerView) view.findViewById(R.id.appoint_list_recyclerview);
        mRecyclerView.setLayoutManager(new LinearLayoutManager(getActivity()));
//        mRecyclerView.addItemDecoration(new DividerItemDecoration(getActivity(),
//                DividerItemDecoration.VERTICAL_LIST, R.drawable.appoint_list_line));
        mRecyclerView.setItemAnimator(new DefaultItemAnimator());
        mAdapter = new AppointListAdapter(getActivity(), null);
        mRecyclerView.setAdapter(mAdapter);
        mAdapter.setOnItemClickLitener(this);
        xrefreshView.setVisibility(View.GONE);



    }


    protected void initData() {
        getAppointFilter();

        String filterStr = DbHelperUtils.getAppointV2FilterList(userId);
        if (!CheckUtil.isEmpty(filterStr)) {

            AppointListDto nearAppointListDto = new AppointListDto();
            nearAppointListDto = JsonUtils.fromJson(filterStr, AppointListDto.class);

            if (nearAppointListDto != null) {
                List<AppointmentDto> list = new ArrayList<AppointmentDto>();
                list = nearAppointListDto.getList();
                haveFilterData = true;


                if (list != null && list.size() > 0) {
                    xrefreshView.setVisibility(View.VISIBLE);
                    error_no_data_layout.setVisibility(View.GONE);
                    haveFilterListData = true;
                    nextQuery = nearAppointListDto.getNextQuery();
                    mAdapter.setData(nearAppointListDto.getList());
                    mAdapter.notifyDataSetChanged();
                } else {

                    haveFilterListData = false;
                    error_no_data_layout.setVisibility(View.VISIBLE);
                    xrefreshView.setVisibility(View.GONE);
                }

            } else {
                //没有本地数据
                LogUtils.e("没有本地数据====");
                xrefreshView.setVisibility(View.GONE);
                error_to_load_layout.setVisibility(View.VISIBLE);
                initRotateAnimation();
                haveFilterData = false;
                haveFilterListData = false;

            }

        } else {
            //没有本地数据
            LogUtils.e("没有本地数据------");
            xrefreshView.setVisibility(View.GONE);
            error_to_load_layout.setVisibility(View.VISIBLE);
            initRotateAnimation();
            haveFilterData = false;
            haveFilterListData = false;
        }
//        getAppointList(location);
    }


    private void setXrefreshListener() {
        // 设置静默加载模式
        xrefreshView.setSlienceLoadMore();
        xrefreshView.setAutoLoadMore(true);
        xrefreshView.setPinnedTime(1000);
        xrefreshView.setMoveForHorizontal(true);
        xrefreshView.setCustomHeaderView(new CustomHeaderAnim(getActivity()));
        // 设置静默加载时提前加载的item个数
        xrefreshView.setPreLoadCount(5);

        xrefreshView.setXRefreshViewListener(new XRefreshView.SimpleXRefreshListener() {

            @Override
            public void onRefresh() {
                new Handler().postDelayed(new Runnable() {
                    @Override
                    public void run() {
                        location = 0;
                        getAppointList(location);
                        xrefreshView.stopRefresh();
                    }
                }, 1000);
            }

            @Override
            public void onLoadMore(boolean isSlience) {
                super.onLoadMore(isSlience);
                new Handler().postDelayed(new Runnable() {
                    public void run() {

                        loadMoregetNearAppointList();
                        //刷新完成必须调用此方法停止加载
                        xrefreshView.stopLoadMore();
                    }
                }, 1000);
            }

        });


        xrefreshView.setOnAbsListViewScrollListener(new AbsListView.OnScrollListener() {

            @Override
            public void onScrollStateChanged(AbsListView view, int scrollState) {

            }

            @Override
            public void onScroll(AbsListView view, int firstVisibleItem,
                                 int visibleItemCount, int totalItemCount) {

            }
        });

    }


    @Override
    public void onClick(View v) {
        int id = v.getId();
        switch (id) {
            case R.id.appoint_fragment_filter_layout:// 筛选
                // //设置layout在PopupWindow中显示的位置
                Bundle bd = new Bundle();
                ActivityUtil.jump(getActivity(), AppointmentFilterActivity.class, bd,0, 100);
                break;

            case R.id.appoint_fragment_publish_iv:// 发布
                isCan_publish_dating();
                break;

            default:
                break;
        }
    }

    private Dialog loadingDiaog;

    /**
     *判断是否满足约会发布条件
     */
    private void isCan_publish_dating() {

        loadingDiaog = DialogUtil.LoadingDialog(getActivity(),null);

        if (!(getActivity().isFinishing())) {
            loadingDiaog.show();
        }


        DatingRequirmentBean datingRequirmentBean = new DatingRequirmentBean();
        datingRequirmentBean.setUserId(YPApplication.loginUser.getUserId());


        DatingRequirmentService datingRequirmentService = new DatingRequirmentService(getActivity());

        datingRequirmentService.parameter(datingRequirmentBean);
        datingRequirmentService.callBack(new OnCallBackSuccessListener() {
            @Override
            public void onSuccess(RespBean respBean) {
                super.onSuccess(respBean);
                loadingDiaog.dismiss();
                DatingRequirmentRespBean datingRequirmentRespBean=(DatingRequirmentRespBean)respBean;
                DatingRequirementListDto datingRequirementListDto=datingRequirmentRespBean.getResp();
                if(datingRequirementListDto.getRequirements()!=null && datingRequirementListDto.getRequirements().size()>=0){
                    boolean haveNotIsReady=false;
                    for(int i=0;i<datingRequirementListDto.getRequirements().size();i++){
                        DatingRequirment datingRequirment=datingRequirementListDto.getRequirements().get(i);
                        if(!datingRequirment.isReady()){
                            haveNotIsReady=true;
                            break;
                        }
                    }
                    if(haveNotIsReady){
                        canNotPublishDatingDialog=DialogUtil.createNotCanPublishDatingHintDialog(getActivity(),datingRequirementListDto.getRequirements(),canNotPublishDatingDialogbackCallListener);
                        canNotPublishDatingDialog.show();
                    }else{
                        Bundle bundle=new Bundle();
                        bundle.putString(YpSettings.FROM_PAGE,"AppointmentFragment");
                        ActivityUtil.jump(getActivity(), AppointPublishTypeSelectActivity.class, bundle, 0,100);
                    }
                }

            }
        }, new OnCallBackFailListener(){
            @Override
            public void onFail(RespBean respBean) {
                super.onFail(respBean);
                loadingDiaog.dismiss();

                String msg = respBean.getMsg();
                if (TextUtils.isEmpty(msg)) {
                    DialogUtil.showDisCoverNetToast(getActivity());
                } else {
                    DialogUtil.showDisCoverNetToast(getActivity(),msg);
                }
            }
        });

        datingRequirmentService.enqueue();
    }


    @Override
    public void onAppointFilterBackListener(int appointtype,int sextype,int daysoffset,int timetype,int minAge,int maxAge,int emotype,int hortype,int sorttype,String City) {

        appointType = appointtype;
        sexType = sextype;
        sortType=sorttype;

        daysOffset=daysoffset;
        timeType=timetype;
        maxage=maxAge;
        minage=minAge;
        horType=hortype;
        emoType=emotype;
        city=City;

        if(sexType==0 && sortType==0 && appointType==Constant.APPOINT_TYPE_NO_LIMIT && daysOffset==6 && timeType==0&& maxage==99&&minage==0&&horType==0&& emoType==0 && !city.equals("全国")){
            //更换筛选的icon
            appoint_fragment_filter_iv.setBackgroundResource(R.drawable.filter_icon);
        }else{
            //更换筛选的icon
            appoint_fragment_filter_iv.setBackgroundResource(R.drawable.filter_icon_selected);

        }
        LogUtils.e("星座="+horType);
        if(xrefreshView.getVisibility()==View.GONE){
            getAppointList(0);
        }else{
            xrefreshView.startRefresh();
        }
//        getAppointList(0);
    }

    private Dialog canNotPublishDatingDialog;
    private BackCallListener canNotPublishDatingDialogbackCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {

            if (!getActivity().isFinishing()) {
                canNotPublishDatingDialog.dismiss();
            }
            Bundle bundle=new Bundle();
            bundle.putInt(YpSettings.USERID, YPApplication.loginUser.getUserId());
            ActivityUtil.jump(getActivity(), UserInfoActivity.class, bundle, 0,100);

        }

        @Override
        public void onCancel(View view, Object... obj) {
            if (!getActivity().isFinishing()) {
                canNotPublishDatingDialog.dismiss();
            }

        }
    };

    @Override
    public void onDestroy() {
        super.onDestroy();
        if (mRotateAnimation != null) {
            mRotateAnimation.cancel();
            error_to_load_img.clearAnimation();
        }
    }


    /**
     * 获取缓存筛选条件
     */


    private void getAppointFilter() {

        AppointFilterDto dto = DbHelperUtils.getAppointFilter(userId);
        if (dto != null) {
            appointType = dto.getDatingType();
            sexType = dto.getSexType();
            sortType=dto.getSort();
            daysOffset=dto.getDaysOffset();
            timeType=dto.getDatingTimeType();
            if(dto.getMinAge()!=0&&dto.getMaxAge()!=0){
                minage=dto.getMinAge();
                maxage=dto.getMaxAge();
            }else{
                minage=0;
                maxage=99;
            }
            horType=dto.getHorType();
            emoType=dto.getEmoType();

            if(!CheckUtil.isEmpty(dto.getCity())){
                city=dto.getCity();
            }else{
                city="同城";
            }
        } else {
            appointType = 0;
            sexType = 0;
            sortType=0;

            daysOffset=6;
            timeType=0;
            maxage=99;
            minage=0;
            horType=0;
            emoType=0;
            city="同城";
        }

        if(sexType==0 && sortType==0 && appointType==Constant.APPOINT_TYPE_NO_LIMIT && daysOffset==6 && timeType==0&& maxage==99&&minage==0&&horType==0&& emoType==0 && !city.equals("全国")){
            //更换筛选的icon
            appoint_fragment_filter_iv.setBackgroundResource(R.drawable.filter_icon);
        }else{
            //更换筛选的icon
            appoint_fragment_filter_iv.setBackgroundResource(R.drawable.filter_icon_selected);

        }

    }


    private Handler LocHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {

            try {

                if (msg.what == 0) {//

                    if (mRotateAnimation != null) {
                        mRotateAnimation.cancel();
                        error_to_load_img.clearAnimation();
                    }

                    if (haveFilterData) {
                        if (haveFilterListData) {
                            xrefreshView.setVisibility(View.VISIBLE);
                            error_no_data_layout.setVisibility(View.GONE);
                        } else {
                            xrefreshView.setVisibility(View.GONE);
                            error_no_data_layout.setVisibility(View.VISIBLE);
                        }
                        //提示未开启定位
//						DialogUtil.showDisCoverNetToast(getActivity(),"获取位置失败");
                    } else {
                        xrefreshView.setVisibility(View.GONE);
                        error_no_data_layout.setVisibility(View.GONE);
                        error_to_load_layout.setVisibility(View.GONE);
                        error_location_layout.setVisibility(View.VISIBLE);
                    }

                } else if (msg.what == 1) {// 找到位置
                    isgetLoc = true;
                    location = 0;
                    lat = myLoc.getLoc().getLatitude();
                    lng = myLoc.getLoc().getLongitude();
                    getAppointList(location);

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    };


    /**
     * 定位未开启dialog
     */

    private Dialog locDialog;


    private BackCallListener locationbackCallListener = new BackCallListener() {
        @Override
        public void onEnsure(View view, Object... obj) {
            if (!getActivity().isFinishing()) {
                locDialog.dismiss();
            }
            goSetLocationg=true;
            try {
                Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);
                startActivity(intent);
            } catch (Exception e) {
                Intent intent = new Intent(Settings.ACTION_SETTINGS);
                startActivity(intent);
            }
        }

        @Override
        public void onCancel(View view, Object... obj) {
            if (!getActivity().isFinishing()) {
                locDialog.dismiss();
            }

        }
    };

    /**
     * 获取约会列表
     */
    private void getAppointList(final int start) {

        if (haveGeting) {
            return;
        }

        haveGeting = true;


        LocInfo myLoc = Loc.getLoc();
        if (myLoc != null && myLoc.getLoc() != null) {
            lat = myLoc.getLoc().getLatitude();
            lng = myLoc.getLoc().getLongitude();
        }


        LatLng pt = new LatLng(lat, lng);
        pt = Loc.getBaiduGpsFromGcj(pt.latitude, pt.longitude);

        DaingsNearestBean nearestBean = new DaingsNearestBean();

        nearestBean.setLat(pt.latitude);
        nearestBean.setLng(pt.longitude);
        nearestBean.setSex(sexType);
        nearestBean.setSort(sortType);
        nearestBean.setType(appointType);

        nearestBean.setDaysOffset(daysOffset);
        nearestBean.setTime(timeType);
        nearestBean.setAgeMax(maxage);
        nearestBean.setAgeMin(minage);
        nearestBean.setHoroscope(horType);
        nearestBean.setRelationship(emoType);
        nearestBean.setCity(city);


        if(sexType==0 && sortType==0 && appointType==Constant.APPOINT_TYPE_NO_LIMIT && daysOffset==6 && timeType==0&& maxage==99&&minage==0&&horType==0&& emoType==0 && !city.equals("全国")){
            isall=true;
        }else{
            isall=false;
        }

        LogUtils.e("约会longitude="+pt.longitude+"=====latitude"+pt.latitude);


        DaingsNearestService nearestService = new DaingsNearestService(getActivity());
        nearestService.parameter(nearestBean);
        nearestService.callBack(new OnCallBackSuccessListener() {
            @Override
            public void onSuccess(RespBean respBean) {
                super.onSuccess(respBean);

                //定位视图隐藏  网络加载失败视图隐藏-小圆圈视图隐藏
                //如果没有数据，则显示无数据视图，如果有数据则刷新视图
                // 动画回收
                DbHelperUtils.saveAppointFilter(appointType,sexType,daysOffset,timeType,minage,maxage,emoType,horType,sortType,city);

                haveGeting = false;
                if (mRotateAnimation != null) {
                    mRotateAnimation.cancel();
                    error_to_load_img.clearAnimation();
                }


                error_location_layout.setVisibility(View.GONE);
                error_network_layout.setVisibility(View.GONE);
                error_to_load_layout.setVisibility(View.GONE);


                DaingsNearestRespBean nearestRespBean = (DaingsNearestRespBean) respBean;
                AppointListDto nearAppointListDto = nearestRespBean.getResp();
                String resp_str = JsonUtils.toJson(nearAppointListDto);

                List<AppointmentDto> list = new ArrayList<AppointmentDto>();


                if (nearAppointListDto != null) {
                    DbHelperUtils.saveAppointV2FilterList(userId,resp_str);

                    haveFilterData = true;

                    list = nearAppointListDto.getList();

                    if (list != null && list.size() > 0) {
                        error_no_data_layout.setVisibility(View.GONE);
                        xrefreshView.setVisibility(View.VISIBLE);
                        nextQuery = nearAppointListDto.getNextQuery();
                        mAdapter.setData(list);
                        mAdapter.setSortType(sortType);
                        mAdapter.notifyDataSetChanged();
                        haveFilterListData = true;
                    } else {
                        error_no_data_layout.setVisibility(View.VISIBLE);
                        xrefreshView.setVisibility(View.GONE);
                        haveFilterListData = false;
                        if(isall){
                            error_no_data_title.setText("暂时没有约会");
                            error_no_data_tv.setText("你有机会成为第一个发布约会的人");
                        }else{
                            error_no_data_title.setText("暂时没有发现符合条件的约会");
                            error_no_data_tv.setText("点击查看所有约会>");
                        }
                    }

                } else {
                    haveFilterData = false;
                    haveFilterListData = false;
                    xrefreshView.setVisibility(View.GONE);
                    error_no_data_layout.setVisibility(View.VISIBLE);
                    if(isall){
                        error_no_data_title.setText("暂时没有约会");
                        error_no_data_tv.setText("你有机会成为第一个发布约会的人");
                    }else{
                        error_no_data_title.setText("暂时没有发现符合条件的约会");
                        error_no_data_tv.setText("点击查看所有约会>");
                    }

                }


            }
        }, new OnCallBackFailListener() {
            @Override
            public void onFail(RespBean respBean) {
                super.onFail(respBean);
                //定位视图隐藏  无数据视图隐藏-小圆圈视图隐藏-
                //如果没有本地缓存，则显示网络加载失败视图，如果有缓存则提示网络问题
                // 动画回收
                // 动画回收
                haveGeting = false;
                if (mRotateAnimation != null) {
                    mRotateAnimation.cancel();
                    error_to_load_img.clearAnimation();
                }

                error_location_layout.setVisibility(View.GONE);
                error_to_load_layout.setVisibility(View.GONE);

                if (haveFilterData) {
                    if (haveFilterListData) {
                        xrefreshView.setVisibility(View.VISIBLE);
                        error_no_data_layout.setVisibility(View.GONE);
                    } else {
                        xrefreshView.setVisibility(View.GONE);
                        error_no_data_layout.setVisibility(View.VISIBLE);
                    }

                    error_network_layout.setVisibility(View.GONE);
                    //提示连接失败
                    DialogUtil.showDisCoverNetToast(getActivity());
                } else {
                    error_network_layout.setVisibility(View.VISIBLE);
                    xrefreshView.setVisibility(View.GONE);
                    error_no_data_layout.setVisibility(View.GONE);
                }
            }
        });
        nearestService.enqueue();

    }


    /**
     * 获取约会列表
     */

    private void loadMoregetNearAppointList() {

        if (haveGeting) {
            return;
        }

        if (CheckUtil.isEmpty(nextQuery)) {
            return;
        }

        haveGeting = true;

        DaingsNearestMoreBean nearestsBean = new DaingsNearestMoreBean();
        nearestsBean.setNextQuery(nextQuery);
        DaingsNearestMoreService nearestsService = new DaingsNearestMoreService(getActivity());
        nearestsService.parameter(nearestsBean);
        nearestsService.callBack(new OnCallBackSuccessListener() {
            @Override
            public void onSuccess(RespBean respBean) {
                super.onSuccess(respBean);

                haveGeting = false;
                DaingsNearestMoreRespBean daingsNearestsRespBean = (DaingsNearestMoreRespBean) respBean;

                AppointListDto nearAppointListDto = daingsNearestsRespBean.getResp();

                List<AppointmentDto> list = new ArrayList<AppointmentDto>();

                if (nearAppointListDto != null) {

                    list = nearAppointListDto.getList();

                    if (list != null && list.size() > 0) {

                        nextQuery = nearAppointListDto.getNextQuery();
                        List<AppointmentDto> curlist = mAdapter.getDatas();
                        curlist.addAll(list);
                        mAdapter.setData(curlist);
                        mAdapter.setSortType(sortType);
                        mAdapter.notifyDataSetChanged();
                    }
                }


            }
        }, new OnCallBackFailListener() {
            @Override
            public void onFail(RespBean respBean) {
                super.onFail(respBean);

                //定位视图隐藏  无数据视图隐藏-小圆圈视图隐藏-
                //如果没有本地缓存，则显示网络加载失败视图，如果有缓存则提示网络问题
                haveGeting = false;

                error_location_layout.setVisibility(View.GONE);
                error_network_layout.setVisibility(View.GONE);
                error_no_data_layout.setVisibility(View.GONE);
                error_to_load_layout.setVisibility(View.GONE);
                //提示连接失败
                DialogUtil.showDisCoverNetToast(getActivity());
            }
        });
        nearestsService.enqueue();

    }


    @Override
    public void onItemClick(View view, int position) {

        Bundle bundle = new Bundle();
        AppointmentDto dto = mAdapter.getDatas().get(position);
        bundle.putString(YpSettings.APPOINTMENT_ID, dto.getId());
        bundle.putInt(YpSettings.USERID, dto.getOwner().getId());
        ActivityUtil.jump(getActivity(), AppointmentDetailActivity.class, bundle, 0, 100);
    }

    private void initRotateAnimation() {
        mRotateAnimation = new RotateAnimation(0, 360, Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);
        mRotateAnimation.setInterpolator(new LinearInterpolator());
        // mRotateAnimation.setDuration(ROTATION_ANIMATION_DURATION);
        mRotateAnimation.setRepeatCount(Animation.INFINITE);
        mRotateAnimation.setDuration(350);
        mRotateAnimation.setRepeatMode(Animation.RESTART);
        error_to_load_img.setAnimation(mRotateAnimation);
    }

    @Override
    public void onAppointPublishBackListener(int page) {
        LogUtils.e("page回来了＝＝＝＝"+page);
        if(page==1){
            if(xrefreshView.getVisibility()==View.GONE){
                getAppointList(0);
            }else{
                xrefreshView.startRefresh();
            }

        }
    }
}
