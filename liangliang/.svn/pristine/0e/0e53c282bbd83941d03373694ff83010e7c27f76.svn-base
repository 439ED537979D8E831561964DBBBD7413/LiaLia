package cn.chono.yopper.smack.service;

import android.app.ActivityManager;
import android.app.ActivityManager.RunningAppProcessInfo;
import android.app.ActivityManager.RunningTaskInfo;
import android.app.AlarmManager;
import android.app.Notification;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.media.MediaPlayer;
import android.os.Binder;
import android.os.Bundle;
import android.os.Handler;
import android.os.IBinder;
import android.text.TextUtils;

import com.lidroid.xutils.util.LogUtils;

import java.util.HashSet;
import java.util.List;

import cn.chono.yopper.MainFrameActivity;
import cn.chono.yopper.MainFrameActivity.BackPressHandler;
import cn.chono.yopper.R;
import cn.chono.yopper.YPApplication;
import cn.chono.yopper.YpSettings;
import cn.chono.yopper.activity.login.LoginOrRegisterActivity;
import cn.chono.yopper.data.MessageDto;
import cn.chono.yopper.data.MessageType;
import cn.chono.yopper.data.NotificationMsg;
import cn.chono.yopper.smack.SmackImpl;
import cn.chono.yopper.smack.entity.ChatDto;
import cn.chono.yopper.smack.exception.XXException;
import cn.chono.yopper.smack.service.XXBroadcastReceiver.EventHandler;
import cn.chono.yopper.utils.ActivityUtil;
import cn.chono.yopper.utils.ChatUtils;
import cn.chono.yopper.utils.Constants;
import cn.chono.yopper.utils.ContextUtil;
import cn.chono.yopper.utils.JsonUtils;
import cn.chono.yopper.utils.PlaySoundPool;
import cn.chono.yopper.utils.SHA;
import cn.chono.yopper.utils.SharedprefUtil;
import cn.chono.yopper.utils.VibratorUtil;

public class XXService extends BaseService implements EventHandler,BackPressHandler{
	public static final int CONNECTED = 0;
	public static final int DISCONNECTED = -1;
	public static final int CONNECTING = 1;
	public static final String PONG_TIMEOUT = "pong timeout";// 连接超时
	public static final String NETWORK_ERROR = "network error";// 网络错误
	public static final String LOGOUT = "logout";// 手动退出
	public static final String LOGIN_FAILED = "login failed";// 登录失败
	public static final String DISCONNECTED_WITHOUT_WARNING = "disconnected without warning";// 没有警告的断开连接

	private IBinder mBinder = new XXBinder();
	private IConnectionStatusCallback mConnectionStatusCallback;
	private SmackImpl mSmackable;
	private Thread mConnectingThread;
	private Handler mMainHandler = new Handler();

	private boolean mIsFirstLoginAction;

	// 自动重连 start
	private static final int RECONNECT_AFTER = 2;
	private static final int RECONNECT_MAXIMUM = 1 * 60;// 最大重连时间间隔
	private static final String RECONNECT_ALARM = "cn.chono.yoppercom.way.xx.RECONNECT_ALARM";
	// private boolean mIsNeedReConnection = false; // 是否需要重连
	private int mConnectedState = DISCONNECTED; // 是否已经连接
	private int mReconnectTimeout = RECONNECT_AFTER;
	private Intent mAlarmIntent = new Intent(RECONNECT_ALARM);
	private PendingIntent mPAlarmIntent;
	private BroadcastReceiver mAlarmReceiver = new ReconnectAlarmReceiver();
	// 自动重连 end
	private ActivityManager mActivityManager;
	private HashSet<String> mIsBoundTo = new HashSet<String>();// 用来保存当前正在聊天对象的数组


	/**
	 * 注册注解面和聊天界面时连接状态变化回调
	 *
	 * @param cb
	 */
	public void registerConnectionStatusCallback(IConnectionStatusCallback cb) {
		mConnectionStatusCallback = cb;
	}

	public void unRegisterConnectionStatusCallback() {
		mConnectionStatusCallback = null;
	}



	@Override
	public IBinder onBind(Intent intent) {
		String chatPartner = intent.getDataString();
		if ((chatPartner != null)) {
			mIsBoundTo.add(chatPartner);
		}
		String action = intent.getAction();
		if (!TextUtils.isEmpty(action) && TextUtils.equals(action, Constants.LOGIN_ACTION)) {
			mIsFirstLoginAction = true;
		} else {
			mIsFirstLoginAction = false;
		}
		YpSettings.xxservice=((XXService.XXBinder) mBinder).getService();

		return mBinder;
	}

	@Override
	public void onRebind(Intent intent) {
		super.onRebind(intent);
		String chatPartner = intent.getDataString();
		if ((chatPartner != null)) {
			mIsBoundTo.add(chatPartner);
		}
		String action = intent.getAction();
		if (!TextUtils.isEmpty(action) && TextUtils.equals(action, Constants.LOGIN_ACTION)) {
			mIsFirstLoginAction = true;
		} else {
			mIsFirstLoginAction = false;
		}
	}

	@Override
	public boolean onUnbind(Intent intent) {
		String chatPartner = intent.getDataString();
		if ((chatPartner != null)) {
			mIsBoundTo.remove(chatPartner);
		}
		return true;
	}

	public class XXBinder extends Binder {
		public XXService getService() {
			return XXService.this;
		}
	}

	@Override
	public void onCreate() {
		super.onCreate();
		XXBroadcastReceiver.mListeners.add(this);
		MainFrameActivity.mListeners.add(this);
		mActivityManager = ((ActivityManager) getSystemService(Context.ACTIVITY_SERVICE));
		mPAlarmIntent = PendingIntent.getBroadcast(this, 0, mAlarmIntent,PendingIntent.FLAG_UPDATE_CURRENT);
		registerReceiver(mAlarmReceiver, new IntentFilter(RECONNECT_ALARM));


	}

	@Override
	public int onStartCommand(Intent intent, int flags, int startId) {
		if (intent != null && intent.getAction() != null && TextUtils.equals(intent.getAction(),XXBroadcastReceiver.BOOT_COMPLETED_ACTION)) {
			String account = SharedprefUtil.get(ContextUtil.getContext(),Constants.ACCOUNT, "");
			String password = SharedprefUtil.get(ContextUtil.getContext(),Constants.PASSWORD, "");
			if (!TextUtils.isEmpty(account) && !TextUtils.isEmpty(password))
				Login(account, password);
		}
		mMainHandler.removeCallbacks(monitorStatus);
		mMainHandler.postDelayed(monitorStatus, 1000L);// 检查应用是否在后台运行线程
		return START_STICKY;
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		XXBroadcastReceiver.mListeners.remove(this);
		MainFrameActivity.mListeners.remove(this);
		((AlarmManager) getSystemService(Context.ALARM_SERVICE)).cancel(mPAlarmIntent);// 取消重连闹钟
		unregisterReceiver(mAlarmReceiver);// 注销广播监听
		logout();
	}

	// 登录
	public void Login(final String account, final String password) {
		if (!ActivityUtil.isNetWorkAvailable(this)) {
			connectionFailed(NETWORK_ERROR);
			Intent intent = new Intent();
			intent.setAction("cn.yopper.chono.connect.state");
			Bundle bundle=new Bundle();
			bundle.putString(YpSettings.CONNECT_STATE, "未连接");
			intent.putExtras(bundle);
			ContextUtil.getContext().sendBroadcast(intent);
			return;
		}
		if (mConnectingThread != null) {
			return;
		}
		mConnectingThread = new Thread() {
			@Override
			public void run() {
				try {
					Intent intent = new Intent();
					intent.setAction("cn.yopper.chono.connect.state");
					Bundle bundle=new Bundle();
					bundle.putString(YpSettings.CONNECT_STATE, "连接中...");
					intent.putExtras(bundle);
					ContextUtil.getContext().sendBroadcast(intent);

					postConnecting();
					if(mSmackable==null){
						mSmackable = new SmackImpl(XXService.this);
					}

					if (mSmackable.login(account, password)) {
						// 登陆成功
						//						connectionListener= new XmppConnectionStateListence();  
						//						XmppConnection.getConnection().addConnectionListener(connectionListener); 


						postConnectionScuessed();

					} else {

						// 登陆失败
						postConnectionFailed(LOGIN_FAILED);
					}
				} catch (XXException e) {

					String message = e.getLocalizedMessage();
					// 登陆失败
					if (e.getCause() != null)
						message += "\n" + e.getCause().getLocalizedMessage();
					postConnectionFailed(message);

					e.printStackTrace();
				} finally {
					if (mConnectingThread != null)
						synchronized (mConnectingThread) {
							mConnectingThread = null;
						}
				}
			}

		};
		mConnectingThread.start();
	}

	// 退出
	public boolean logout() {
		// mIsNeedReConnection = false;// 手动退出就不需要重连闹钟了
		boolean isLogout = false;
		if (mConnectingThread != null) {
			synchronized (mConnectingThread) {
				try {
					mConnectingThread.interrupt();
					mConnectingThread.join(50);
				} catch (InterruptedException e) {
				} finally {
					mConnectingThread = null;
				}
			}
		}

		if (mSmackable != null) {
			LogUtils.e("退出========");
			isLogout = mSmackable.logout();
			mSmackable = null;
		}
		connectionFailed(LOGOUT);// 手动退出
		return isLogout;
	}


	// 发送消息
	public void sendMessage(String user, String message,long date,String packetId) {
		if (mSmackable != null && mSmackable.isAuthenticated()) {
			// 在线消息
			mSmackable.sendMessage(user, message,date,packetId, mConnectionStatusCallback);
		} else {
			// 离线消息
			ChatUtils.SaveOrUpdateChatMsgToDB(user, message,date,ChatDto.s_type,ChatDto.readed_status,packetId,ChatDto.no_succeed);
			ChatUtils.saveMessageRecord(message, user, ChatDto.no_succeed, MessageDto.no_strange,ChatDto.s_type,date);
			if (mConnectionStatusCallback != null) {
				mConnectionStatusCallback.ListenSendStatus(ChatDto.no_succeed,packetId);
			}

		}
	}

	// 是否连接上服务器
	public boolean isAuthenticated() {
		if (mSmackable != null) {
			return mSmackable.isAuthenticated();
		}
		return false;
	}

	// 清除通知栏
	public void clearNotifications(String Jid) {
		clearNotification(Jid);
	}

	/**
	 * 非UI线程连接失败反馈
	 *
	 * @param reason
	 */
	public void postConnectionFailed(final String reason) {
		Intent intent = new Intent();
		intent.setAction("cn.yopper.chono.connect.state");
		Bundle bundle=new Bundle();
		bundle.putString(YpSettings.CONNECT_STATE, "未连接");
		intent.putExtras(bundle);
		ContextUtil.getContext().sendBroadcast(intent);

		mMainHandler.post(new Runnable() {
			public void run() {
				connectionFailed(reason);
			}
		});
	}

	// 设置连接状态
	public void setStatusFromConfig() {
		mSmackable.setStatusFromConfig();
	}



	/**
	 * UI线程反馈连接失败
	 *
	 * @param reason
	 */
	private void connectionFailed(String reason) {
		mConnectedState = DISCONNECTED;// 更新当前连接状态


		if (mSmackable != null)
			//mSmackable.setStatusOffline();// 将所有联系人标记为离线
			if (TextUtils.equals(reason, LOGOUT)) {// 如果是手动退出
				((AlarmManager) getSystemService(Context.ALARM_SERVICE)).cancel(mPAlarmIntent);
				return;
			}
		// 回调
		if (mConnectionStatusCallback != null) {
			mConnectionStatusCallback.connectionStatusChanged(mConnectedState,reason);
			if (mIsFirstLoginAction)// 如果是第一次登录,就算登录失败也不需要继续
				return;
		}

		// 无网络连接时,直接返回
		if (!ActivityUtil.isNetWorkAvailable(this)) {

			((AlarmManager) getSystemService(Context.ALARM_SERVICE)).cancel(mPAlarmIntent);
			if(mSmackable!=null){
				mSmackable.logout();
			}
			return;
		}

		String account = SharedprefUtil.get(ContextUtil.getContext(), Constants.ACCOUNT,"");
		String password = SharedprefUtil.get(ContextUtil.getContext(),Constants.PASSWORD, "");
		// 无保存的帐号密码时，也直接返回
		if (TextUtils.isEmpty(account) || TextUtils.isEmpty(password)) {
			return;
		}
		// 如果不是手动退出并且需要重新连接，则开启重连闹钟
		if (SharedprefUtil.getBoolean(ContextUtil.getContext(), Constants.AUTO_RECONNECT, true)) {
			((AlarmManager) getSystemService(Context.ALARM_SERVICE)).set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis()+ mReconnectTimeout * 1000, mPAlarmIntent);
			mReconnectTimeout = mReconnectTimeout * 2;
			if (mReconnectTimeout > RECONNECT_MAXIMUM)
				mReconnectTimeout = RECONNECT_MAXIMUM;
		} else {
			((AlarmManager) getSystemService(Context.ALARM_SERVICE)).cancel(mPAlarmIntent);
		}

	}

	private void postConnectionScuessed() {
		Intent intent = new Intent();
		intent.setAction("cn.yopper.chono.connect.state");
		Bundle bundle=new Bundle();
		bundle.putString(YpSettings.CONNECT_STATE, "消息");
		intent.putExtras(bundle);
		ContextUtil.getContext().sendBroadcast(intent);

		mMainHandler.post(new Runnable() {
			public void run() {
				connectionScuessed();
			}

		});
	}

	private void connectionScuessed() {
		mConnectedState = CONNECTED;// 已经连接上
		mReconnectTimeout = RECONNECT_AFTER;// 重置重连的时间

		if (mConnectionStatusCallback != null)
			mConnectionStatusCallback.connectionStatusChanged(mConnectedState,"");


	}

	// 连接中，通知界面线程做一些处理
	private void postConnecting() {
		mMainHandler.post(new Runnable() {
			public void run() {
				connecting();
			}
		});
	}

	private void connecting() {
		mConnectedState = CONNECTING;// 连接中
		if (mConnectionStatusCallback != null)
			mConnectionStatusCallback.connectionStatusChanged(mConnectedState,"");
	}

	// 收到新消息
	public void newMessage(final ChatDto dto) {
		mMainHandler.post(new Runnable() {
			public void run() {

				Intent intent = new Intent();

				String msgtype = ChatUtils.getMsgType(dto.getMessage());
				if (TextUtils.equals(msgtype, MessageType.Notification)) {
					NotificationMsg notificationMsg = JsonUtils.fromJson(dto.getMessage(), NotificationMsg.class);
					if (notificationMsg != null) {
						int type = notificationMsg.getNotifytype();
						if (type == 9) {
							intent.setAction("cn.yopper.chono.article.comment.reply");
							Bundle bundle = new Bundle();
							bundle.putString("message", dto.getMessage());
							intent.putExtras(bundle);
						}else{
							intent.setAction("cn.yopper.chono.set.newmsg");
						}
					}else{
						intent.setAction("cn.yopper.chono.set.newmsg");
					}
				}else{
					intent.setAction("cn.yopper.chono.set.newmsg");
				}
				ContextUtil.getContext().sendBroadcast(intent);

				if(dto.getJid().equals("system_dailly_match@chono")){

					VibratorUtil.Vibrate(1000);
					if (mConnectionStatusCallback != null){
						mConnectionStatusCallback.ReceiveNewMsg(dto);
					}

				}else{

					if (mConnectionStatusCallback != null){
						mConnectionStatusCallback.ReceiveNewMsg(dto);
					}

					if (!isAppOnForeground()){
						if(mSmackable!=null){
							notifyClient(dto.getJid(), "", dto.getMessage(),!mIsBoundTo.contains(dto.getJid()));
						}

					}else{

						if (SharedprefUtil.getBoolean(ContextUtil.getContext(),YpSettings.IS_OPEAN_MESSAGE_VOICE, true)) {
							long pre_time=SharedprefUtil.getLong(ContextUtil.getContext(), YpSettings.message_voice_time,0);
							if(pre_time==0){
								MediaPlayer.create(ContextUtil.getContext(), R.raw.office).start();
								PlaySoundPool playSoundPool=new PlaySoundPool(ContextUtil.getContext());
								playSoundPool.loadSfx(R.raw.office, 1);
								playSoundPool.play(1, 0);
								SharedprefUtil.saveLong(ContextUtil.getContext(), YpSettings.message_voice_time,System.currentTimeMillis());
							}else{
								long cur_time=System.currentTimeMillis();
								if(cur_time-pre_time>=2000){
									MediaPlayer.create(ContextUtil.getContext(), R.raw.office).start();
									PlaySoundPool playSoundPool=new PlaySoundPool(ContextUtil.getContext());
									playSoundPool.loadSfx(R.raw.office, 1);
									playSoundPool.play(1, 0);
									SharedprefUtil.saveLong(ContextUtil.getContext(), YpSettings.message_voice_time,cur_time);
								}
							}
						}
					}
				}

			}



			//}
		});
	}


	public void MessageSendStatus(final int send_status,String packetId) {

		if (mConnectionStatusCallback != null){
			mConnectionStatusCallback.ListenSendStatus(send_status, packetId);
		}
	}


	// 判断联系人是否掉线
	public void rosterChanged() {
		if (mSmackable == null)
			return;
		if (mSmackable != null && !mSmackable.isAuthenticated()) {
			connectionFailed(DISCONNECTED_WITHOUT_WARNING);
		}
	}

	/**
	 * 更新通知栏
	 *
	 * @param message
	 */
	public void updateServiceNotification(String message) {
		if (!SharedprefUtil.getBoolean(ContextUtil.getContext(), Constants.FOREGROUND, true))
			return;
		String title = SharedprefUtil.get(ContextUtil.getContext(), Constants.ACCOUNT, "");
		Notification n = new Notification(R.drawable.application_icon, title,System.currentTimeMillis());
		n.flags = Notification.FLAG_ONGOING_EVENT | Notification.FLAG_NO_CLEAR;

		Intent notificationIntent = new Intent(this, LoginOrRegisterActivity.class);
		notificationIntent.setFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);
		n.contentIntent = PendingIntent.getActivity(this, 0,notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);

		n.setLatestEventInfo(this, title, message, n.contentIntent);
		startForeground(SERVICE_NOTIFICATION, n);
	}




	// 判断程序是否在后台运行的任务
	Runnable monitorStatus = new Runnable() {
		public void run() {
			try {
				mMainHandler.removeCallbacks(monitorStatus);
				// 如果在后台运行并且连接上了
				if (!isAppOnForeground()) {
					// if (isAuthenticated())
					//updateServiceNotification(getString(R.string.run_bg_ticker));
					return;
				} else {
					stopForeground(true);
				}
				// mMainHandler.postDelayed(monitorStatus, 1000L);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	};
	/**
	 * 判断应用是否在后台运行
	 * @return
	 */
	public boolean isAppOnForeground() {
		List<RunningTaskInfo> taskInfos = mActivityManager.getRunningTasks(1);
		if (taskInfos.size() > 0 && TextUtils.equals(getPackageName(),taskInfos.get(0).topActivity.getPackageName())) {
			return true;
		}

		List<RunningAppProcessInfo> appProcesses = mActivityManager.getRunningAppProcesses();
		if (appProcesses == null)
			return false;
		for (RunningAppProcessInfo appProcess : appProcesses) {
			if (appProcess.processName.equals("cn.chono.yopper") && appProcess.importance == RunningAppProcessInfo.IMPORTANCE_FOREGROUND) {
				return true;
			}
		}
		return false;
	}

	// 自动重连广播
	private class ReconnectAlarmReceiver extends BroadcastReceiver {
		public void onReceive(Context ctx, Intent i) {
			if (!SharedprefUtil.getBoolean(XXService.this,Constants.AUTO_RECONNECT, true)) {
				return;
			}

			if (mConnectedState != DISCONNECTED) {
				return;
			}

			String account  = YPApplication.loginUser.getUserId() + "";
			String password = YPApplication.loginUser.getAuthToken();

			if (TextUtils.isEmpty(account) || TextUtils.isEmpty(password)) {
				return;
			}
			Login(account, SHA.encodeByMD5(password));
		}
	}



	@Override
	public void onNetChange() {
		if (!ActivityUtil.isNetWorkAvailable(this)) {// 如果是网络断开，不作处理
			((AlarmManager) getSystemService(Context.ALARM_SERVICE)).set(AlarmManager.RTC_WAKEUP, System.currentTimeMillis()+ mReconnectTimeout * 1000, mPAlarmIntent);

			connectionFailed(NETWORK_ERROR);
			return;

		}
		if (isAuthenticated()){// 如果已经连接上，直接返回
			return;
		}

		String account  = YPApplication.loginUser.getUserId() + "";
		String password = YPApplication.loginUser.getAuthToken();

		if (TextUtils.isEmpty(account) || TextUtils.isEmpty(password)){
			// 如果没有帐号，也直接返回
			return;
		}
		Login(account, SHA.encodeByMD5(password));// 重连
	}


	@Override
	public void activityOnResume() {
		mMainHandler.post(monitorStatus);
	}

	@Override
	public void activityOnPause() {
		mMainHandler.postDelayed(monitorStatus, 1000L);
	}


}